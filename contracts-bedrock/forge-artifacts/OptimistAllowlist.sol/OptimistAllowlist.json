{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowlistAttestor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coinbaseQuestAttestor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optimistInviter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALLOWLIST_ATTESTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ATTESTATION_STATION",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COINBASE_QUEST_ATTESTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMIST_INVITER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "isAllowedToMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x61016060405234801561001157600080fd5b50604051610a74380380610a748339810160408190526100309161007c565b6001608052600060a052600260c0526001600160a01b0393841660e0529183166101005282166101205216610140526100db565b6001600160a01b038116811461007957600080fd5b50565b6000806000806080858703121561009257600080fd5b845161009d81610064565b60208601519094506100ae81610064565b60408601519093506100bf81610064565b60608601519092506100d081610064565b939692955090935050565b60805160a05160c05160e0516101005161012051610140516109246101506000396000818161011b015261035a0152600081816092015261030d01526000818161019e01526102c001526000818161017701526105360152600061026f015260006102460152600061021d01526109246000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063819f7e841161005b578063819f7e841461013d578063db083d7114610172578063db3c316314610199578063e7bd804e146101c057600080fd5b80633ac52df71461008d5780634813d8a6146100de57806354fd4d50146101015780635e4f489a14610116575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f16100ec3660046105cd565b6101e7565b60405190151581526020016100d5565b610109610216565b6040516100d5919061063a565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101647f636f696e626173652e71756573742d656c696769626c6500000000000000000081565b6040519081526020016100d5565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101647f6f7074696d6973742e63616e2d6d696e7400000000000000000000000000000081565b60006101f2826102b9565b80610201575061020182610306565b80610210575061021082610353565b92915050565b60606102417f00000000000000000000000000000000000000000000000000000000000000006103a0565b61026a7f00000000000000000000000000000000000000000000000000000000000000006103a0565b6102937f00000000000000000000000000000000000000000000000000000000000000006103a0565b6040516020016102a59392919061068b565b604051602081830303815290604052905090565b60006102107f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e740000000000000000000000000000006104dd565b60006102107f0000000000000000000000000000000000000000000000000000000000000000837f636f696e626173652e71756573742d656c696769626c650000000000000000006104dd565b60006102107f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e766974650000006104dd565b6060816000036103e357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561040d57806103f781610730565b91506104069050600a83610797565b91506103e7565b60008167ffffffffffffffff811115610428576104286107ab565b6040519080825280601f01601f191660200182016040528015610452576020820181803683370190505b5090505b84156104d5576104676001836107da565b9150610474600a866107f1565b61047f906030610805565b60f81b8183815181106104945761049461081d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506104ce600a86610797565b9450610456565b949350505050565b6040517f29b42cb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905260009182917f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105c3919081019061084c565b5111949350505050565b6000602082840312156105df57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461060357600080fd5b9392505050565b60005b8381101561062557818101518382015260200161060d565b83811115610634576000848401525b50505050565b602081526000825180602084015261065981604085016020870161060a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000845161069d81846020890161060a565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516106d9816001850160208a0161060a565b600192019182015283516106f481600284016020880161060a565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361076157610761610701565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826107a6576107a6610768565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000828210156107ec576107ec610701565b500390565b60008261080057610800610768565b500690565b6000821982111561081857610818610701565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561085e57600080fd5b815167ffffffffffffffff8082111561087657600080fd5b818401915084601f83011261088a57600080fd5b81518181111561089c5761089c6107ab565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156108e2576108e26107ab565b816040528281528760208487010111156108fb57600080fd5b61090c83602083016020880161060a565b97965050505050505056fea164736f6c634300080f000a",
    "sourceMap": "498:5017:198:-:0;;;1850:414;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2041:1;732:22:213;;2044:1:198;764:22:213;;2047:1:198;796:22:213;;-1:-1:-1;;;;;2064:41:198;;::::1;;::::0;2115:39;;::::1;;::::0;2164:48;::::1;;::::0;2222:35:::1;;::::0;498:5017;;14:151:302;-1:-1:-1;;;;;109:31:302;;99:42;;89:70;;155:1;152;145:12;89:70;14:151;:::o;170:762::-;295:6;303;311;319;372:3;360:9;351:7;347:23;343:33;340:53;;;389:1;386;379:12;340:53;421:9;415:16;440:51;485:5;440:51;:::i;:::-;560:2;545:18;;539:25;510:5;;-1:-1:-1;573:53:302;539:25;573:53;:::i;:::-;697:2;682:18;;676:25;645:7;;-1:-1:-1;710:53:302;676:25;710:53;:::i;:::-;834:2;819:18;;813:25;782:7;;-1:-1:-1;847:53:302;813:25;847:53;:::i;:::-;170:762;;;;-1:-1:-1;170:762:302;;-1:-1:-1;;170:762:302:o;:::-;498:5017:198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063819f7e841161005b578063819f7e841461013d578063db083d7114610172578063db3c316314610199578063e7bd804e146101c057600080fd5b80633ac52df71461008d5780634813d8a6146100de57806354fd4d50146101015780635e4f489a14610116575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f16100ec3660046105cd565b6101e7565b60405190151581526020016100d5565b610109610216565b6040516100d5919061063a565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101647f636f696e626173652e71756573742d656c696769626c6500000000000000000081565b6040519081526020016100d5565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101647f6f7074696d6973742e63616e2d6d696e7400000000000000000000000000000081565b60006101f2826102b9565b80610201575061020182610306565b80610210575061021082610353565b92915050565b60606102417f00000000000000000000000000000000000000000000000000000000000000006103a0565b61026a7f00000000000000000000000000000000000000000000000000000000000000006103a0565b6102937f00000000000000000000000000000000000000000000000000000000000000006103a0565b6040516020016102a59392919061068b565b604051602081830303815290604052905090565b60006102107f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e740000000000000000000000000000006104dd565b60006102107f0000000000000000000000000000000000000000000000000000000000000000837f636f696e626173652e71756573742d656c696769626c650000000000000000006104dd565b60006102107f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e766974650000006104dd565b6060816000036103e357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561040d57806103f781610730565b91506104069050600a83610797565b91506103e7565b60008167ffffffffffffffff811115610428576104286107ab565b6040519080825280601f01601f191660200182016040528015610452576020820181803683370190505b5090505b84156104d5576104676001836107da565b9150610474600a866107f1565b61047f906030610805565b60f81b8183815181106104945761049461081d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506104ce600a86610797565b9450610456565b949350505050565b6040517f29b42cb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905260009182917f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105c3919081019061084c565b5111949350505050565b6000602082840312156105df57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461060357600080fd5b9392505050565b60005b8381101561062557818101518382015260200161060d565b83811115610634576000848401525b50505050565b602081526000825180602084015261065981604085016020870161060a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000845161069d81846020890161060a565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516106d9816001850160208a0161060a565b600192019182015283516106f481600284016020880161060a565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361076157610761610701565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826107a6576107a6610768565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000828210156107ec576107ec610701565b500390565b60008261080057610800610768565b500690565b6000821982111561081857610818610701565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561085e57600080fd5b815167ffffffffffffffff8082111561087657600080fd5b818401915084601f83011261088a57600080fd5b81518181111561089c5761089c6107ab565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156108e2576108e26107ab565b816040528281528760208487010111156108fb57600080fd5b61090c83602083016020880161060a565b97965050505050505056fea164736f6c634300080f000a",
    "sourceMap": "498:5017:198:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1280:48;;;;;;;;190:42:302;178:55;;;160:74;;148:2;133:18;1280:48:198;;;;;;;;3067:267;;;;;;:::i;:::-;;:::i;:::-;;;724:14:302;;717:22;699:41;;687:2;672:18;3067:267:198;559:187:302;942:328:213;;;:::i;:::-;;;;;;;:::i;1461:41:198:-;;;;;853:100;;919:34;853:100;;;;;1607:25:302;;;1595:2;1580:18;853:100:198;1461:177:302;1020:55:198;;;;;1153:43;;;;;663:88;;723:28;663:88;;3067:267;3131:13;3167:46;3204:8;3167:36;:46::i;:::-;:100;;;;3217:50;3258:8;3217:40;:50::i;:::-;3167:160;;;;3283:44;3318:8;3283:34;:44::i;:::-;3156:171;3067:267;-1:-1:-1;;3067:267:198:o;942:328:213:-;982:13;1068:31;1085:13;1068:16;:31::i;:::-;1138;1155:13;1138:16;:31::i;:::-;1208;1225:13;1208:16;:31::i;:::-;1034:219;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1007:256;;942:328;:::o;3588:268:198:-;3675:11;3764:85;3785:18;3805:8;723:28;3764:20;:85::i;4073:283::-;4164:11;4253:96;4274:23;4299:8;919:34;4253:20;:96::i;4580:322::-;4665:11;4760:135;4794:16;4812:8;388:40:200;4760:20:198;:135::i;392:703:55:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:55;;;;;;;;;;;;;;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:55;;-1:-1:-1;837:2:55;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:55;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:55;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;1036:11:55;1045:2;1036:11;;:::i;:::-;;;908:150;;;1081:6;392:703;-1:-1:-1;;;;392:703:55:o;5306:207:198:-;5439:56;;;;;:32;4609:15:302;;;5439:56:198;;;4591:34:302;4661:15;;;4641:18;;;4634:43;4693:18;;;4686:34;;;5407:11:198;;;;5439:19;:32;;;;4503:18:302;;5439:56:198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:63;:67;;5306:207;-1:-1:-1;;;;5306:207:198:o;245:309:302:-;304:6;357:2;345:9;336:7;332:23;328:32;325:52;;;373:1;370;363:12;325:52;412:9;399:23;462:42;455:5;451:54;444:5;441:65;431:93;;520:1;517;510:12;431:93;543:5;245:309;-1:-1:-1;;;245:309:302:o;751:258::-;823:1;833:113;847:6;844:1;841:13;833:113;;;923:11;;;917:18;904:11;;;897:39;869:2;862:10;833:113;;;964:6;961:1;958:13;955:48;;;999:1;990:6;985:3;981:16;974:27;955:48;;751:258;;;:::o;1014:442::-;1163:2;1152:9;1145:21;1126:4;1195:6;1189:13;1238:6;1233:2;1222:9;1218:18;1211:34;1254:66;1313:6;1308:2;1297:9;1293:18;1288:2;1280:6;1276:15;1254:66;:::i;:::-;1372:2;1360:15;1377:66;1356:88;1341:104;;;;1447:2;1337:113;;1014:442;-1:-1:-1;;1014:442:302:o;1902:960::-;2331:3;2369:6;2363:13;2385:53;2431:6;2426:3;2419:4;2411:6;2407:17;2385:53;:::i;:::-;2469:6;2464:3;2460:16;2447:29;;2495:3;2521:2;2514:5;2507:17;2555:6;2549:13;2571:65;2627:8;2623:1;2616:5;2612:13;2605:4;2597:6;2593:17;2571:65;:::i;:::-;2699:1;2655:20;;2691:10;;;2684:22;2731:13;;2753:62;2731:13;2802:1;2794:10;;2787:4;2775:17;;2753:62;:::i;:::-;2835:17;2854:1;2831:25;;1902:960;-1:-1:-1;;;;;1902:960:302:o;2867:184::-;2919:77;2916:1;2909:88;3016:4;3013:1;3006:15;3040:4;3037:1;3030:15;3056:195;3095:3;3126:66;3119:5;3116:77;3113:103;;3196:18;;:::i;:::-;-1:-1:-1;3243:1:302;3232:13;;3056:195::o;3256:184::-;3308:77;3305:1;3298:88;3405:4;3402:1;3395:15;3429:4;3426:1;3419:15;3445:120;3485:1;3511;3501:35;;3516:18;;:::i;:::-;-1:-1:-1;3550:9:302;;3445:120::o;3570:184::-;3622:77;3619:1;3612:88;3719:4;3716:1;3709:15;3743:4;3740:1;3733:15;3759:125;3799:4;3827:1;3824;3821:8;3818:34;;;3832:18;;:::i;:::-;-1:-1:-1;3869:9:302;;3759:125::o;3889:112::-;3921:1;3947;3937:35;;3952:18;;:::i;:::-;-1:-1:-1;3986:9:302;;3889:112::o;4006:128::-;4046:3;4077:1;4073:6;4070:1;4067:13;4064:39;;;4083:18;;:::i;:::-;-1:-1:-1;4119:9:302;;4006:128::o;4139:184::-;4191:77;4188:1;4181:88;4288:4;4285:1;4278:15;4312:4;4309:1;4302:15;4731:942;4810:6;4863:2;4851:9;4842:7;4838:23;4834:32;4831:52;;;4879:1;4876;4869:12;4831:52;4912:9;4906:16;4941:18;4982:2;4974:6;4971:14;4968:34;;;4998:1;4995;4988:12;4968:34;5036:6;5025:9;5021:22;5011:32;;5081:7;5074:4;5070:2;5066:13;5062:27;5052:55;;5103:1;5100;5093:12;5052:55;5132:2;5126:9;5154:2;5150;5147:10;5144:36;;;5160:18;;:::i;:::-;5294:2;5288:9;5356:4;5348:13;;5199:66;5344:22;;;5368:2;5340:31;5336:40;5324:53;;;5392:18;;;5412:22;;;5389:46;5386:72;;;5438:18;;:::i;:::-;5478:10;5474:2;5467:22;5513:2;5505:6;5498:18;5553:7;5548:2;5543;5539;5535:11;5531:20;5528:33;5525:53;;;5574:1;5571;5564:12;5525:53;5587:55;5639:2;5634;5626:6;5622:15;5617:2;5613;5609:11;5587:55;:::i;:::-;5661:6;4731:942;-1:-1:-1;;;;;;;4731:942:302:o",
    "linkReferences": {},
    "immutableReferences": {
      "79842": [
        {
          "start": 375,
          "length": 32
        },
        {
          "start": 1334,
          "length": 32
        }
      ],
      "79845": [
        {
          "start": 414,
          "length": 32
        },
        {
          "start": 704,
          "length": 32
        }
      ],
      "79848": [
        {
          "start": 146,
          "length": 32
        },
        {
          "start": 781,
          "length": 32
        }
      ],
      "79851": [
        {
          "start": 283,
          "length": 32
        },
        {
          "start": 858,
          "length": 32
        }
      ],
      "82893": [
        {
          "start": 541,
          "length": 32
        }
      ],
      "82896": [
        {
          "start": 582,
          "length": 32
        }
      ],
      "82899": [
        {
          "start": 623,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ALLOWLIST_ATTESTOR()": "db3c3163",
    "ATTESTATION_STATION()": "db083d71",
    "COINBASE_QUEST_ATTESTOR()": "3ac52df7",
    "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": "819f7e84",
    "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": "e7bd804e",
    "OPTIMIST_INVITER()": "5e4f489a",
    "isAllowedToMint(address)": "4813d8a6",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAttestor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coinbaseQuestAttestor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optimistInviter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALLOWLIST_ATTESTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COINBASE_QUEST_ATTESTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMIST_CAN_MINT_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMIST_INVITER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"isAllowedToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:semver\":\"1.0.2\",\"params\":{\"_allowlistAttestor\":\"Address of the allowlist attestor.\",\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_coinbaseQuestAttestor\":\"Address of the Coinbase Quest attestor.\",\"_optimistInviter\":\"Address of the OptimistInviter contract.\"}},\"isAllowedToMint(address)\":{\"params\":{\"_claimer\":\"Address to check.\"},\"returns\":{\"allowed_\":\"Whether or not the address is allowed to mint yet.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"OptimistAllowlist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ALLOWLIST_ATTESTOR()\":{\"notice\":\"Attestor that issues 'optimist.can-mint' attestations.\"},\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"COINBASE_QUEST_ATTESTOR()\":{\"notice\":\"Attestor that issues 'coinbase.quest-eligible' attestations.\"},\"COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()\":{\"notice\":\"Attestation key used by Coinbase to issue attestations for Quest participants.\"},\"OPTIMIST_CAN_MINT_ATTESTATION_KEY()\":{\"notice\":\"Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.\"},\"OPTIMIST_INVITER()\":{\"notice\":\"Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.\"},\"isAllowedToMint(address)\":{\"notice\":\"Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"Source of truth for whether an address is able to mint an Optimist NFT.         isAllowedToMint function checks various signals to return boolean value         for whether an address is eligible or not.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/op-nft/OptimistAllowlist.sol\":\"OptimistAllowlist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"src/periphery/op-nft/AttestationStation.sol\":{\"keccak256\":\"0xab54f28712653e8926b23c501975aee5d3368dbf436a14da6ddb9dbc792de2ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a6c5ad2becb79bc6bf3afaaca89dfda6d8f096d55184c0adce20efb3ff19d33\",\"dweb:/ipfs/QmP3qyEYnB195og1FdvW4su4KoBZZQ7UzC8V7CQMz7Ear9\"]},\"src/periphery/op-nft/OptimistAllowlist.sol\":{\"keccak256\":\"0x21c1973eaa45001faae000af13badb7620f6062432c26f792aaa2c75ceb5ece7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46a8dc4f90b0b2701e223dd8e0357846230b7cc12cd27c9d05273cdfe62740ad\",\"dweb:/ipfs/QmP78hkkrojRMPu989LnV266C51wbf4RX1Lyq7LYHSZVVR\"]},\"src/periphery/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268\",\"dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2\"]},\"src/universal/Semver.sol\":{\"keccak256\":\"0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5909c0b049b03a2bc24816ecf15b0aaf18c04a963174e1eba7624321bef330d\",\"dweb:/ipfs/QmeqdutwZWHqQMXauNR6WY8PrUpfsTiWTQyanbnGM9QqzT\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "_attestationStation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_allowlistAttestor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_coinbaseQuestAttestor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_optimistInviter",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ALLOWLIST_ATTESTOR",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_STATION",
          "outputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COINBASE_QUEST_ATTESTOR",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPTIMIST_INVITER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isAllowedToMint",
          "outputs": [
            {
              "internalType": "bool",
              "name": "allowed_",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "constructor": {
            "custom:semver": "1.0.2",
            "params": {
              "_allowlistAttestor": "Address of the allowlist attestor.",
              "_attestationStation": "Address of the AttestationStation contract.",
              "_coinbaseQuestAttestor": "Address of the Coinbase Quest attestor.",
              "_optimistInviter": "Address of the OptimistInviter contract."
            }
          },
          "isAllowedToMint(address)": {
            "params": {
              "_claimer": "Address to check."
            },
            "returns": {
              "allowed_": "Whether or not the address is allowed to mint yet."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ALLOWLIST_ATTESTOR()": {
            "notice": "Attestor that issues 'optimist.can-mint' attestations."
          },
          "ATTESTATION_STATION()": {
            "notice": "Address of the AttestationStation contract."
          },
          "COINBASE_QUEST_ATTESTOR()": {
            "notice": "Attestor that issues 'coinbase.quest-eligible' attestations."
          },
          "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": {
            "notice": "Attestation key used by Coinbase to issue attestations for Quest participants."
          },
          "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": {
            "notice": "Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist."
          },
          "OPTIMIST_INVITER()": {
            "notice": "Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations."
          },
          "isAllowedToMint(address)": {
            "notice": "Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/periphery/op-nft/OptimistAllowlist.sol": "OptimistAllowlist"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/AttestationStation.sol": {
        "keccak256": "0xab54f28712653e8926b23c501975aee5d3368dbf436a14da6ddb9dbc792de2ef",
        "urls": [
          "bzz-raw://8a6c5ad2becb79bc6bf3afaaca89dfda6d8f096d55184c0adce20efb3ff19d33",
          "dweb:/ipfs/QmP3qyEYnB195og1FdvW4su4KoBZZQ7UzC8V7CQMz7Ear9"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/OptimistAllowlist.sol": {
        "keccak256": "0x21c1973eaa45001faae000af13badb7620f6062432c26f792aaa2c75ceb5ece7",
        "urls": [
          "bzz-raw://46a8dc4f90b0b2701e223dd8e0357846230b7cc12cd27c9d05273cdfe62740ad",
          "dweb:/ipfs/QmP78hkkrojRMPu989LnV266C51wbf4RX1Lyq7LYHSZVVR"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c",
        "urls": [
          "bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268",
          "dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2"
        ],
        "license": "MIT"
      },
      "src/universal/Semver.sol": {
        "keccak256": "0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60",
        "urls": [
          "bzz-raw://d5909c0b049b03a2bc24816ecf15b0aaf18c04a963174e1eba7624321bef330d",
          "dweb:/ipfs/QmeqdutwZWHqQMXauNR6WY8PrUpfsTiWTQyanbnGM9QqzT"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "ALLOWLIST_ATTESTOR()": {
        "notice": "Attestor that issues 'optimist.can-mint' attestations."
      },
      "ATTESTATION_STATION()": {
        "notice": "Address of the AttestationStation contract."
      },
      "COINBASE_QUEST_ATTESTOR()": {
        "notice": "Attestor that issues 'coinbase.quest-eligible' attestations."
      },
      "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": {
        "notice": "Attestation key used by Coinbase to issue attestations for Quest participants."
      },
      "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": {
        "notice": "Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist."
      },
      "OPTIMIST_INVITER()": {
        "notice": "Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations."
      },
      "isAllowedToMint(address)": {
        "notice": "Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "Source of truth for whether an address is able to mint an Optimist NFT.         isAllowedToMint function checks various signals to return boolean value         for whether an address is eligible or not."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_allowlistAttestor": "Address of the allowlist attestor.",
          "_attestationStation": "Address of the AttestationStation contract.",
          "_coinbaseQuestAttestor": "Address of the Coinbase Quest attestor.",
          "_optimistInviter": "Address of the OptimistInviter contract."
        }
      },
      "isAllowedToMint(address)": {
        "params": {
          "_claimer": "Address to check."
        },
        "returns": {
          "allowed_": "Whether or not the address is allowed to mint yet."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "OptimistAllowlist"
  },
  "ast": {
    "absolutePath": "src/periphery/op-nft/OptimistAllowlist.sol",
    "id": 79988,
    "exportedSymbols": {
      "AttestationStation": [
        79552
      ],
      "OptimistAllowlist": [
        79987
      ],
      "OptimistConstants": [
        80337
      ],
      "Semver": [
        82951
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:5484:198",
    "nodes": [
      {
        "id": 79815,
        "nodeType": "PragmaDirective",
        "src": "32:23:198",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 79817,
        "nodeType": "ImportDirective",
        "src": "57:52:198",
        "nodes": [],
        "absolutePath": "src/universal/Semver.sol",
        "file": "../../universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79988,
        "sourceUnit": 82952,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79816,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 82951,
              "src": "66:6:198",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79819,
        "nodeType": "ImportDirective",
        "src": "110:62:198",
        "nodes": [],
        "absolutePath": "src/periphery/op-nft/AttestationStation.sol",
        "file": "./AttestationStation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79988,
        "sourceUnit": 79553,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79818,
              "name": "AttestationStation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 79552,
              "src": "119:18:198",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79821,
        "nodeType": "ImportDirective",
        "src": "173:70:198",
        "nodes": [],
        "absolutePath": "src/periphery/op-nft/libraries/OptimistConstants.sol",
        "file": "./libraries/OptimistConstants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79988,
        "sourceUnit": 80338,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79820,
              "name": "OptimistConstants",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 80337,
              "src": "182:17:198",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79987,
        "nodeType": "ContractDefinition",
        "src": "498:5017:198",
        "nodes": [
          {
            "id": 79831,
            "nodeType": "VariableDeclaration",
            "src": "663:88:198",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 79825,
              "nodeType": "StructuredDocumentation",
              "src": "541:117:198",
              "text": "@notice Attestation key used by the AllowlistAttestor to manually add addresses to the\n         allowlist."
            },
            "functionSelector": "e7bd804e",
            "mutability": "constant",
            "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
            "nameLocation": "687:33:198",
            "scope": 79987,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 79826,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "663:7:198",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "6f7074696d6973742e63616e2d6d696e74",
                  "id": 79829,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "731:19:198",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_052936ee16d89f9e65a9b7bbd8d9b2bc86423aed8540d6da93edb9c52fb226e4",
                    "typeString": "literal_string \"optimist.can-mint\""
                  },
                  "value": "optimist.can-mint"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_052936ee16d89f9e65a9b7bbd8d9b2bc86423aed8540d6da93edb9c52fb226e4",
                    "typeString": "literal_string \"optimist.can-mint\""
                  }
                ],
                "id": 79828,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "723:7:198",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 79827,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "723:7:198",
                  "typeDescriptions": {}
                }
              },
              "id": 79830,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "723:28:198",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79838,
            "nodeType": "VariableDeclaration",
            "src": "853:100:198",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 79832,
              "nodeType": "StructuredDocumentation",
              "src": "758:90:198",
              "text": "@notice Attestation key used by Coinbase to issue attestations for Quest participants."
            },
            "functionSelector": "819f7e84",
            "mutability": "constant",
            "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
            "nameLocation": "877:39:198",
            "scope": 79987,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 79833,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "853:7:198",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "636f696e626173652e71756573742d656c696769626c65",
                  "id": 79836,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "927:25:198",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_061d62794d2ee045bbdaae9451ac28b2b9e4531061a0cbeb1046dbda1ca3528a",
                    "typeString": "literal_string \"coinbase.quest-eligible\""
                  },
                  "value": "coinbase.quest-eligible"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_061d62794d2ee045bbdaae9451ac28b2b9e4531061a0cbeb1046dbda1ca3528a",
                    "typeString": "literal_string \"coinbase.quest-eligible\""
                  }
                ],
                "id": 79835,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "919:7:198",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 79834,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "919:7:198",
                  "typeDescriptions": {}
                }
              },
              "id": 79837,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "919:34:198",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79842,
            "nodeType": "VariableDeclaration",
            "src": "1020:55:198",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79839,
              "nodeType": "StructuredDocumentation",
              "src": "960:55:198",
              "text": "@notice Address of the AttestationStation contract."
            },
            "functionSelector": "db083d71",
            "mutability": "immutable",
            "name": "ATTESTATION_STATION",
            "nameLocation": "1056:19:198",
            "scope": 79987,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AttestationStation_$79552",
              "typeString": "contract AttestationStation"
            },
            "typeName": {
              "id": 79841,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 79840,
                "name": "AttestationStation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 79552,
                "src": "1020:18:198"
              },
              "referencedDeclaration": 79552,
              "src": "1020:18:198",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AttestationStation_$79552",
                "typeString": "contract AttestationStation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79845,
            "nodeType": "VariableDeclaration",
            "src": "1153:43:198",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79843,
              "nodeType": "StructuredDocumentation",
              "src": "1082:66:198",
              "text": "@notice Attestor that issues 'optimist.can-mint' attestations."
            },
            "functionSelector": "db3c3163",
            "mutability": "immutable",
            "name": "ALLOWLIST_ATTESTOR",
            "nameLocation": "1178:18:198",
            "scope": 79987,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 79844,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1153:7:198",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79848,
            "nodeType": "VariableDeclaration",
            "src": "1280:48:198",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79846,
              "nodeType": "StructuredDocumentation",
              "src": "1203:72:198",
              "text": "@notice Attestor that issues 'coinbase.quest-eligible' attestations."
            },
            "functionSelector": "3ac52df7",
            "mutability": "immutable",
            "name": "COINBASE_QUEST_ATTESTOR",
            "nameLocation": "1305:23:198",
            "scope": 79987,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 79847,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1280:7:198",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79851,
            "nodeType": "VariableDeclaration",
            "src": "1461:41:198",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79849,
              "nodeType": "StructuredDocumentation",
              "src": "1335:121:198",
              "text": "@notice Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'\n         attestations."
            },
            "functionSelector": "5e4f489a",
            "mutability": "immutable",
            "name": "OPTIMIST_INVITER",
            "nameLocation": "1486:16:198",
            "scope": 79987,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 79850,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1461:7:198",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79886,
            "nodeType": "FunctionDefinition",
            "src": "1850:414:198",
            "nodes": [],
            "body": {
              "id": 79885,
              "nodeType": "Block",
              "src": "2054:210:198",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79869,
                      "name": "ATTESTATION_STATION",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79842,
                      "src": "2064:19:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$79552",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79870,
                      "name": "_attestationStation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79855,
                      "src": "2086:19:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$79552",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "src": "2064:41:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$79552",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "id": 79872,
                  "nodeType": "ExpressionStatement",
                  "src": "2064:41:198"
                },
                {
                  "expression": {
                    "id": 79875,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79873,
                      "name": "ALLOWLIST_ATTESTOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79845,
                      "src": "2115:18:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79874,
                      "name": "_allowlistAttestor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79857,
                      "src": "2136:18:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2115:39:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 79876,
                  "nodeType": "ExpressionStatement",
                  "src": "2115:39:198"
                },
                {
                  "expression": {
                    "id": 79879,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79877,
                      "name": "COINBASE_QUEST_ATTESTOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79848,
                      "src": "2164:23:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79878,
                      "name": "_coinbaseQuestAttestor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79859,
                      "src": "2190:22:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2164:48:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 79880,
                  "nodeType": "ExpressionStatement",
                  "src": "2164:48:198"
                },
                {
                  "expression": {
                    "id": 79883,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79881,
                      "name": "OPTIMIST_INVITER",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79851,
                      "src": "2222:16:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79882,
                      "name": "_optimistInviter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79861,
                      "src": "2241:16:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2222:35:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 79884,
                  "nodeType": "ExpressionStatement",
                  "src": "2222:35:198"
                }
              ]
            },
            "documentation": {
              "id": 79852,
              "nodeType": "StructuredDocumentation",
              "src": "1509:336:198",
              "text": "@custom:semver 1.0.2\n @param _attestationStation    Address of the AttestationStation contract.\n @param _allowlistAttestor     Address of the allowlist attestor.\n @param _coinbaseQuestAttestor Address of the Coinbase Quest attestor.\n @param _optimistInviter       Address of the OptimistInviter contract."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "31",
                    "id": 79864,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2041:1:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "30",
                    "id": 79865,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2044:1:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "hexValue": "32",
                    "id": 79866,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2047:1:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 79867,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 79863,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 82951,
                  "src": "2034:6:198"
                },
                "nodeType": "ModifierInvocation",
                "src": "2034:15:198"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 79862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79855,
                  "mutability": "mutable",
                  "name": "_attestationStation",
                  "nameLocation": "1890:19:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79886,
                  "src": "1871:38:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AttestationStation_$79552",
                    "typeString": "contract AttestationStation"
                  },
                  "typeName": {
                    "id": 79854,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79853,
                      "name": "AttestationStation",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 79552,
                      "src": "1871:18:198"
                    },
                    "referencedDeclaration": 79552,
                    "src": "1871:18:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$79552",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79857,
                  "mutability": "mutable",
                  "name": "_allowlistAttestor",
                  "nameLocation": "1927:18:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79886,
                  "src": "1919:26:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79856,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1919:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79859,
                  "mutability": "mutable",
                  "name": "_coinbaseQuestAttestor",
                  "nameLocation": "1963:22:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79886,
                  "src": "1955:30:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79858,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1955:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79861,
                  "mutability": "mutable",
                  "name": "_optimistInviter",
                  "nameLocation": "2003:16:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79886,
                  "src": "1995:24:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79860,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1995:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1861:164:198"
            },
            "returnParameters": {
              "id": 79868,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2054:0:198"
            },
            "scope": 79987,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79909,
            "nodeType": "FunctionDefinition",
            "src": "3067:267:198",
            "nodes": [],
            "body": {
              "id": 79908,
              "nodeType": "Block",
              "src": "3146:188:198",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79906,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79894,
                      "name": "allowed_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79892,
                      "src": "3156:8:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 79905,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 79901,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 79896,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79889,
                              "src": "3204:8:198",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 79895,
                            "name": "_hasAttestationFromAllowlistAttestor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79926,
                            "src": "3167:36:198",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 79897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3167:46:198",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 79899,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79889,
                              "src": "3258:8:198",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 79898,
                            "name": "_hasAttestationFromCoinbaseQuestAttestor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79943,
                            "src": "3217:40:198",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 79900,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3217:50:198",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3167:100:198",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 79903,
                            "name": "_claimer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79889,
                            "src": "3318:8:198",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 79902,
                          "name": "_hasAttestationFromOptimistInviter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79961,
                          "src": "3283:34:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 79904,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3283:44:198",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "3167:160:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3156:171:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79907,
                  "nodeType": "ExpressionStatement",
                  "src": "3156:171:198"
                }
              ]
            },
            "documentation": {
              "id": 79887,
              "nodeType": "StructuredDocumentation",
              "src": "2270:792:198",
              "text": "@notice Checks whether a given address is allowed to mint the Optimist NFT yet. Since the\n         Optimist NFT will also be used as part of the Citizens House, mints are currently\n         restricted. Eventually anyone will be able to mint.\n         Currently, address is allowed to mint if it satisfies any of the following:\n          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.\n          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor\n          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter\n             contract.\n @param _claimer Address to check.\n @return allowed_ Whether or not the address is allowed to mint yet."
            },
            "functionSelector": "4813d8a6",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isAllowedToMint",
            "nameLocation": "3076:15:198",
            "parameters": {
              "id": 79890,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79889,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "3100:8:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79909,
                  "src": "3092:16:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79888,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3092:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3091:18:198"
            },
            "returnParameters": {
              "id": 79893,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79892,
                  "mutability": "mutable",
                  "name": "allowed_",
                  "nameLocation": "3136:8:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79909,
                  "src": "3131:13:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79891,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3131:4:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3130:15:198"
            },
            "scope": 79987,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79926,
            "nodeType": "FunctionDefinition",
            "src": "3588:268:198",
            "nodes": [],
            "body": {
              "id": 79925,
              "nodeType": "Block",
              "src": "3688:168:198",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79923,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79917,
                      "name": "valid_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79915,
                      "src": "3755:6:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 79919,
                          "name": "ALLOWLIST_ATTESTOR",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79845,
                          "src": "3785:18:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 79920,
                          "name": "_claimer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79912,
                          "src": "3805:8:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 79921,
                          "name": "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79831,
                          "src": "3815:33:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 79918,
                        "name": "_hasValidAttestation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79986,
                        "src": "3764:20:198",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bool_$",
                          "typeString": "function (address,address,bytes32) view returns (bool)"
                        }
                      },
                      "id": 79922,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3764:85:198",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3755:94:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79924,
                  "nodeType": "ExpressionStatement",
                  "src": "3755:94:198"
                }
              ]
            },
            "documentation": {
              "id": 79910,
              "nodeType": "StructuredDocumentation",
              "src": "3340:243:198",
              "text": "@notice Checks whether an address has a valid 'optimist.can-mint' attestation from the\n         allowlist attestor.\n @param _claimer Address to check.\n @return valid_ Whether or not the address has a valid attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasAttestationFromAllowlistAttestor",
            "nameLocation": "3597:36:198",
            "parameters": {
              "id": 79913,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79912,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "3642:8:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79926,
                  "src": "3634:16:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79911,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3634:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3633:18:198"
            },
            "returnParameters": {
              "id": 79916,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79915,
                  "mutability": "mutable",
                  "name": "valid_",
                  "nameLocation": "3680:6:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79926,
                  "src": "3675:11:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79914,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3675:4:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3674:13:198"
            },
            "scope": 79987,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 79943,
            "nodeType": "FunctionDefinition",
            "src": "4073:283:198",
            "nodes": [],
            "body": {
              "id": 79942,
              "nodeType": "Block",
              "src": "4177:179:198",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79940,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79934,
                      "name": "valid_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79932,
                      "src": "4244:6:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 79936,
                          "name": "COINBASE_QUEST_ATTESTOR",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79848,
                          "src": "4274:23:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 79937,
                          "name": "_claimer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79929,
                          "src": "4299:8:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 79938,
                          "name": "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79838,
                          "src": "4309:39:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 79935,
                        "name": "_hasValidAttestation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79986,
                        "src": "4253:20:198",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bool_$",
                          "typeString": "function (address,address,bytes32) view returns (bool)"
                        }
                      },
                      "id": 79939,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4253:96:198",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4244:105:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79941,
                  "nodeType": "ExpressionStatement",
                  "src": "4244:105:198"
                }
              ]
            },
            "documentation": {
              "id": 79927,
              "nodeType": "StructuredDocumentation",
              "src": "3862:206:198",
              "text": "@notice Checks whether an address has a valid attestation from the Coinbase attestor.\n @param _claimer Address to check.\n @return valid_ Whether or not the address has a valid attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasAttestationFromCoinbaseQuestAttestor",
            "nameLocation": "4082:40:198",
            "parameters": {
              "id": 79930,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79929,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "4131:8:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79943,
                  "src": "4123:16:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79928,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4123:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4122:18:198"
            },
            "returnParameters": {
              "id": 79933,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79932,
                  "mutability": "mutable",
                  "name": "valid_",
                  "nameLocation": "4169:6:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79943,
                  "src": "4164:11:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79931,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4164:4:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4163:13:198"
            },
            "scope": 79987,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 79961,
            "nodeType": "FunctionDefinition",
            "src": "4580:322:198",
            "nodes": [],
            "body": {
              "id": 79960,
              "nodeType": "Block",
              "src": "4678:224:198",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79951,
                      "name": "valid_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79949,
                      "src": "4751:6:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 79953,
                          "name": "OPTIMIST_INVITER",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79851,
                          "src": "4794:16:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 79954,
                          "name": "_claimer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79946,
                          "src": "4812:8:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "expression": {
                            "id": 79955,
                            "name": "OptimistConstants",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80337,
                            "src": "4822:17:198",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_OptimistConstants_$80337_$",
                              "typeString": "type(library OptimistConstants)"
                            }
                          },
                          "id": 79956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "OPTIMIST_CAN_MINT_FROM_INVITE_ATTESTATION_KEY",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 80336,
                          "src": "4822:63:198",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 79952,
                        "name": "_hasValidAttestation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79986,
                        "src": "4760:20:198",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bool_$",
                          "typeString": "function (address,address,bytes32) view returns (bool)"
                        }
                      },
                      "id": 79957,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4760:135:198",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4751:144:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79959,
                  "nodeType": "ExpressionStatement",
                  "src": "4751:144:198"
                }
              ]
            },
            "documentation": {
              "id": 79944,
              "nodeType": "StructuredDocumentation",
              "src": "4362:213:198",
              "text": "@notice Checks whether an address has a valid attestation from the OptimistInviter contract.\n @param _claimer Address to check.\n @return valid_ Whether or not the address has a valid attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasAttestationFromOptimistInviter",
            "nameLocation": "4589:34:198",
            "parameters": {
              "id": 79947,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79946,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "4632:8:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79961,
                  "src": "4624:16:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79945,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4624:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4623:18:198"
            },
            "returnParameters": {
              "id": 79950,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79949,
                  "mutability": "mutable",
                  "name": "valid_",
                  "nameLocation": "4670:6:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79961,
                  "src": "4665:11:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79948,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4665:4:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4664:13:198"
            },
            "scope": 79987,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 79986,
            "nodeType": "FunctionDefinition",
            "src": "5306:207:198",
            "nodes": [],
            "body": {
              "id": 79985,
              "nodeType": "Block",
              "src": "5420:93:198",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79973,
                      "name": "valid_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79971,
                      "src": "5430:6:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 79982,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 79976,
                              "name": "_creator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79964,
                              "src": "5472:8:198",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 79977,
                              "name": "_about",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79966,
                              "src": "5482:6:198",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 79978,
                              "name": "_key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79968,
                              "src": "5490:4:198",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "id": 79974,
                              "name": "ATTESTATION_STATION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79842,
                              "src": "5439:19:198",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AttestationStation_$79552",
                                "typeString": "contract AttestationStation"
                              }
                            },
                            "id": 79975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "attestations",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 79457,
                            "src": "5439:32:198",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,address,bytes32) view external returns (bytes memory)"
                            }
                          },
                          "id": 79979,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5439:56:198",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 79980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "5439:63:198",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 79981,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5505:1:198",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "5439:67:198",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5430:76:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79984,
                  "nodeType": "ExpressionStatement",
                  "src": "5430:76:198"
                }
              ]
            },
            "documentation": {
              "id": 79962,
              "nodeType": "StructuredDocumentation",
              "src": "4908:393:198",
              "text": "@notice Checks whether an address has a valid truthy attestation.\n         Any attestation val other than bytes32(\"\") is considered truthy.\n @param _creator Address that made the attestation.\n @param _about   Address attestation is about.\n @param _key     Key of the attestation.\n @return valid_ Whether or not the address has a valid truthy attestation."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_hasValidAttestation",
            "nameLocation": "5315:20:198",
            "parameters": {
              "id": 79969,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79964,
                  "mutability": "mutable",
                  "name": "_creator",
                  "nameLocation": "5344:8:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79986,
                  "src": "5336:16:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79963,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5336:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79966,
                  "mutability": "mutable",
                  "name": "_about",
                  "nameLocation": "5362:6:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79986,
                  "src": "5354:14:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5354:7:198",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79968,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "5378:4:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79986,
                  "src": "5370:12:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 79967,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5370:7:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5335:48:198"
            },
            "returnParameters": {
              "id": 79972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79971,
                  "mutability": "mutable",
                  "name": "valid_",
                  "nameLocation": "5412:6:198",
                  "nodeType": "VariableDeclaration",
                  "scope": 79986,
                  "src": "5407:11:198",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79970,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5407:4:198",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5406:13:198"
            },
            "scope": 79987,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 79823,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 82951,
              "src": "528:6:198"
            },
            "id": 79824,
            "nodeType": "InheritanceSpecifier",
            "src": "528:6:198"
          }
        ],
        "canonicalName": "OptimistAllowlist",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 79822,
          "nodeType": "StructuredDocumentation",
          "src": "245:253:198",
          "text": "@title  OptimistAllowlist\n @notice Source of truth for whether an address is able to mint an Optimist NFT.\n         isAllowedToMint function checks various signals to return boolean value\n         for whether an address is eligible or not."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          79987,
          82951
        ],
        "name": "OptimistAllowlist",
        "nameLocation": "507:17:198",
        "scope": 79988,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 198
}