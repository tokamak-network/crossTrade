{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_baseURIAttestor",
          "type": "address"
        },
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        },
        {
          "internalType": "contract OptimistAllowlist",
          "name": "_optimistAllowlist",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATTESTATION_STATION",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_URI_ATTESTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMIST_ALLOWLIST",
      "outputs": [
        {
          "internalType": "contract OptimistAllowlist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "isOnAllowList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokenIdOfAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101406040523480156200001257600080fd5b5060405162002f2c38038062002f2c8339810160408190526200003591620003ee565b60026080819052600060a05260c0526001600160a01b0380841660e052828116610100528116610120526200006b858562000076565b5050505050620005f4565b600054610100900460ff1615808015620000975750600054600160ff909116105b80620000c75750620000b430620001b660201b62000ec41760201c565b158015620000c7575060005460ff166001145b620001305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000154576000805461ff0019166101001790555b620001608383620001c5565b6200016a62000231565b8015620001b1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b03163b151590565b600054610100900460ff16620002215760405162461bcd60e51b815260206004820152602b602482015260008051602062002f0c83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000127565b6200022d82826200028f565b5050565b600054610100900460ff166200028d5760405162461bcd60e51b815260206004820152602b602482015260008051602062002f0c83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000127565b565b600054610100900460ff16620002eb5760405162461bcd60e51b815260206004820152602b602482015260008051602062002f0c83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000127565b6065620002f9838262000528565b506066620001b1828262000528565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200033057600080fd5b81516001600160401b03808211156200034d576200034d62000308565b604051601f8301601f19908116603f0116810190828211818310171562000378576200037862000308565b816040528381526020925086838588010111156200039557600080fd5b600091505b83821015620003b957858201830151818301840152908201906200039a565b83821115620003cb5760008385830101525b9695505050505050565b6001600160a01b0381168114620003eb57600080fd5b50565b600080600080600060a086880312156200040757600080fd5b85516001600160401b03808211156200041f57600080fd5b6200042d89838a016200031e565b965060208801519150808211156200044457600080fd5b5062000453888289016200031e565b94505060408601516200046681620003d5565b60608701519093506200047981620003d5565b60808701519092506200048c81620003d5565b809150509295509295909350565b600181811c90821680620004af57607f821691505b602082108103620004d057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b157600081815260208120601f850160051c81016020861015620004ff5750805b601f850160051c820191505b8181101562000520578281556001016200050b565b505050505050565b81516001600160401b0381111562000544576200054462000308565b6200055c816200055584546200049a565b84620004d6565b602080601f8311600181146200059457600084156200057b5750858301515b600019600386901b1c1916600185901b17855562000520565b600085815260208120601f198616915b82811015620005c557888601518255948401946001909101908401620005a4565b5085821015620005e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516128b362000659600039600081816103930152610d640152600081816103ba0152610baf01526000818161022c0152610b5801526000610990015260006109670152600061093e01526128b36000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80636a627842116100e3578063a22cb4651161008c578063ce5dd1b511610066578063ce5dd1b51461038e578063db083d71146103b5578063e985e9c5146103dc57600080fd5b8063a22cb4651461035a578063b88d4fde14610368578063c87b56dd1461037b57600080fd5b80637c08652f116100bd5780637c08652f146103185780638f328a1f1461033f57806395d89b411461035257600080fd5b80636a627842146102ea5780636c0360eb146102fd57806370a082311461030557600080fd5b806323b872dd116101455780634cd88b761161011f5780634cd88b76146102bc57806354fd4d50146102cf5780636352211e146102d757600080fd5b806323b872dd1461028357806342842e0e1461029657806342966c68146102a957600080fd5b8063095ea7b311610176578063095ea7b31461021257806319f463f21461022757806321d3d5cf1461024e57600080fd5b806301ffc9a71461019d57806306fdde03146101c5578063081812fc146101da575b600080fd5b6101b06101ab366004611f6c565b610425565b60405190151581526020015b60405180910390f35b6101cd61050a565b6040516101bc9190611fff565b6101ed6101e8366004612012565b61059c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b610225610220366004612054565b6105d0565b005b6101ed7f000000000000000000000000000000000000000000000000000000000000000081565b6102757f6f7074696d6973742e626173652d75726900000000000000000000000000000081565b6040519081526020016101bc565b61022561029136600461207e565b610637565b6102256102a436600461207e565b6106de565b6102256102b7366004612012565b6106f9565b6102256102ca3660046121dc565b61079a565b6101cd610937565b6101ed6102e5366004612012565b6109da565b6102256102f8366004612240565b610a66565b6101cd610b1b565b610275610313366004612240565b610c4e565b610275610326366004612240565b73ffffffffffffffffffffffffffffffffffffffff1690565b6101b061034d366004612240565b610d1c565b6101cd610dd1565b610225610220366004612269565b6102256103763660046122a0565b610de0565b6101cd610389366004612012565b610e88565b6101ed7f000000000000000000000000000000000000000000000000000000000000000081565b6101ed7f000000000000000000000000000000000000000000000000000000000000000081565b6101b06103ea36600461231c565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806104b857507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061050457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060606580546105199061234f565b80601f01602080910402602001604051908101604052809291908181526020018280546105459061234f565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a782610ee0565b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f7074696d6973743a20736f756c20626f756e6420746f6b656e00000000000060448201526064015b60405180910390fd5b610642335b82610f6b565b6106ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161062e565b6106d983838361102b565b505050565b6106d983838360405180602001604052806000815250610de0565b6107023361063c565b61078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161062e565b6107978161129d565b50565b600054610100900460ff16158080156107ba5750600054600160ff909116105b806107d45750303b1580156107d4575060005460ff166001145b610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161062e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156108be57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6108c88383611377565b6108d0611418565b80156106d957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60606109627f00000000000000000000000000000000000000000000000000000000000000006114b1565b61098b7f00000000000000000000000000000000000000000000000000000000000000006114b1565b6109b47f00000000000000000000000000000000000000000000000000000000000000006114b1565b6040516020016109c6939291906123a2565b604051602081830303815290604052905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610504576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161062e565b610a6f81610d1c565b610afb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f7074696d6973743a2061646472657373206973206e6f74206f6e20616c6c6f60448201527f774c697374000000000000000000000000000000000000000000000000000000606482015260840161062e565b6107978173ffffffffffffffffffffffffffffffffffffffff81166115e6565b6040517f29b42cb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301527f6f7074696d6973742e626173652d75726900000000000000000000000000000060448301526060917f0000000000000000000000000000000000000000000000000000000000000000909116906329b42cb590606401600060405180830381865afa158015610bf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c3e9190810190612418565b6040516020016109c6919061248f565b600073ffffffffffffffffffffffffffffffffffffffff8216610cf3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161062e565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b6040517f4813d8a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634813d8a690602401602060405180830381865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050491906124ab565b6060606680546105199061234f565b610dea3383610f6b565b610e76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161062e565b610e8284848484611600565b50505050565b6060610e92610b1b565b610e9d8360146116a3565b604051602001610eae9291906124c8565b6040516020818303038152906040529050919050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161062e565b600080610f77836109da565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fe5575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff165b8061102357508373ffffffffffffffffffffffffffffffffffffffff1661100b8461059c565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff1661104b826109da565b73ffffffffffffffffffffffffffffffffffffffff16146110ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161062e565b73ffffffffffffffffffffffffffffffffffffffff8216611190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161062e565b61119b8383836118ed565b6111a660008261198a565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906111dc908490612579565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290611217908490612590565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006112a8826109da565b90506112b6816000846118ed565b6112c160008361198a565b73ffffffffffffffffffffffffffffffffffffffff811660009081526068602052604081208054600192906112f7908490612579565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45b5050565b600054610100900460ff1661140e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161062e565b6113738282611a2a565b600054610100900460ff166114af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161062e565b565b6060816000036114f457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561151e5780611508816125a8565b91506115179050600a8361260f565b91506114f8565b60008167ffffffffffffffff811115611539576115396120ba565b6040519080825280601f01601f191660200182016040528015611563576020820181803683370190505b5090505b841561102357611578600183612579565b9150611585600a86612623565b611590906030612590565b60f81b8183815181106115a5576115a5612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506115df600a8661260f565b9450611567565b611373828260405180602001604052806000815250611ada565b61160b84848461102b565b61161784848484611b7d565b610e82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161062e565b606060006116b2836002612666565b6116bd906002612590565b67ffffffffffffffff8111156116d5576116d56120ba565b6040519080825280601f01601f1916602001820160405280156116ff576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061173657611736612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061179957611799612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117d5846002612666565b6117e0906001612590565b90505b600181111561187d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061182157611821612637565b1a60f81b82828151811061183757611837612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611876816126a3565b90506117e3565b5083156118e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161062e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff83161580611924575073ffffffffffffffffffffffffffffffffffffffff8216155b6106d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f7074696d6973743a20736f756c20626f756e6420746f6b656e000000000000604482015260640161062e565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906119e4826109da565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff16611ac1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161062e565b6065611acd8382612726565b5060666106d98282612726565b611ae48383611d70565b611af16000848484611b7d565b6106d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161062e565b600073ffffffffffffffffffffffffffffffffffffffff84163b15611d65576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611bf4903390899088908890600401612840565b6020604051808303816000875af1925050508015611c4d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c4a91810190612889565b60015b611d1a573d808015611c7b576040519150601f19603f3d011682016040523d82523d6000602084013e611c80565b606091505b508051600003611d12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161062e565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611023565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216611ded576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161062e565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611e79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062e565b611e85600083836118ed565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290611ebb908490612590565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461079757600080fd5b600060208284031215611f7e57600080fd5b81356118e681611f3e565b60005b83811015611fa4578181015183820152602001611f8c565b83811115610e825750506000910152565b60008151808452611fcd816020860160208601611f89565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006118e66020830184611fb5565b60006020828403121561202457600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461204f57600080fd5b919050565b6000806040838503121561206757600080fd5b6120708361202b565b946020939093013593505050565b60008060006060848603121561209357600080fd5b61209c8461202b565b92506120aa6020850161202b565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612130576121306120ba565b604052919050565b600067ffffffffffffffff821115612152576121526120ba565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061219161218c84612138565b6120e9565b90508281528383830111156121a557600080fd5b828260208301376000602084830101529392505050565b600082601f8301126121cd57600080fd5b6118e68383356020850161217e565b600080604083850312156121ef57600080fd5b823567ffffffffffffffff8082111561220757600080fd5b612213868387016121bc565b9350602085013591508082111561222957600080fd5b50612236858286016121bc565b9150509250929050565b60006020828403121561225257600080fd5b6118e68261202b565b801515811461079757600080fd5b6000806040838503121561227c57600080fd5b6122858361202b565b915060208301356122958161225b565b809150509250929050565b600080600080608085870312156122b657600080fd5b6122bf8561202b565b93506122cd6020860161202b565b925060408501359150606085013567ffffffffffffffff8111156122f057600080fd5b8501601f8101871361230157600080fd5b6123108782356020840161217e565b91505092959194509250565b6000806040838503121561232f57600080fd5b6123388361202b565b91506123466020840161202b565b90509250929050565b600181811c9082168061236357607f821691505b60208210810361239c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600084516123b4818460208901611f89565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516123f0816001850160208a01611f89565b6001920191820152835161240b816002840160208801611f89565b0160020195945050505050565b60006020828403121561242a57600080fd5b815167ffffffffffffffff81111561244157600080fd5b8201601f8101841361245257600080fd5b805161246061218c82612138565b81815285602083850101111561247557600080fd5b612486826020830160208601611f89565b95945050505050565b600082516124a1818460208701611f89565b9190910192915050565b6000602082840312156124bd57600080fd5b81516118e68161225b565b600083516124da818460208801611f89565b7f2f000000000000000000000000000000000000000000000000000000000000009083019081528351612514816001840160208801611f89565b7f2e6a736f6e00000000000000000000000000000000000000000000000000000060019290910191820152600601949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561258b5761258b61254a565b500390565b600082198211156125a3576125a361254a565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125d9576125d961254a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261261e5761261e6125e0565b500490565b600082612632576126326125e0565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561269e5761269e61254a565b500290565b6000816126b2576126b261254a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b601f8211156106d957600081815260208120601f850160051c810160208610156126ff5750805b601f850160051c820191505b8181101561271e5782815560010161270b565b505050505050565b815167ffffffffffffffff811115612740576127406120ba565b6127548161274e845461234f565b846126d8565b602080601f8311600181146127a757600084156127715750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561271e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156127f4578886015182559484019460019091019084016127d5565b508582101561283057878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261287f6080830184611fb5565b9695505050505050565b60006020828403121561289b57600080fd5b81516118e681611f3e56fea164736f6c634300080f000a496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
    "sourceMap": "573:4689:197:-:0;;;1484:423;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1705:1;732:22:213;;;;1708:1:197;764:22:213;;796;;-1:-1:-1;;;;;1728:36:197;;::::1;;::::0;1774:41;;::::1;;::::0;1825:39;::::1;;::::0;1874:26:::1;1885:5:::0;1892:7;1874:10:::1;:26::i;:::-;1484:423:::0;;;;;573:4689;;2036:162;3111:19:20;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:20;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;;3220:44;3258:4;3220:29;;;;;:44;;:::i;:::-;3219:45;:66;;;;-1:-1:-1;3268:12:20;;;;;:17;3219:66;3157:201;;;;-1:-1:-1;;;3157:201:20;;2394:2:302;3157:201:20;;;2376:21:302;2433:2;2413:18;;;2406:30;2472:34;2452:18;;;2445:62;-1:-1:-1;;;2523:18:302;;;2516:44;2577:19;;3157:201:20;;;;;;;;;3368:12;:16;;-1:-1:-1;;3368:16:20;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;-1:-1:-1;;3428:20:20;;;;;3394:65;2129:29:197::1;2143:5:::0;2150:7;2129:13:::1;:29::i;:::-;2168:23;:21;:23::i;:::-;3483:14:20::0;3479:99;;;3529:5;3513:21;;-1:-1:-1;;3513:21:20;;;3553:14;;-1:-1:-1;2759:36:302;;3553:14:20;;2747:2:302;2732:18;3553:14:20;;;;;;;3479:99;3101:483;2036:162:197;;:::o;1186:320:26:-;-1:-1:-1;;;;;1476:19:26;;:23;;;1186:320::o;1605:149:21:-;4910:13:20;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:20;;3008:2:302;4902:69:20;;;2990:21:302;3047:2;3027:18;;;3020:30;-1:-1:-1;;;;;;;;;;;3066:18:302;;;3059:62;-1:-1:-1;;;3137:18:302;;;3130:41;3188:19;;4902:69:20;2806:407:302;4902:69:20;1708:39:21::1;1732:5:::0;1739:7;1708:23:::1;:39::i;:::-;1605:149:::0;;:::o;483:66:24:-;4910:13:20;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:20;;3008:2:302;4902:69:20;;;2990:21:302;3047:2;3027:18;;;3020:30;-1:-1:-1;;;;;;;;;;;3066:18:302;;;3059:62;-1:-1:-1;;;3137:18:302;;;3130:41;3188:19;;4902:69:20;2806:407:302;4902:69:20;483:66:24:o;1760:160:21:-;4910:13:20;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:20;;3008:2:302;4902:69:20;;;2990:21:302;3047:2;3027:18;;;3020:30;-1:-1:-1;;;;;;;;;;;3066:18:302;;;3059:62;-1:-1:-1;;;3137:18:302;;;3130:41;3188:19;;4902:69:20;2806:407:302;4902:69:20;1873:5:21::1;:13;1881:5:::0;1873;:13:::1;:::i;:::-;-1:-1:-1::0;1896:7:21::1;:17;1906:7:::0;1896;:17:::1;:::i;14:127:302:-:0;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:302;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:302;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:302:o;1036:131::-;-1:-1:-1;;;;;1111:31:302;;1101:42;;1091:70;;1157:1;1154;1147:12;1091:70;1036:131;:::o;1172:1015::-;1353:6;1361;1369;1377;1385;1438:3;1426:9;1417:7;1413:23;1409:33;1406:53;;;1455:1;1452;1445:12;1406:53;1482:16;;-1:-1:-1;;;;;1547:14:302;;;1544:34;;;1574:1;1571;1564:12;1544:34;1597:61;1650:7;1641:6;1630:9;1626:22;1597:61;:::i;:::-;1587:71;;1704:2;1693:9;1689:18;1683:25;1667:41;;1733:2;1723:8;1720:16;1717:36;;;1749:1;1746;1739:12;1717:36;;1772:63;1827:7;1816:8;1805:9;1801:24;1772:63;:::i;:::-;1762:73;;;1878:2;1867:9;1863:18;1857:25;1891:31;1916:5;1891:31;:::i;:::-;1991:2;1976:18;;1970:25;1941:5;;-1:-1:-1;2004:33:302;1970:25;2004:33;:::i;:::-;2108:3;2093:19;;2087:26;2056:7;;-1:-1:-1;2122:33:302;2087:26;2122:33;:::i;:::-;2174:7;2164:17;;;1172:1015;;;;;;;;:::o;3218:380::-;3297:1;3293:12;;;;3340;;;3361:61;;3415:4;3407:6;3403:17;3393:27;;3361:61;3468:2;3460:6;3457:14;3437:18;3434:38;3431:161;;3514:10;3509:3;3505:20;3502:1;3495:31;3549:4;3546:1;3539:15;3577:4;3574:1;3567:15;3431:161;;3218:380;;;:::o;3729:545::-;3831:2;3826:3;3823:11;3820:448;;;3867:1;3892:5;3888:2;3881:17;3937:4;3933:2;3923:19;4007:2;3995:10;3991:19;3988:1;3984:27;3978:4;3974:38;4043:4;4031:10;4028:20;4025:47;;;-1:-1:-1;4066:4:302;4025:47;4121:2;4116:3;4112:12;4109:1;4105:20;4099:4;4095:31;4085:41;;4176:82;4194:2;4187:5;4184:13;4176:82;;;4239:17;;;4220:1;4209:13;4176:82;;;4180:3;;;3729:545;;;:::o;4450:1352::-;4570:10;;-1:-1:-1;;;;;4592:30:302;;4589:56;;;4625:18;;:::i;:::-;4654:97;4744:6;4704:38;4736:4;4730:11;4704:38;:::i;:::-;4698:4;4654:97;:::i;:::-;4806:4;;4870:2;4859:14;;4887:1;4882:663;;;;5589:1;5606:6;5603:89;;;-1:-1:-1;5658:19:302;;;5652:26;5603:89;-1:-1:-1;;4407:1:302;4403:11;;;4399:24;4395:29;4385:40;4431:1;4427:11;;;4382:57;5705:81;;4852:944;;4882:663;3676:1;3669:14;;;3713:4;3700:18;;-1:-1:-1;;4918:20:302;;;5036:236;5050:7;5047:1;5044:14;5036:236;;;5139:19;;;5133:26;5118:42;;5231:27;;;;5199:1;5187:14;;;;5066:19;;5036:236;;;5040:3;5300:6;5291:7;5288:19;5285:201;;;5361:19;;;5355:26;-1:-1:-1;;5444:1:302;5440:14;;;5456:3;5436:24;5432:37;5428:42;5413:58;5398:74;;5285:201;-1:-1:-1;;;;;5532:1:302;5516:14;;;5512:22;5499:36;;-1:-1:-1;4450:1352:302:o;:::-;573:4689:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80636a627842116100e3578063a22cb4651161008c578063ce5dd1b511610066578063ce5dd1b51461038e578063db083d71146103b5578063e985e9c5146103dc57600080fd5b8063a22cb4651461035a578063b88d4fde14610368578063c87b56dd1461037b57600080fd5b80637c08652f116100bd5780637c08652f146103185780638f328a1f1461033f57806395d89b411461035257600080fd5b80636a627842146102ea5780636c0360eb146102fd57806370a082311461030557600080fd5b806323b872dd116101455780634cd88b761161011f5780634cd88b76146102bc57806354fd4d50146102cf5780636352211e146102d757600080fd5b806323b872dd1461028357806342842e0e1461029657806342966c68146102a957600080fd5b8063095ea7b311610176578063095ea7b31461021257806319f463f21461022757806321d3d5cf1461024e57600080fd5b806301ffc9a71461019d57806306fdde03146101c5578063081812fc146101da575b600080fd5b6101b06101ab366004611f6c565b610425565b60405190151581526020015b60405180910390f35b6101cd61050a565b6040516101bc9190611fff565b6101ed6101e8366004612012565b61059c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b610225610220366004612054565b6105d0565b005b6101ed7f000000000000000000000000000000000000000000000000000000000000000081565b6102757f6f7074696d6973742e626173652d75726900000000000000000000000000000081565b6040519081526020016101bc565b61022561029136600461207e565b610637565b6102256102a436600461207e565b6106de565b6102256102b7366004612012565b6106f9565b6102256102ca3660046121dc565b61079a565b6101cd610937565b6101ed6102e5366004612012565b6109da565b6102256102f8366004612240565b610a66565b6101cd610b1b565b610275610313366004612240565b610c4e565b610275610326366004612240565b73ffffffffffffffffffffffffffffffffffffffff1690565b6101b061034d366004612240565b610d1c565b6101cd610dd1565b610225610220366004612269565b6102256103763660046122a0565b610de0565b6101cd610389366004612012565b610e88565b6101ed7f000000000000000000000000000000000000000000000000000000000000000081565b6101ed7f000000000000000000000000000000000000000000000000000000000000000081565b6101b06103ea36600461231c565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806104b857507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061050457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060606580546105199061234f565b80601f01602080910402602001604051908101604052809291908181526020018280546105459061234f565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a782610ee0565b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f7074696d6973743a20736f756c20626f756e6420746f6b656e00000000000060448201526064015b60405180910390fd5b610642335b82610f6b565b6106ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161062e565b6106d983838361102b565b505050565b6106d983838360405180602001604052806000815250610de0565b6107023361063c565b61078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161062e565b6107978161129d565b50565b600054610100900460ff16158080156107ba5750600054600160ff909116105b806107d45750303b1580156107d4575060005460ff166001145b610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161062e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156108be57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6108c88383611377565b6108d0611418565b80156106d957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60606109627f00000000000000000000000000000000000000000000000000000000000000006114b1565b61098b7f00000000000000000000000000000000000000000000000000000000000000006114b1565b6109b47f00000000000000000000000000000000000000000000000000000000000000006114b1565b6040516020016109c6939291906123a2565b604051602081830303815290604052905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610504576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161062e565b610a6f81610d1c565b610afb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f7074696d6973743a2061646472657373206973206e6f74206f6e20616c6c6f60448201527f774c697374000000000000000000000000000000000000000000000000000000606482015260840161062e565b6107978173ffffffffffffffffffffffffffffffffffffffff81166115e6565b6040517f29b42cb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301527f6f7074696d6973742e626173652d75726900000000000000000000000000000060448301526060917f0000000000000000000000000000000000000000000000000000000000000000909116906329b42cb590606401600060405180830381865afa158015610bf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c3e9190810190612418565b6040516020016109c6919061248f565b600073ffffffffffffffffffffffffffffffffffffffff8216610cf3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e65720000000000000000000000000000000000000000000000606482015260840161062e565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b6040517f4813d8a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634813d8a690602401602060405180830381865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050491906124ab565b6060606680546105199061234f565b610dea3383610f6b565b610e76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161062e565b610e8284848484611600565b50505050565b6060610e92610b1b565b610e9d8360146116a3565b604051602001610eae9291906124c8565b6040516020818303038152906040529050919050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e2049440000000000000000604482015260640161062e565b600080610f77836109da565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fe5575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff165b8061102357508373ffffffffffffffffffffffffffffffffffffffff1661100b8461059c565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff1661104b826109da565b73ffffffffffffffffffffffffffffffffffffffff16146110ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161062e565b73ffffffffffffffffffffffffffffffffffffffff8216611190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161062e565b61119b8383836118ed565b6111a660008261198a565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906111dc908490612579565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290611217908490612590565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006112a8826109da565b90506112b6816000846118ed565b6112c160008361198a565b73ffffffffffffffffffffffffffffffffffffffff811660009081526068602052604081208054600192906112f7908490612579565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45b5050565b600054610100900460ff1661140e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161062e565b6113738282611a2a565b600054610100900460ff166114af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161062e565b565b6060816000036114f457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561151e5780611508816125a8565b91506115179050600a8361260f565b91506114f8565b60008167ffffffffffffffff811115611539576115396120ba565b6040519080825280601f01601f191660200182016040528015611563576020820181803683370190505b5090505b841561102357611578600183612579565b9150611585600a86612623565b611590906030612590565b60f81b8183815181106115a5576115a5612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506115df600a8661260f565b9450611567565b611373828260405180602001604052806000815250611ada565b61160b84848461102b565b61161784848484611b7d565b610e82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161062e565b606060006116b2836002612666565b6116bd906002612590565b67ffffffffffffffff8111156116d5576116d56120ba565b6040519080825280601f01601f1916602001820160405280156116ff576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061173657611736612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061179957611799612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006117d5846002612666565b6117e0906001612590565b90505b600181111561187d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061182157611821612637565b1a60f81b82828151811061183757611837612637565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611876816126a3565b90506117e3565b5083156118e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161062e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff83161580611924575073ffffffffffffffffffffffffffffffffffffffff8216155b6106d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f7074696d6973743a20736f756c20626f756e6420746f6b656e000000000000604482015260640161062e565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906119e4826109da565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff16611ac1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161062e565b6065611acd8382612726565b5060666106d98282612726565b611ae48383611d70565b611af16000848484611b7d565b6106d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161062e565b600073ffffffffffffffffffffffffffffffffffffffff84163b15611d65576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611bf4903390899088908890600401612840565b6020604051808303816000875af1925050508015611c4d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c4a91810190612889565b60015b611d1a573d808015611c7b576040519150601f19603f3d011682016040523d82523d6000602084013e611c80565b606091505b508051600003611d12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161062e565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611023565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff8216611ded576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161062e565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611e79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062e565b611e85600083836118ed565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290611ebb908490612590565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461079757600080fd5b600060208284031215611f7e57600080fd5b81356118e681611f3e565b60005b83811015611fa4578181015183820152602001611f8c565b83811115610e825750506000910152565b60008151808452611fcd816020860160208601611f89565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006118e66020830184611fb5565b60006020828403121561202457600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461204f57600080fd5b919050565b6000806040838503121561206757600080fd5b6120708361202b565b946020939093013593505050565b60008060006060848603121561209357600080fd5b61209c8461202b565b92506120aa6020850161202b565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612130576121306120ba565b604052919050565b600067ffffffffffffffff821115612152576121526120ba565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061219161218c84612138565b6120e9565b90508281528383830111156121a557600080fd5b828260208301376000602084830101529392505050565b600082601f8301126121cd57600080fd5b6118e68383356020850161217e565b600080604083850312156121ef57600080fd5b823567ffffffffffffffff8082111561220757600080fd5b612213868387016121bc565b9350602085013591508082111561222957600080fd5b50612236858286016121bc565b9150509250929050565b60006020828403121561225257600080fd5b6118e68261202b565b801515811461079757600080fd5b6000806040838503121561227c57600080fd5b6122858361202b565b915060208301356122958161225b565b809150509250929050565b600080600080608085870312156122b657600080fd5b6122bf8561202b565b93506122cd6020860161202b565b925060408501359150606085013567ffffffffffffffff8111156122f057600080fd5b8501601f8101871361230157600080fd5b6123108782356020840161217e565b91505092959194509250565b6000806040838503121561232f57600080fd5b6123388361202b565b91506123466020840161202b565b90509250929050565b600181811c9082168061236357607f821691505b60208210810361239c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600084516123b4818460208901611f89565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516123f0816001850160208a01611f89565b6001920191820152835161240b816002840160208801611f89565b0160020195945050505050565b60006020828403121561242a57600080fd5b815167ffffffffffffffff81111561244157600080fd5b8201601f8101841361245257600080fd5b805161246061218c82612138565b81815285602083850101111561247557600080fd5b612486826020830160208601611f89565b95945050505050565b600082516124a1818460208701611f89565b9190910192915050565b6000602082840312156124bd57600080fd5b81516118e68161225b565b600083516124da818460208801611f89565b7f2f000000000000000000000000000000000000000000000000000000000000009083019081528351612514816001840160208801611f89565b7f2e6a736f6e00000000000000000000000000000000000000000000000000000060019290910191820152600601949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561258b5761258b61254a565b500390565b600082198211156125a3576125a361254a565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125d9576125d961254a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261261e5761261e6125e0565b500490565b600082612632576126326125e0565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561269e5761269e61254a565b500290565b6000816126b2576126b261254a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b601f8211156106d957600081815260208120601f850160051c810160208610156126ff5750805b601f850160051c820191505b8181101561271e5782815560010161270b565b505050505050565b815167ffffffffffffffff811115612740576127406120ba565b6127548161274e845461234f565b846126d8565b602080601f8311600181146127a757600084156127715750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561271e565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156127f4578886015182559484019460019091019084016127d5565b508582101561283057878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261287f6080830184611fb5565b9695505050505050565b60006020828403121561289b57600080fd5b81516118e681611f3e56fea164736f6c634300080f000a",
    "sourceMap": "573:4689:197:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1987:344:21;;;;;;:::i;:::-;;:::i;:::-;;;611:14:302;;604:22;586:41;;574:2;559:18;1987:344:21;;;;;;;;2931:98;;;:::i;:::-;;;;;;;:::i;4407:167::-;;;;;;:::i;:::-;;:::i;:::-;;;1809:42:302;1797:55;;;1779:74;;1767:2;1752:18;4407:167:21;1633:226:302;4587:109:197;;;;;;:::i;:::-;;:::i;:::-;;845:42;;;;;710:79;;761:28;710:79;;;;;2470:25:302;;;2458:2;2443:18;710:79:197;2324:177:302;5084:327:21;;;;;;:::i;:::-;;:::i;5477:179::-;;;;;;:::i;:::-;;:::i;803:239:24:-;;;;;;:::i;:::-;;:::i;2036:162:197:-;;;;;;:::i;:::-;;:::i;942:328:213:-;;;:::i;2651:218:21:-;;;;;;:::i;:::-;;:::i;2521:194:197:-;;;;;;:::i;:::-;;:::i;2818:258::-;;;:::i;2390:204:21:-;;;;;;:::i;:::-;;:::i;4395:120:197:-;;;;;;:::i;:::-;4484:24;;;4395:120;4019:153;;;;;;:::i;:::-;;:::i;3093:102:21:-;;;:::i;4768:119:197:-;;;;;;:::i;5722:315:21:-;;;;;;:::i;:::-;;:::i;3245:385:197:-;;;;;;:::i;:::-;;:::i;1075:53::-;;;;;954:55;;;;;4860:162:21;;;;;;:::i;:::-;4980:25;;;;4957:4;4980:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4860:162;1987:344;2111:4;2146:51;;;2161:36;2146:51;;:126;;-1:-1:-1;2213:59:21;;;2228:44;2213:59;2146:126;:178;;;-1:-1:-1;1183:36:31;1168:51;;;;2288:36:21;2127:197;1987:344;-1:-1:-1;;1987:344:21:o;2931:98::-;2985:13;3017:5;3010:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2931:98;:::o;4407:167::-;4483:7;4502:23;4517:7;4502:14;:23::i;:::-;-1:-1:-1;4543:24:21;;;;:15;:24;;;;;;;;;4407:167::o;4587:109:197:-;4653:36;;;;;7650:2:302;4653:36:197;;;7632:21:302;7689:2;7669:18;;;7662:30;7728:28;7708:18;;;7701:56;7774:18;;4653:36:197;;;;;;;;5084:327:21;5273:41;929:10:27;5292:12:21;5306:7;5273:18;:41::i;:::-;5265:100;;;;;;;8005:2:302;5265:100:21;;;7987:21:302;8044:2;8024:18;;;8017:30;8083:34;8063:18;;;8056:62;8154:16;8134:18;;;8127:44;8188:19;;5265:100:21;7803:410:302;5265:100:21;5376:28;5386:4;5392:2;5396:7;5376:9;:28::i;:::-;5084:327;;;:::o;5477:179::-;5610:39;5627:4;5633:2;5637:7;5610:39;;;;;;;;;;;;:16;:39::i;803:239:24:-;919:41;929:10:27;938:12:24;850:96:27;919:41:24;911:100;;;;;;;8005:2:302;911:100:24;;;7987:21:302;8044:2;8024:18;;;8017:30;8083:34;8063:18;;;8056:62;8154:16;8134:18;;;8127:44;8188:19;;911:100:24;7803:410:302;911:100:24;1021:14;1027:7;1021:5;:14::i;:::-;803:239;:::o;2036:162:197:-;3111:19:20;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:20;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:20;1476:19:26;:23;;;3219:66:20;;-1:-1:-1;3268:12:20;;;;;:17;3219:66;3157:201;;;;;;;8420:2:302;3157:201:20;;;8402:21:302;8459:2;8439:18;;;8432:30;8498:34;8478:18;;;8471:62;8569:16;8549:18;;;8542:44;8603:19;;3157:201:20;8218:410:302;3157:201:20;3368:12;:16;;;;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;;;;;;;3394:65;2129:29:197::1;2143:5;2150:7;2129:13;:29::i;:::-;2168:23;:21;:23::i;:::-;3483:14:20::0;3479:99;;;3529:5;3513:21;;;;;;3553:14;;-1:-1:-1;8785:36:302;;3553:14:20;;8773:2:302;8758:18;3553:14:20;;;;;;;3101:483;2036:162:197;;:::o;942:328:213:-;982:13;1068:31;1085:13;1068:16;:31::i;:::-;1138;1155:13;1138:16;:31::i;:::-;1208;1225:13;1208:16;:31::i;:::-;1034:219;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1007:256;;942:328;:::o;2651:218:21:-;2723:7;2758:16;;;:7;:16;;;;;;;;;2784:56;;;;;;;9999:2:302;2784:56:21;;;9981:21:302;10038:2;10018:18;;;10011:30;10077:26;10057:18;;;10050:54;10121:18;;2784:56:21;9797:348:302;2521:194:197;2580:25;2594:10;2580:13;:25::i;:::-;2572:75;;;;;;;10352:2:302;2572:75:197;;;10334:21:302;10391:2;10371:18;;;10364:30;10430:34;10410:18;;;10403:62;10501:7;10481:18;;;10474:35;10526:19;;2572:75:197;10150:401:302;2572:75:197;2657:51;2667:10;4484:24;;;2657:9;:51::i;2818:258::-;2949:96;;;;;:32;2982:17;10837:15:302;;2949:96:197;;;10819:34:302;3009:4:197;10869:18:302;;;10862:43;3016:28:197;10921:18:302;;;10914:34;2858:18:197;;2949:19;:32;;;;;;10731:18:302;;2949:96:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2915:144;;;;;;;;:::i;2390:204:21:-;2462:7;2489:19;;;2481:73;;;;;;;12080:2:302;2481:73:21;;;12062:21:302;12119:2;12099:18;;;12092:30;12158:34;12138:18;;;12131:62;12229:11;12209:18;;;12202:39;12258:19;;2481:73:21;11878:405:302;2481:73:21;-1:-1:-1;2571:16:21;;;;;;:9;:16;;;;;;;2390:204::o;4019:153:197:-;4119:46;;;;;:34;1797:55:302;;;4119:46:197;;;1779:74:302;4083:13:197;;4119:18;:34;;;;;;1752:18:302;;4119:46:197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3093:102:21:-;3149:13;3181:7;3174:14;;;;;:::i;5722:315::-;5890:41;929:10:27;5923:7:21;5890:18;:41::i;:::-;5882:100;;;;;;;8005:2:302;5882:100:21;;;7987:21:302;8044:2;8024:18;;;8017:30;8083:34;8063:18;;;8056:62;8154:16;8134:18;;;8127:44;8188:19;;5882:100:21;7803:410:302;5882:100:21;5992:38;6006:4;6012:2;6016:7;6025:4;5992:13;:38::i;:::-;5722:315;;;;:::o;3245:385:197:-;3319:18;3410:9;:7;:9::i;:::-;3541:33;3561:8;3571:2;3541:19;:33::i;:::-;3376:237;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3349:274;;3245:385;;;:::o;1186:320:26:-;1476:19;;;:23;;;1186:320::o;12173:133:21:-;7571:4;7594:16;;;:7;:16;;;;;;:30;:16;12246:53;;;;;;;9999:2:302;12246:53:21;;;9981:21:302;10038:2;10018:18;;;10011:30;10077:26;10057:18;;;10050:54;10121:18;;12246:53:21;9797:348:302;7789:272:21;7882:4;7898:13;7914:34;7940:7;7914:25;:34::i;:::-;7898:50;;7977:5;7966:16;;:7;:16;;;:52;;;-1:-1:-1;4980:25:21;;;;4957:4;4980:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7986:32;7966:87;;;;8046:7;8022:31;;:20;8034:7;8022:11;:20::i;:::-;:31;;;7966:87;7958:96;7789:272;-1:-1:-1;;;;7789:272:21:o;10736:616::-;10901:4;10863:42;;:34;10889:7;10863:25;:34::i;:::-;:42;;;10855:92;;;;;;;13517:2:302;10855:92:21;;;13499:21:302;13556:2;13536:18;;;13529:30;13595:34;13575:18;;;13568:62;13666:7;13646:18;;;13639:35;13691:19;;10855:92:21;13315:401:302;10855:92:21;10965:16;;;10957:65;;;;;;;13923:2:302;10957:65:21;;;13905:21:302;13962:2;13942:18;;;13935:30;14001:34;13981:18;;;13974:62;14072:6;14052:18;;;14045:34;14096:19;;10957:65:21;13721:400:302;10957:65:21;11033:39;11054:4;11060:2;11064:7;11033:20;:39::i;:::-;11134:29;11151:1;11155:7;11134:8;:29::i;:::-;11174:15;;;;;;;:9;:15;;;;;:20;;11193:1;;11174:15;:20;;11193:1;;11174:20;:::i;:::-;;;;-1:-1:-1;;11204:13:21;;;;;;;:9;:13;;;;;:18;;11221:1;;11204:13;:18;;11221:1;;11204:18;:::i;:::-;;;;-1:-1:-1;;11232:16:21;;;;:7;:16;;;;;;:21;;;;;;;;;;;;;;11269:27;;11232:16;;11269:27;;;;;;;5084:327;;;:::o;9995:417::-;10054:13;10070:34;10096:7;10070:25;:34::i;:::-;10054:50;;10115:48;10136:5;10151:1;10155:7;10115:20;:48::i;:::-;10201:29;10218:1;10222:7;10201:8;:29::i;:::-;10241:16;;;;;;;:9;:16;;;;;:21;;10261:1;;10241:16;:21;;10261:1;;10241:21;:::i;:::-;;;;-1:-1:-1;;10279:16:21;;;;:7;:16;;;;;;10272:23;;;;;;10311:36;10287:7;;10279:16;10272:23;10311:36;;;;;10279:16;;10311:36;10358:47;10044:368;9995:417;:::o;1605:149::-;4910:13:20;;;;;;;4902:69;;;;;;;14780:2:302;4902:69:20;;;14762:21:302;14819:2;14799:18;;;14792:30;14858:34;14838:18;;;14831:62;14929:13;14909:18;;;14902:41;14960:19;;4902:69:20;14578:407:302;4902:69:20;1708:39:21::1;1732:5;1739:7;1708:23;:39::i;483:66:24:-:0;4910:13:20;;;;;;;4902:69;;;;;;;14780:2:302;4902:69:20;;;14762:21:302;14819:2;14799:18;;;14792:30;14858:34;14838:18;;;14831:62;14929:13;14909:18;;;14902:41;14960:19;;4902:69:20;14578:407:302;4902:69:20;483:66:24:o;392:703:55:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:55;;;;;;;;;;;;;;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:55;;-1:-1:-1;837:2:55;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:55;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:55;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;1036:11:55;1045:2;1036:11;;:::i;:::-;;;908:150;;8391:108:21;8466:26;8476:2;8480:7;8466:26;;;;;;;;;;;;:9;:26::i;6898:305::-;7048:28;7058:4;7064:2;7068:7;7048:9;:28::i;:::-;7094:47;7117:4;7123:2;7127:7;7136:4;7094:22;:47::i;:::-;7086:110;;;;;;;16012:2:302;7086:110:21;;;15994:21:302;16051:2;16031:18;;;16024:30;16090:34;16070:18;;;16063:62;16161:20;16141:18;;;16134:48;16199:19;;7086:110:21;15810:414:302;1652:441:55;1727:13;1752:19;1784:10;1788:6;1784:1;:10;:::i;:::-;:14;;1797:1;1784:14;:::i;:::-;1774:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1774:25:55;;1752:47;;1809:15;:6;1816:1;1809:9;;;;;;;;:::i;:::-;;;;:15;;;;;;;;;;;1834;:6;1841:1;1834:9;;;;;;;;:::i;:::-;;;;:15;;;;;;;;;;-1:-1:-1;1864:9:55;1876:10;1880:6;1876:1;:10;:::i;:::-;:14;;1889:1;1876:14;:::i;:::-;1864:26;;1859:132;1896:1;1892;:5;1859:132;;;1930:12;1943:5;1951:3;1943:11;1930:25;;;;;;;:::i;:::-;;;;1918:6;1925:1;1918:9;;;;;;;;:::i;:::-;;;;:37;;;;;;;;;;-1:-1:-1;1979:1:55;1969:11;;;;;1899:3;;;:::i;:::-;;;1859:132;;;-1:-1:-1;2008:10:55;;2000:55;;;;;;;16865:2:302;2000:55:55;;;16847:21:302;;;16884:18;;;16877:30;16943:34;16923:18;;;16916:62;16995:18;;2000:55:55;16663:356:302;2000:55:55;2079:6;1652:441;-1:-1:-1;;;1652:441:55:o;5071:189:197:-;5182:19;;;;;:40;;-1:-1:-1;5205:17:197;;;;5182:40;5174:79;;;;;;;7650:2:302;5174:79:197;;;7632:21:302;7689:2;7669:18;;;7662:30;7728:28;7708:18;;;7701:56;7774:18;;5174:79:197;7448:350:302;11464:182:21;11538:24;;;;:15;:24;;;;;:29;;;;;;;;;;;;;:24;;11591:34;11538:24;11591:25;:34::i;:::-;11582:57;;;;;;;;;;;;11464:182;;:::o;1760:160::-;4910:13:20;;;;;;;4902:69;;;;;;;14780:2:302;4902:69:20;;;14762:21:302;14819:2;14799:18;;;14792:30;14858:34;14838:18;;;14831:62;14929:13;14909:18;;;14902:41;14960:19;;4902:69:20;14578:407:302;4902:69:20;1873:5:21::1;:13;1881:5:::0;1873;:13:::1;:::i;:::-;-1:-1:-1::0;1896:7:21::1;:17;1906:7:::0;1896;:17:::1;:::i;8720:309::-:0;8844:18;8850:2;8854:7;8844:5;:18::i;:::-;8893:53;8924:1;8928:2;8932:7;8941:4;8893:22;:53::i;:::-;8872:150;;;;;;;16012:2:302;8872:150:21;;;15994:21:302;16051:2;16031:18;;;16024:30;16090:34;16070:18;;;16063:62;16161:20;16141:18;;;16134:48;16199:19;;8872:150:21;15810:414:302;12858:853:21;13007:4;13027:13;;;1476:19:26;:23;13023:682:21;;13062:82;;;;;:47;;;;;;:82;;929:10:27;;13124:4:21;;13130:7;;13139:4;;13062:82;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13062:82:21;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;13058:595;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13322:6;:13;13339:1;13322:18;13318:321;;13364:60;;;;;16012:2:302;13364:60:21;;;15994:21:302;16051:2;16031:18;;;16024:30;16090:34;16070:18;;;16063:62;16161:20;16141:18;;;16134:48;16199:19;;13364:60:21;15810:414:302;13318:321:21;13591:6;13585:13;13576:6;13572:2;13568:15;13561:38;13058:595;13194:62;;13204:52;13194:62;;-1:-1:-1;13187:69:21;;13023:682;-1:-1:-1;13690:4:21;12858:853;;;;;;:::o;9351:427::-;9430:16;;;9422:61;;;;;;;20380:2:302;9422:61:21;;;20362:21:302;;;20399:18;;;20392:30;20458:34;20438:18;;;20431:62;20510:18;;9422:61:21;20178:356:302;9422:61:21;7571:4;7594:16;;;:7;:16;;;;;;:30;:16;:30;9493:58;;;;;;;20741:2:302;9493:58:21;;;20723:21:302;20780:2;20760:18;;;20753:30;20819;20799:18;;;20792:58;20867:18;;9493:58:21;20539:352:302;9493:58:21;9562:45;9591:1;9595:2;9599:7;9562:20;:45::i;:::-;9618:13;;;;;;;:9;:13;;;;;:18;;9635:1;;9618:13;:18;;9635:1;;9618:18;:::i;:::-;;;;-1:-1:-1;;9646:16:21;;;;:7;:16;;;;;;:21;;;;;;;;;;;;;9683:33;;9646:16;;;9683:33;;9646:16;;9683:33;10044:368;9995:417;:::o;14:177:302:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:258::-;710:1;720:113;734:6;731:1;728:13;720:113;;;810:11;;;804:18;791:11;;;784:39;756:2;749:10;720:113;;;851:6;848:1;845:13;842:48;;;-1:-1:-1;;886:1:302;868:16;;861:27;638:258::o;901:317::-;943:3;981:5;975:12;1008:6;1003:3;996:19;1024:63;1080:6;1073:4;1068:3;1064:14;1057:4;1050:5;1046:16;1024:63;:::i;:::-;1132:2;1120:15;1137:66;1116:88;1107:98;;;;1207:4;1103:109;;901:317;-1:-1:-1;;901:317:302:o;1223:220::-;1372:2;1361:9;1354:21;1335:4;1392:45;1433:2;1422:9;1418:18;1410:6;1392:45;:::i;1448:180::-;1507:6;1560:2;1548:9;1539:7;1535:23;1531:32;1528:52;;;1576:1;1573;1566:12;1528:52;-1:-1:-1;1599:23:302;;1448:180;-1:-1:-1;1448:180:302:o;1864:196::-;1932:20;;1992:42;1981:54;;1971:65;;1961:93;;2050:1;2047;2040:12;1961:93;1864:196;;;:::o;2065:254::-;2133:6;2141;2194:2;2182:9;2173:7;2169:23;2165:32;2162:52;;;2210:1;2207;2200:12;2162:52;2233:29;2252:9;2233:29;:::i;:::-;2223:39;2309:2;2294:18;;;;2281:32;;-1:-1:-1;;;2065:254:302:o;2506:328::-;2583:6;2591;2599;2652:2;2640:9;2631:7;2627:23;2623:32;2620:52;;;2668:1;2665;2658:12;2620:52;2691:29;2710:9;2691:29;:::i;:::-;2681:39;;2739:38;2773:2;2762:9;2758:18;2739:38;:::i;:::-;2729:48;;2824:2;2813:9;2809:18;2796:32;2786:42;;2506:328;;;;;:::o;2839:184::-;2891:77;2888:1;2881:88;2988:4;2985:1;2978:15;3012:4;3009:1;3002:15;3028:334;3099:2;3093:9;3155:2;3145:13;;3160:66;3141:86;3129:99;;3258:18;3243:34;;3279:22;;;3240:62;3237:88;;;3305:18;;:::i;:::-;3341:2;3334:22;3028:334;;-1:-1:-1;3028:334:302:o;3367:246::-;3416:4;3449:18;3441:6;3438:30;3435:56;;;3471:18;;:::i;:::-;-1:-1:-1;3528:2:302;3516:15;3533:66;3512:88;3602:4;3508:99;;3367:246::o;3618:338::-;3683:5;3712:53;3728:36;3757:6;3728:36;:::i;:::-;3712:53;:::i;:::-;3703:62;;3788:6;3781:5;3774:21;3828:3;3819:6;3814:3;3810:16;3807:25;3804:45;;;3845:1;3842;3835:12;3804:45;3894:6;3889:3;3882:4;3875:5;3871:16;3858:43;3948:1;3941:4;3932:6;3925:5;3921:18;3917:29;3910:40;3618:338;;;;;:::o;3961:222::-;4004:5;4057:3;4050:4;4042:6;4038:17;4034:27;4024:55;;4075:1;4072;4065:12;4024:55;4097:80;4173:3;4164:6;4151:20;4144:4;4136:6;4132:17;4097:80;:::i;4188:543::-;4276:6;4284;4337:2;4325:9;4316:7;4312:23;4308:32;4305:52;;;4353:1;4350;4343:12;4305:52;4393:9;4380:23;4422:18;4463:2;4455:6;4452:14;4449:34;;;4479:1;4476;4469:12;4449:34;4502:50;4544:7;4535:6;4524:9;4520:22;4502:50;:::i;:::-;4492:60;;4605:2;4594:9;4590:18;4577:32;4561:48;;4634:2;4624:8;4621:16;4618:36;;;4650:1;4647;4640:12;4618:36;;4673:52;4717:7;4706:8;4695:9;4691:24;4673:52;:::i;:::-;4663:62;;;4188:543;;;;;:::o;4736:186::-;4795:6;4848:2;4836:9;4827:7;4823:23;4819:32;4816:52;;;4864:1;4861;4854:12;4816:52;4887:29;4906:9;4887:29;:::i;5109:118::-;5195:5;5188:13;5181:21;5174:5;5171:32;5161:60;;5217:1;5214;5207:12;5232:315;5297:6;5305;5358:2;5346:9;5337:7;5333:23;5329:32;5326:52;;;5374:1;5371;5364:12;5326:52;5397:29;5416:9;5397:29;:::i;:::-;5387:39;;5476:2;5465:9;5461:18;5448:32;5489:28;5511:5;5489:28;:::i;:::-;5536:5;5526:15;;;5232:315;;;;;:::o;5552:667::-;5647:6;5655;5663;5671;5724:3;5712:9;5703:7;5699:23;5695:33;5692:53;;;5741:1;5738;5731:12;5692:53;5764:29;5783:9;5764:29;:::i;:::-;5754:39;;5812:38;5846:2;5835:9;5831:18;5812:38;:::i;:::-;5802:48;;5897:2;5886:9;5882:18;5869:32;5859:42;;5952:2;5941:9;5937:18;5924:32;5979:18;5971:6;5968:30;5965:50;;;6011:1;6008;6001:12;5965:50;6034:22;;6087:4;6079:13;;6075:27;-1:-1:-1;6065:55:302;;6116:1;6113;6106:12;6065:55;6139:74;6205:7;6200:2;6187:16;6182:2;6178;6174:11;6139:74;:::i;:::-;6129:84;;;5552:667;;;;;;;:::o;6741:260::-;6809:6;6817;6870:2;6858:9;6849:7;6845:23;6841:32;6838:52;;;6886:1;6883;6876:12;6838:52;6909:29;6928:9;6909:29;:::i;:::-;6899:39;;6957:38;6991:2;6980:9;6976:18;6957:38;:::i;:::-;6947:48;;6741:260;;;;;:::o;7006:437::-;7085:1;7081:12;;;;7128;;;7149:61;;7203:4;7195:6;7191:17;7181:27;;7149:61;7256:2;7248:6;7245:14;7225:18;7222:38;7219:218;;7293:77;7290:1;7283:88;7394:4;7391:1;7384:15;7422:4;7419:1;7412:15;7219:218;;7006:437;;;:::o;8832:960::-;9261:3;9299:6;9293:13;9315:53;9361:6;9356:3;9349:4;9341:6;9337:17;9315:53;:::i;:::-;9399:6;9394:3;9390:16;9377:29;;9425:3;9451:2;9444:5;9437:17;9485:6;9479:13;9501:65;9557:8;9553:1;9546:5;9542:13;9535:4;9527:6;9523:17;9501:65;:::i;:::-;9629:1;9585:20;;9621:10;;;9614:22;9661:13;;9683:62;9661:13;9732:1;9724:10;;9717:4;9705:17;;9683:62;:::i;:::-;9765:17;9784:1;9761:25;;8832:960;-1:-1:-1;;;;;8832:960:302:o;10959:635::-;11038:6;11091:2;11079:9;11070:7;11066:23;11062:32;11059:52;;;11107:1;11104;11097:12;11059:52;11140:9;11134:16;11173:18;11165:6;11162:30;11159:50;;;11205:1;11202;11195:12;11159:50;11228:22;;11281:4;11273:13;;11269:27;-1:-1:-1;11259:55:302;;11310:1;11307;11300:12;11259:55;11339:2;11333:9;11364:49;11380:32;11409:2;11380:32;:::i;11364:49::-;11436:2;11429:5;11422:17;11476:7;11471:2;11466;11462;11458:11;11454:20;11451:33;11448:53;;;11497:1;11494;11487:12;11448:53;11510:54;11561:2;11556;11549:5;11545:14;11540:2;11536;11532:11;11510:54;:::i;:::-;11583:5;10959:635;-1:-1:-1;;;;;10959:635:302:o;11599:274::-;11728:3;11766:6;11760:13;11782:53;11828:6;11823:3;11816:4;11808:6;11804:17;11782:53;:::i;:::-;11851:16;;;;;11599:274;-1:-1:-1;;11599:274:302:o;12288:245::-;12355:6;12408:2;12396:9;12387:7;12383:23;12379:32;12376:52;;;12424:1;12421;12414:12;12376:52;12456:9;12450:16;12475:28;12497:5;12475:28;:::i;12538:772::-;12919:3;12957:6;12951:13;12973:53;13019:6;13014:3;13007:4;12999:6;12995:17;12973:53;:::i;:::-;13087:3;13048:16;;;13073:18;;;13116:13;;13138:65;13116:13;13190:1;13179:13;;13172:4;13160:17;;13138:65;:::i;:::-;13270:7;13266:1;13222:20;;;;13258:10;;;13251:27;13302:1;13294:10;;12538:772;-1:-1:-1;;;;12538:772:302:o;14126:184::-;14178:77;14175:1;14168:88;14275:4;14272:1;14265:15;14299:4;14296:1;14289:15;14315:125;14355:4;14383:1;14380;14377:8;14374:34;;;14388:18;;:::i;:::-;-1:-1:-1;14425:9:302;;14315:125::o;14445:128::-;14485:3;14516:1;14512:6;14509:1;14506:13;14503:39;;;14522:18;;:::i;:::-;-1:-1:-1;14558:9:302;;14445:128::o;14990:195::-;15029:3;15060:66;15053:5;15050:77;15047:103;;15130:18;;:::i;:::-;-1:-1:-1;15177:1:302;15166:13;;14990:195::o;15190:184::-;15242:77;15239:1;15232:88;15339:4;15336:1;15329:15;15363:4;15360:1;15353:15;15379:120;15419:1;15445;15435:35;;15450:18;;:::i;:::-;-1:-1:-1;15484:9:302;;15379:120::o;15504:112::-;15536:1;15562;15552:35;;15567:18;;:::i;:::-;-1:-1:-1;15601:9:302;;15504:112::o;15621:184::-;15673:77;15670:1;15663:88;15770:4;15767:1;15760:15;15794:4;15791:1;15784:15;16229:228;16269:7;16395:1;16327:66;16323:74;16320:1;16317:81;16312:1;16305:9;16298:17;16294:105;16291:131;;;16402:18;;:::i;:::-;-1:-1:-1;16442:9:302;;16229:228::o;16462:196::-;16501:3;16529:5;16519:39;;16538:18;;:::i;:::-;-1:-1:-1;16585:66:302;16574:78;;16462:196::o;17150:545::-;17252:2;17247:3;17244:11;17241:448;;;17288:1;17313:5;17309:2;17302:17;17358:4;17354:2;17344:19;17428:2;17416:10;17412:19;17409:1;17405:27;17399:4;17395:38;17464:4;17452:10;17449:20;17446:47;;;-1:-1:-1;17487:4:302;17446:47;17542:2;17537:3;17533:12;17530:1;17526:20;17520:4;17516:31;17506:41;;17597:82;17615:2;17608:5;17605:13;17597:82;;;17660:17;;;17641:1;17630:13;17597:82;;;17601:3;;;17150:545;;;:::o;17931:1471::-;18057:3;18051:10;18084:18;18076:6;18073:30;18070:56;;;18106:18;;:::i;:::-;18135:97;18225:6;18185:38;18217:4;18211:11;18185:38;:::i;:::-;18179:4;18135:97;:::i;:::-;18287:4;;18351:2;18340:14;;18368:1;18363:782;;;;19189:1;19206:6;19203:89;;;-1:-1:-1;19258:19:302;;;19252:26;19203:89;17837:66;17828:1;17824:11;;;17820:84;17816:89;17806:100;17912:1;17908:11;;;17803:117;19305:81;;18333:1063;;18363:782;17097:1;17090:14;;;17134:4;17121:18;;18411:66;18399:79;;;18576:236;18590:7;18587:1;18584:14;18576:236;;;18679:19;;;18673:26;18658:42;;18771:27;;;;18739:1;18727:14;;;;18606:19;;18576:236;;;18580:3;18840:6;18831:7;18828:19;18825:261;;;18901:19;;;18895:26;19002:66;18984:1;18980:14;;;18996:3;18976:24;18972:97;18968:102;18953:118;18938:134;;18825:261;-1:-1:-1;;;;;19132:1:302;19116:14;;;19112:22;19099:36;;-1:-1:-1;17931:1471:302:o;19407:512::-;19601:4;19630:42;19711:2;19703:6;19699:15;19688:9;19681:34;19763:2;19755:6;19751:15;19746:2;19735:9;19731:18;19724:43;;19803:6;19798:2;19787:9;19783:18;19776:34;19846:3;19841:2;19830:9;19826:18;19819:31;19867:46;19908:3;19897:9;19893:19;19885:6;19867:46;:::i;:::-;19859:54;19407:512;-1:-1:-1;;;;;;19407:512:302:o;19924:249::-;19993:6;20046:2;20034:9;20025:7;20021:23;20017:32;20014:52;;;20062:1;20059;20052:12;20014:52;20094:9;20088:16;20113:30;20137:5;20113:30;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "79579": [
        {
          "start": 556,
          "length": 32
        },
        {
          "start": 2904,
          "length": 32
        }
      ],
      "79583": [
        {
          "start": 954,
          "length": 32
        },
        {
          "start": 2991,
          "length": 32
        }
      ],
      "79587": [
        {
          "start": 915,
          "length": 32
        },
        {
          "start": 3428,
          "length": 32
        }
      ],
      "82893": [
        {
          "start": 2366,
          "length": 32
        }
      ],
      "82896": [
        {
          "start": 2407,
          "length": 32
        }
      ],
      "82899": [
        {
          "start": 2448,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_STATION()": "db083d71",
    "BASE_URI_ATTESTATION_KEY()": "21d3d5cf",
    "BASE_URI_ATTESTOR()": "19f463f2",
    "OPTIMIST_ALLOWLIST()": "ce5dd1b5",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "baseURI()": "6c0360eb",
    "burn(uint256)": "42966c68",
    "getApproved(uint256)": "081812fc",
    "initialize(string,string)": "4cd88b76",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isOnAllowList(address)": "8f328a1f",
    "mint(address)": "6a627842",
    "name()": "06fdde03",
    "ownerOf(uint256)": "6352211e",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenIdOfAddress(address)": "7c08652f",
    "tokenURI(uint256)": "c87b56dd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_baseURIAttestor\",\"type\":\"address\"},{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"},{\"internalType\":\"contract OptimistAllowlist\",\"name\":\"_optimistAllowlist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_URI_ATTESTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMIST_ALLOWLIST\",\"outputs\":[{\"internalType\":\"contract OptimistAllowlist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"isOnAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenIdOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Optimism CollectiveGitcoin\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"returns\":{\"uri_\":\"BaseURI for all tokens.\"}},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"custom:semver\":\"2.0.2\",\"params\":{\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_baseURIAttestor\":\"Address of the baseURI attestor.\",\"_name\":\"Token name.\",\"_optimistAllowlist\":\"Address of the OptimistAllowlist contract\",\"_symbol\":\"Token symbol.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string)\":{\"params\":{\"_name\":\"Token name.\",\"_symbol\":\"Token symbol.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isOnAllowList(address)\":{\"returns\":{\"allowed_\":\"Whether or not the address is allowed to mint yet.\"}},\"mint(address)\":{\"params\":{\"_recipient\":\"Address of the token recipient.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenIdOfAddress(address)\":{\"returns\":{\"_0\":\"Token ID for the token owned by the given address.\"}},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"Token ID to query.\"},\"returns\":{\"uri_\":\"Token URI for the given token by ID.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"Optimist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"BASE_URI_ATTESTATION_KEY()\":{\"notice\":\"Attestation key used by the attestor to attest the baseURI.\"},\"BASE_URI_ATTESTOR()\":{\"notice\":\"Attestor who attests to baseURI.\"},\"OPTIMIST_ALLOWLIST()\":{\"notice\":\"Address of the OptimistAllowlist contract.\"},\"approve(address,uint256)\":{\"notice\":\"Disabled for the Optimist NFT (Soul Bound Token).\"},\"baseURI()\":{\"notice\":\"Returns the baseURI for all tokens.\"},\"initialize(string,string)\":{\"notice\":\"Initializes the Optimist contract.\"},\"isOnAllowList(address)\":{\"notice\":\"Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.\"},\"mint(address)\":{\"notice\":\"Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Disabled for the Optimist NFT (Soul Bound Token).\"},\"tokenIdOfAddress(address)\":{\"notice\":\"Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the token URI for a given token by ID\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A Soul Bound Token for real humans only(tm).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/op-nft/Optimist.sol\":\"Optimist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31c7d52f47a9174e236c0402654f42c16516c58c6851862f3bcb1b440b873498\",\"dweb:/ipfs/QmZQqiofa8jPJCCAfWyjNnBuoGXrR56Ct4HyW4ugRWfvCb\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a\",\"dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1723de5ae414f210db039b19e6487c19c2d643483c9be7c445cf481a80c199d2\",\"dweb:/ipfs/QmcBLbmPdZsNngYhA1KDadNUqQZoGACytFWuUH74RC4AXC\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77dec5f0117e876e485db228ec24a29b0e8215bf94762bfcc80fec670c5fad97\",\"dweb:/ipfs/Qmf1iZ7jqNWgGFs5zwrKVinZ8RsCZjzufqhE7zDnEgam5x\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ffbd627e6958983d288801acdedbf3491ee0ebf1a430338bce47c96481ce9e3\",\"dweb:/ipfs/QmUM1vpmNgBV34sYf946SthDJNGhwwqjoRggmj4TUUQmdB\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7\",\"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"src/periphery/op-nft/AttestationStation.sol\":{\"keccak256\":\"0xab54f28712653e8926b23c501975aee5d3368dbf436a14da6ddb9dbc792de2ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a6c5ad2becb79bc6bf3afaaca89dfda6d8f096d55184c0adce20efb3ff19d33\",\"dweb:/ipfs/QmP3qyEYnB195og1FdvW4su4KoBZZQ7UzC8V7CQMz7Ear9\"]},\"src/periphery/op-nft/Optimist.sol\":{\"keccak256\":\"0xd245b6d3ccbe11e294228a2a1de914f9bfd4838102912b54ed64e30471666db7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbb40c030bef58b05e0c6ac3dc1731a0281bc1332979baf26b8663f8a9735999\",\"dweb:/ipfs/Qmb4tRNxytcvBVudEnnGk3pYg4EYrsYZn7TbNfYfw4QfUB\"]},\"src/periphery/op-nft/OptimistAllowlist.sol\":{\"keccak256\":\"0x21c1973eaa45001faae000af13badb7620f6062432c26f792aaa2c75ceb5ece7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46a8dc4f90b0b2701e223dd8e0357846230b7cc12cd27c9d05273cdfe62740ad\",\"dweb:/ipfs/QmP78hkkrojRMPu989LnV266C51wbf4RX1Lyq7LYHSZVVR\"]},\"src/periphery/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268\",\"dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2\"]},\"src/universal/Semver.sol\":{\"keccak256\":\"0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5909c0b049b03a2bc24816ecf15b0aaf18c04a963174e1eba7624321bef330d\",\"dweb:/ipfs/QmeqdutwZWHqQMXauNR6WY8PrUpfsTiWTQyanbnGM9QqzT\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_baseURIAttestor",
              "type": "address"
            },
            {
              "internalType": "contract AttestationStation",
              "name": "_attestationStation",
              "type": "address"
            },
            {
              "internalType": "contract OptimistAllowlist",
              "name": "_optimistAllowlist",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_STATION",
          "outputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BASE_URI_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BASE_URI_ATTESTOR",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPTIMIST_ALLOWLIST",
          "outputs": [
            {
              "internalType": "contract OptimistAllowlist",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "uri_",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isOnAllowList",
          "outputs": [
            {
              "internalType": "bool",
              "name": "allowed_",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "tokenIdOfAddress",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "uri_",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "baseURI()": {
            "returns": {
              "uri_": "BaseURI for all tokens."
            }
          },
          "burn(uint256)": {
            "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
          },
          "constructor": {
            "custom:semver": "2.0.2",
            "params": {
              "_attestationStation": "Address of the AttestationStation contract.",
              "_baseURIAttestor": "Address of the baseURI attestor.",
              "_name": "Token name.",
              "_optimistAllowlist": "Address of the OptimistAllowlist contract",
              "_symbol": "Token symbol."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "initialize(string,string)": {
            "params": {
              "_name": "Token name.",
              "_symbol": "Token symbol."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isOnAllowList(address)": {
            "returns": {
              "allowed_": "Whether or not the address is allowed to mint yet."
            }
          },
          "mint(address)": {
            "params": {
              "_recipient": "Address of the token recipient."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenIdOfAddress(address)": {
            "returns": {
              "_0": "Token ID for the token owned by the given address."
            }
          },
          "tokenURI(uint256)": {
            "params": {
              "_tokenId": "Token ID to query."
            },
            "returns": {
              "uri_": "Token URI for the given token by ID."
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ATTESTATION_STATION()": {
            "notice": "Address of the AttestationStation contract."
          },
          "BASE_URI_ATTESTATION_KEY()": {
            "notice": "Attestation key used by the attestor to attest the baseURI."
          },
          "BASE_URI_ATTESTOR()": {
            "notice": "Attestor who attests to baseURI."
          },
          "OPTIMIST_ALLOWLIST()": {
            "notice": "Address of the OptimistAllowlist contract."
          },
          "approve(address,uint256)": {
            "notice": "Disabled for the Optimist NFT (Soul Bound Token)."
          },
          "baseURI()": {
            "notice": "Returns the baseURI for all tokens."
          },
          "initialize(string,string)": {
            "notice": "Initializes the Optimist contract."
          },
          "isOnAllowList(address)": {
            "notice": "Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint."
          },
          "mint(address)": {
            "notice": "Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address."
          },
          "setApprovalForAll(address,bool)": {
            "notice": "Disabled for the Optimist NFT (Soul Bound Token)."
          },
          "tokenIdOfAddress(address)": {
            "notice": "Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the token URI for a given token by ID"
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/periphery/op-nft/Optimist.sol": "Optimist"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol": {
        "keccak256": "0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf",
        "urls": [
          "bzz-raw://31c7d52f47a9174e236c0402654f42c16516c58c6851862f3bcb1b440b873498",
          "dweb:/ipfs/QmZQqiofa8jPJCCAfWyjNnBuoGXrR56Ct4HyW4ugRWfvCb"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol": {
        "keccak256": "0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5",
        "urls": [
          "bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a",
          "dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol": {
        "keccak256": "0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005",
        "urls": [
          "bzz-raw://1723de5ae414f210db039b19e6487c19c2d643483c9be7c445cf481a80c199d2",
          "dweb:/ipfs/QmcBLbmPdZsNngYhA1KDadNUqQZoGACytFWuUH74RC4AXC"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/ERC721BurnableUpgradeable.sol": {
        "keccak256": "0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d",
        "urls": [
          "bzz-raw://77dec5f0117e876e485db228ec24a29b0e8215bf94762bfcc80fec670c5fad97",
          "dweb:/ipfs/Qmf1iZ7jqNWgGFs5zwrKVinZ8RsCZjzufqhE7zDnEgam5x"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
        "keccak256": "0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70",
        "urls": [
          "bzz-raw://4ffbd627e6958983d288801acdedbf3491ee0ebf1a430338bce47c96481ce9e3",
          "dweb:/ipfs/QmUM1vpmNgBV34sYf946SthDJNGhwwqjoRggmj4TUUQmdB"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
        "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
        "urls": [
          "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
          "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
        "keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
        "urls": [
          "bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
          "dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
        "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
        "urls": [
          "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
          "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/AttestationStation.sol": {
        "keccak256": "0xab54f28712653e8926b23c501975aee5d3368dbf436a14da6ddb9dbc792de2ef",
        "urls": [
          "bzz-raw://8a6c5ad2becb79bc6bf3afaaca89dfda6d8f096d55184c0adce20efb3ff19d33",
          "dweb:/ipfs/QmP3qyEYnB195og1FdvW4su4KoBZZQ7UzC8V7CQMz7Ear9"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/Optimist.sol": {
        "keccak256": "0xd245b6d3ccbe11e294228a2a1de914f9bfd4838102912b54ed64e30471666db7",
        "urls": [
          "bzz-raw://fbb40c030bef58b05e0c6ac3dc1731a0281bc1332979baf26b8663f8a9735999",
          "dweb:/ipfs/Qmb4tRNxytcvBVudEnnGk3pYg4EYrsYZn7TbNfYfw4QfUB"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/OptimistAllowlist.sol": {
        "keccak256": "0x21c1973eaa45001faae000af13badb7620f6062432c26f792aaa2c75ceb5ece7",
        "urls": [
          "bzz-raw://46a8dc4f90b0b2701e223dd8e0357846230b7cc12cd27c9d05273cdfe62740ad",
          "dweb:/ipfs/QmP78hkkrojRMPu989LnV266C51wbf4RX1Lyq7LYHSZVVR"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c",
        "urls": [
          "bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268",
          "dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2"
        ],
        "license": "MIT"
      },
      "src/universal/Semver.sol": {
        "keccak256": "0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60",
        "urls": [
          "bzz-raw://d5909c0b049b03a2bc24816ecf15b0aaf18c04a963174e1eba7624321bef330d",
          "dweb:/ipfs/QmeqdutwZWHqQMXauNR6WY8PrUpfsTiWTQyanbnGM9QqzT"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29536,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 29539,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 31067,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31875,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29709,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 29711,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 29715,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 29719,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 29723,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 29729,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 30571,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 30755,
        "contract": "src/periphery/op-nft/Optimist.sol:Optimist",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "ATTESTATION_STATION()": {
        "notice": "Address of the AttestationStation contract."
      },
      "BASE_URI_ATTESTATION_KEY()": {
        "notice": "Attestation key used by the attestor to attest the baseURI."
      },
      "BASE_URI_ATTESTOR()": {
        "notice": "Attestor who attests to baseURI."
      },
      "OPTIMIST_ALLOWLIST()": {
        "notice": "Address of the OptimistAllowlist contract."
      },
      "approve(address,uint256)": {
        "notice": "Disabled for the Optimist NFT (Soul Bound Token)."
      },
      "baseURI()": {
        "notice": "Returns the baseURI for all tokens."
      },
      "initialize(string,string)": {
        "notice": "Initializes the Optimist contract."
      },
      "isOnAllowList(address)": {
        "notice": "Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint."
      },
      "mint(address)": {
        "notice": "Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Disabled for the Optimist NFT (Soul Bound Token)."
      },
      "tokenIdOfAddress(address)": {
        "notice": "Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the token URI for a given token by ID"
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "A Soul Bound Token for real humans only(tm)."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "author": "Optimism CollectiveGitcoin",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "returns": {
          "uri_": "BaseURI for all tokens."
        }
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "constructor": {
        "params": {
          "_attestationStation": "Address of the AttestationStation contract.",
          "_baseURIAttestor": "Address of the baseURI attestor.",
          "_name": "Token name.",
          "_optimistAllowlist": "Address of the OptimistAllowlist contract",
          "_symbol": "Token symbol."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string)": {
        "params": {
          "_name": "Token name.",
          "_symbol": "Token symbol."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isOnAllowList(address)": {
        "returns": {
          "allowed_": "Whether or not the address is allowed to mint yet."
        }
      },
      "mint(address)": {
        "params": {
          "_recipient": "Address of the token recipient."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenIdOfAddress(address)": {
        "returns": {
          "_0": "Token ID for the token owned by the given address."
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "Token ID to query."
        },
        "returns": {
          "uri_": "Token URI for the given token by ID."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "Optimist"
  },
  "ast": {
    "absolutePath": "src/periphery/op-nft/Optimist.sol",
    "id": 79814,
    "exportedSymbols": {
      "AttestationStation": [
        79552
      ],
      "ERC721BurnableUpgradeable": [
        30756
      ],
      "Optimist": [
        79813
      ],
      "OptimistAllowlist": [
        79987
      ],
      "Semver": [
        82951
      ],
      "Strings": [
        36157
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:5231:197",
    "nodes": [
      {
        "id": 79554,
        "nodeType": "PragmaDirective",
        "src": "32:23:197",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 79556,
        "nodeType": "ImportDirective",
        "src": "57:52:197",
        "nodes": [],
        "absolutePath": "src/universal/Semver.sol",
        "file": "../../universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79814,
        "sourceUnit": 82952,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79555,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 82951,
              "src": "66:6:197",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79558,
        "nodeType": "ImportDirective",
        "src": "110:138:197",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79814,
        "sourceUnit": 30757,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79557,
              "name": "ERC721BurnableUpgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 30756,
              "src": "119:25:197",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79560,
        "nodeType": "ImportDirective",
        "src": "249:62:197",
        "nodes": [],
        "absolutePath": "src/periphery/op-nft/AttestationStation.sol",
        "file": "./AttestationStation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79814,
        "sourceUnit": 79553,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79559,
              "name": "AttestationStation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 79552,
              "src": "258:18:197",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79562,
        "nodeType": "ImportDirective",
        "src": "312:60:197",
        "nodes": [],
        "absolutePath": "src/periphery/op-nft/OptimistAllowlist.sol",
        "file": "./OptimistAllowlist.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79814,
        "sourceUnit": 79988,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79561,
              "name": "OptimistAllowlist",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 79987,
              "src": "321:17:197",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79564,
        "nodeType": "ImportDirective",
        "src": "373:68:197",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "file": "@openzeppelin/contracts/utils/Strings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 79814,
        "sourceUnit": 36158,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79563,
              "name": "Strings",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 36157,
              "src": "382:7:197",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79813,
        "nodeType": "ContractDefinition",
        "src": "573:4689:197",
        "nodes": [
          {
            "id": 79576,
            "nodeType": "VariableDeclaration",
            "src": "710:79:197",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 79570,
              "nodeType": "StructuredDocumentation",
              "src": "634:71:197",
              "text": "@notice Attestation key used by the attestor to attest the baseURI."
            },
            "functionSelector": "21d3d5cf",
            "mutability": "constant",
            "name": "BASE_URI_ATTESTATION_KEY",
            "nameLocation": "734:24:197",
            "scope": 79813,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 79571,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "710:7:197",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "6f7074696d6973742e626173652d757269",
                  "id": 79574,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "769:19:197",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                    "typeString": "literal_string \"optimist.base-uri\""
                  },
                  "value": "optimist.base-uri"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                    "typeString": "literal_string \"optimist.base-uri\""
                  }
                ],
                "id": 79573,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "761:7:197",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 79572,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "761:7:197",
                  "typeDescriptions": {}
                }
              },
              "id": 79575,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "761:28:197",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79579,
            "nodeType": "VariableDeclaration",
            "src": "845:42:197",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79577,
              "nodeType": "StructuredDocumentation",
              "src": "796:44:197",
              "text": "@notice Attestor who attests to baseURI."
            },
            "functionSelector": "19f463f2",
            "mutability": "immutable",
            "name": "BASE_URI_ATTESTOR",
            "nameLocation": "870:17:197",
            "scope": 79813,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 79578,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "845:7:197",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79583,
            "nodeType": "VariableDeclaration",
            "src": "954:55:197",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79580,
              "nodeType": "StructuredDocumentation",
              "src": "894:55:197",
              "text": "@notice Address of the AttestationStation contract."
            },
            "functionSelector": "db083d71",
            "mutability": "immutable",
            "name": "ATTESTATION_STATION",
            "nameLocation": "990:19:197",
            "scope": 79813,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AttestationStation_$79552",
              "typeString": "contract AttestationStation"
            },
            "typeName": {
              "id": 79582,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 79581,
                "name": "AttestationStation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 79552,
                "src": "954:18:197"
              },
              "referencedDeclaration": 79552,
              "src": "954:18:197",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AttestationStation_$79552",
                "typeString": "contract AttestationStation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79587,
            "nodeType": "VariableDeclaration",
            "src": "1075:53:197",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 79584,
              "nodeType": "StructuredDocumentation",
              "src": "1016:54:197",
              "text": "@notice Address of the OptimistAllowlist contract."
            },
            "functionSelector": "ce5dd1b5",
            "mutability": "immutable",
            "name": "OPTIMIST_ALLOWLIST",
            "nameLocation": "1110:18:197",
            "scope": 79813,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
              "typeString": "contract OptimistAllowlist"
            },
            "typeName": {
              "id": 79586,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 79585,
                "name": "OptimistAllowlist",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 79987,
                "src": "1075:17:197"
              },
              "referencedDeclaration": 79987,
              "src": "1075:17:197",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                "typeString": "contract OptimistAllowlist"
              }
            },
            "visibility": "public"
          },
          {
            "id": 79626,
            "nodeType": "FunctionDefinition",
            "src": "1484:423:197",
            "nodes": [],
            "body": {
              "id": 79625,
              "nodeType": "Block",
              "src": "1718:189:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79608,
                      "name": "BASE_URI_ATTESTOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79579,
                      "src": "1728:17:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79609,
                      "name": "_baseURIAttestor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79594,
                      "src": "1748:16:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1728:36:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 79611,
                  "nodeType": "ExpressionStatement",
                  "src": "1728:36:197"
                },
                {
                  "expression": {
                    "id": 79614,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79612,
                      "name": "ATTESTATION_STATION",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79583,
                      "src": "1774:19:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$79552",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79613,
                      "name": "_attestationStation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79597,
                      "src": "1796:19:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$79552",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "src": "1774:41:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$79552",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "id": 79615,
                  "nodeType": "ExpressionStatement",
                  "src": "1774:41:197"
                },
                {
                  "expression": {
                    "id": 79618,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79616,
                      "name": "OPTIMIST_ALLOWLIST",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79587,
                      "src": "1825:18:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                        "typeString": "contract OptimistAllowlist"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 79617,
                      "name": "_optimistAllowlist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79600,
                      "src": "1846:18:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                        "typeString": "contract OptimistAllowlist"
                      }
                    },
                    "src": "1825:39:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                      "typeString": "contract OptimistAllowlist"
                    }
                  },
                  "id": 79619,
                  "nodeType": "ExpressionStatement",
                  "src": "1825:39:197"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79621,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79590,
                        "src": "1885:5:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 79622,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79592,
                        "src": "1892:7:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 79620,
                      "name": "initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79645,
                      "src": "1874:10:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 79623,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1874:26:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79624,
                  "nodeType": "ExpressionStatement",
                  "src": "1874:26:197"
                }
              ]
            },
            "documentation": {
              "id": 79588,
              "nodeType": "StructuredDocumentation",
              "src": "1135:344:197",
              "text": "@custom:semver 2.0.2\n @param _name               Token name.\n @param _symbol             Token symbol.\n @param _baseURIAttestor    Address of the baseURI attestor.\n @param _attestationStation Address of the AttestationStation contract.\n @param _optimistAllowlist  Address of the OptimistAllowlist contract"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 79603,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1705:1:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  {
                    "hexValue": "30",
                    "id": 79604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1708:1:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "hexValue": "32",
                    "id": 79605,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1711:1:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 79606,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 79602,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 82951,
                  "src": "1698:6:197"
                },
                "nodeType": "ModifierInvocation",
                "src": "1698:15:197"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 79601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79590,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1519:5:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79626,
                  "src": "1505:19:197",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 79589,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1505:6:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79592,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1548:7:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79626,
                  "src": "1534:21:197",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 79591,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1534:6:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79594,
                  "mutability": "mutable",
                  "name": "_baseURIAttestor",
                  "nameLocation": "1573:16:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79626,
                  "src": "1565:24:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79593,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1565:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79597,
                  "mutability": "mutable",
                  "name": "_attestationStation",
                  "nameLocation": "1618:19:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79626,
                  "src": "1599:38:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AttestationStation_$79552",
                    "typeString": "contract AttestationStation"
                  },
                  "typeName": {
                    "id": 79596,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79595,
                      "name": "AttestationStation",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 79552,
                      "src": "1599:18:197"
                    },
                    "referencedDeclaration": 79552,
                    "src": "1599:18:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$79552",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79600,
                  "mutability": "mutable",
                  "name": "_optimistAllowlist",
                  "nameLocation": "1665:18:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79626,
                  "src": "1647:36:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                    "typeString": "contract OptimistAllowlist"
                  },
                  "typeName": {
                    "id": 79599,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 79598,
                      "name": "OptimistAllowlist",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 79987,
                      "src": "1647:17:197"
                    },
                    "referencedDeclaration": 79987,
                    "src": "1647:17:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                      "typeString": "contract OptimistAllowlist"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1495:194:197"
            },
            "returnParameters": {
              "id": 79607,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1718:0:197"
            },
            "scope": 79813,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79645,
            "nodeType": "FunctionDefinition",
            "src": "2036:162:197",
            "nodes": [],
            "body": {
              "id": 79644,
              "nodeType": "Block",
              "src": "2119:79:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79637,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79629,
                        "src": "2143:5:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 79638,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79631,
                        "src": "2150:7:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 79636,
                      "name": "__ERC721_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29745,
                      "src": "2129:13:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 79639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2129:29:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79640,
                  "nodeType": "ExpressionStatement",
                  "src": "2129:29:197"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 79641,
                      "name": "__ERC721Burnable_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30724,
                      "src": "2168:21:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 79642,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2168:23:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79643,
                  "nodeType": "ExpressionStatement",
                  "src": "2168:23:197"
                }
              ]
            },
            "documentation": {
              "id": 79627,
              "nodeType": "StructuredDocumentation",
              "src": "1913:118:197",
              "text": "@notice Initializes the Optimist contract.\n @param _name   Token name.\n @param _symbol Token symbol."
            },
            "functionSelector": "4cd88b76",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 79634,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 79633,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29600,
                  "src": "2107:11:197"
                },
                "nodeType": "ModifierInvocation",
                "src": "2107:11:197"
              }
            ],
            "name": "initialize",
            "nameLocation": "2045:10:197",
            "parameters": {
              "id": 79632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79629,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2070:5:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79645,
                  "src": "2056:19:197",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 79628,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2056:6:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79631,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2091:7:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79645,
                  "src": "2077:21:197",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 79630,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2077:6:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2055:44:197"
            },
            "returnParameters": {
              "id": 79635,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2119:0:197"
            },
            "scope": 79813,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79666,
            "nodeType": "FunctionDefinition",
            "src": "2521:194:197",
            "nodes": [],
            "body": {
              "id": 79665,
              "nodeType": "Block",
              "src": "2562:153:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 79653,
                            "name": "_recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79648,
                            "src": "2594:10:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 79652,
                          "name": "isOnAllowList",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79738,
                          "src": "2580:13:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 79654,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2580:25:197",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d6973743a2061646472657373206973206e6f74206f6e20616c6c6f774c697374",
                        "id": 79655,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2607:39:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c7b6182f789be6fc394fdc8ce80534d330b0ece65731aa1c69c0f6b325757aaf",
                          "typeString": "literal_string \"Optimist: address is not on allowList\""
                        },
                        "value": "Optimist: address is not on allowList"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c7b6182f789be6fc394fdc8ce80534d330b0ece65731aa1c69c0f6b325757aaf",
                          "typeString": "literal_string \"Optimist: address is not on allowList\""
                        }
                      ],
                      "id": 79651,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2572:7:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79656,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2572:75:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79657,
                  "nodeType": "ExpressionStatement",
                  "src": "2572:75:197"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 79659,
                        "name": "_recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79648,
                        "src": "2667:10:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 79661,
                            "name": "_recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79648,
                            "src": "2696:10:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 79660,
                          "name": "tokenIdOfAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79755,
                          "src": "2679:16:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) pure returns (uint256)"
                          }
                        },
                        "id": 79662,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2679:28:197",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 79658,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        30182,
                        30211
                      ],
                      "referencedDeclaration": 30182,
                      "src": "2657:9:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 79663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2657:51:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79664,
                  "nodeType": "ExpressionStatement",
                  "src": "2657:51:197"
                }
              ]
            },
            "documentation": {
              "id": 79646,
              "nodeType": "StructuredDocumentation",
              "src": "2204:312:197",
              "text": "@notice Allows an address to mint an Optimist NFT. Token ID is the uint256 representation\n         of the recipient's address. Recipients must be permitted to mint, eventually anyone\n         will be able to mint. One token per address.\n @param _recipient Address of the token recipient."
            },
            "functionSelector": "6a627842",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nameLocation": "2530:4:197",
            "parameters": {
              "id": 79649,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79648,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "2543:10:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79666,
                  "src": "2535:18:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79647,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2535:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2534:20:197"
            },
            "returnParameters": {
              "id": 79650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2562:0:197"
            },
            "scope": 79813,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79694,
            "nodeType": "FunctionDefinition",
            "src": "2818:258:197",
            "nodes": [],
            "body": {
              "id": 79693,
              "nodeType": "Block",
              "src": "2878:198:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79672,
                      "name": "uri_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79670,
                      "src": "2888:4:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 79679,
                                  "name": "BASE_URI_ATTESTOR",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 79579,
                                  "src": "2982:17:197",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "id": 79682,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "3009:4:197",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Optimist_$79813",
                                        "typeString": "contract Optimist"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Optimist_$79813",
                                        "typeString": "contract Optimist"
                                      }
                                    ],
                                    "id": 79681,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3001:7:197",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 79680,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "3001:7:197",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 79683,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3001:13:197",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "6f7074696d6973742e626173652d757269",
                                      "id": 79686,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "3024:19:197",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                                        "typeString": "literal_string \"optimist.base-uri\""
                                      },
                                      "value": "optimist.base-uri"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_014a6a9ee0e44fcdd248666ebd106d1f3359129395303493f6dfd82f476dada3",
                                        "typeString": "literal_string \"optimist.base-uri\""
                                      }
                                    ],
                                    "id": 79685,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "3016:7:197",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_bytes32_$",
                                      "typeString": "type(bytes32)"
                                    },
                                    "typeName": {
                                      "id": 79684,
                                      "name": "bytes32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "3016:7:197",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 79687,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3016:28:197",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "expression": {
                                  "id": 79677,
                                  "name": "ATTESTATION_STATION",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 79583,
                                  "src": "2949:19:197",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_AttestationStation_$79552",
                                    "typeString": "contract AttestationStation"
                                  }
                                },
                                "id": 79678,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "attestations",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 79457,
                                "src": "2949:32:197",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (address,address,bytes32) view external returns (bytes memory)"
                                }
                              },
                              "id": 79688,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2949:96:197",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 79675,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "2915:3:197",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 79676,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "src": "2915:16:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 79689,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2915:144:197",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 79674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "2895:6:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 79673,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2895:6:197",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 79690,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2895:174:197",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2888:181:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 79692,
                  "nodeType": "ExpressionStatement",
                  "src": "2888:181:197"
                }
              ]
            },
            "documentation": {
              "id": 79667,
              "nodeType": "StructuredDocumentation",
              "src": "2721:92:197",
              "text": "@notice Returns the baseURI for all tokens.\n @return uri_ BaseURI for all tokens."
            },
            "functionSelector": "6c0360eb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "baseURI",
            "nameLocation": "2827:7:197",
            "parameters": {
              "id": 79668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2834:2:197"
            },
            "returnParameters": {
              "id": 79671,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79670,
                  "mutability": "mutable",
                  "name": "uri_",
                  "nameLocation": "2872:4:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79694,
                  "src": "2858:18:197",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 79669,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2858:6:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2857:20:197"
            },
            "scope": 79813,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79722,
            "nodeType": "FunctionDefinition",
            "src": "3245:385:197",
            "nodes": [],
            "body": {
              "id": 79721,
              "nodeType": "Block",
              "src": "3339:291:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79703,
                      "name": "uri_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79701,
                      "src": "3349:4:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 79708,
                                "name": "baseURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 79694,
                                "src": "3410:7:197",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () view returns (string memory)"
                                }
                              },
                              "id": 79709,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3410:9:197",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "hexValue": "2f",
                              "id": 79710,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3437:3:197",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527",
                                "typeString": "literal_string \"/\""
                              },
                              "value": "/"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 79713,
                                  "name": "_tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 79697,
                                  "src": "3561:8:197",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "3230",
                                  "id": 79714,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3571:2:197",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_20_by_1",
                                    "typeString": "int_const 20"
                                  },
                                  "value": "20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_20_by_1",
                                    "typeString": "int_const 20"
                                  }
                                ],
                                "expression": {
                                  "id": 79711,
                                  "name": "Strings",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 36157,
                                  "src": "3541:7:197",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Strings_$36157_$",
                                    "typeString": "type(library Strings)"
                                  }
                                },
                                "id": 79712,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "toHexString",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 36136,
                                "src": "3541:19:197",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                                  "typeString": "function (uint256,uint256) pure returns (string memory)"
                                }
                              },
                              "id": 79715,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3541:33:197",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "hexValue": "2e6a736f6e",
                              "id": 79716,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3592:7:197",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                                "typeString": "literal_string \".json\""
                              },
                              "value": ".json"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527",
                                "typeString": "literal_string \"/\""
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                                "typeString": "literal_string \".json\""
                              }
                            ],
                            "expression": {
                              "id": 79706,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "3376:3:197",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 79707,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "src": "3376:16:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 79717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3376:237:197",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 79705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3356:6:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 79704,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3356:6:197",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 79718,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3356:267:197",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3349:274:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 79720,
                  "nodeType": "ExpressionStatement",
                  "src": "3349:274:197"
                }
              ]
            },
            "baseFunctions": [
              29905
            ],
            "documentation": {
              "id": 79695,
              "nodeType": "StructuredDocumentation",
              "src": "3082:158:197",
              "text": "@notice Returns the token URI for a given token by ID\n @param _tokenId Token ID to query.\n @return uri_ Token URI for the given token by ID."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "3254:8:197",
            "overrides": {
              "id": 79699,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3301:8:197"
            },
            "parameters": {
              "id": 79698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79697,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3271:8:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79722,
                  "src": "3263:16:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79696,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3263:7:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3262:18:197"
            },
            "returnParameters": {
              "id": 79702,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79701,
                  "mutability": "mutable",
                  "name": "uri_",
                  "nameLocation": "3333:4:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79722,
                  "src": "3319:18:197",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 79700,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3319:6:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3318:20:197"
            },
            "scope": 79813,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 79738,
            "nodeType": "FunctionDefinition",
            "src": "4019:153:197",
            "nodes": [],
            "body": {
              "id": 79737,
              "nodeType": "Block",
              "src": "4098:74:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 79735,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 79730,
                      "name": "allowed_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79728,
                      "src": "4108:8:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 79733,
                          "name": "_recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79725,
                          "src": "4154:10:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 79731,
                          "name": "OPTIMIST_ALLOWLIST",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79587,
                          "src": "4119:18:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_OptimistAllowlist_$79987",
                            "typeString": "contract OptimistAllowlist"
                          }
                        },
                        "id": 79732,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isAllowedToMint",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 79909,
                        "src": "4119:34:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view external returns (bool)"
                        }
                      },
                      "id": 79734,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4119:46:197",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4108:57:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 79736,
                  "nodeType": "ExpressionStatement",
                  "src": "4108:57:197"
                }
              ]
            },
            "documentation": {
              "id": 79723,
              "nodeType": "StructuredDocumentation",
              "src": "3636:378:197",
              "text": "@notice Checks OptimistAllowlist to determine whether a given address is allowed to mint\n         the Optimist NFT. Since the Optimist NFT will also be used as part of the\n         Citizens House, mints are currently restricted. Eventually anyone will be able\n         to mint.\n @return allowed_ Whether or not the address is allowed to mint yet."
            },
            "functionSelector": "8f328a1f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isOnAllowList",
            "nameLocation": "4028:13:197",
            "parameters": {
              "id": 79726,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79725,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "4050:10:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79738,
                  "src": "4042:18:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79724,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4042:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4041:20:197"
            },
            "returnParameters": {
              "id": 79729,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79728,
                  "mutability": "mutable",
                  "name": "allowed_",
                  "nameLocation": "4088:8:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79738,
                  "src": "4083:13:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79727,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4083:4:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4082:15:197"
            },
            "scope": 79813,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79755,
            "nodeType": "FunctionDefinition",
            "src": "4395:120:197",
            "nodes": [],
            "body": {
              "id": 79754,
              "nodeType": "Block",
              "src": "4467:48:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 79750,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79741,
                            "src": "4500:6:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 79749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4492:7:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint160_$",
                            "typeString": "type(uint160)"
                          },
                          "typeName": {
                            "id": 79748,
                            "name": "uint160",
                            "nodeType": "ElementaryTypeName",
                            "src": "4492:7:197",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 79751,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4492:15:197",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      ],
                      "id": 79747,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4484:7:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 79746,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4484:7:197",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 79752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4484:24:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 79745,
                  "id": 79753,
                  "nodeType": "Return",
                  "src": "4477:31:197"
                }
              ]
            },
            "documentation": {
              "id": 79739,
              "nodeType": "StructuredDocumentation",
              "src": "4178:212:197",
              "text": "@notice Returns the token ID for the token owned by a given address. This is the uint256\n         representation of the given address.\n @return Token ID for the token owned by the given address."
            },
            "functionSelector": "7c08652f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenIdOfAddress",
            "nameLocation": "4404:16:197",
            "parameters": {
              "id": 79742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79741,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "4429:6:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79755,
                  "src": "4421:14:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79740,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4421:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4420:16:197"
            },
            "returnParameters": {
              "id": 79745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79744,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79755,
                  "src": "4458:7:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79743,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4458:7:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4457:9:197"
            },
            "scope": 79813,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79769,
            "nodeType": "FunctionDefinition",
            "src": "4587:109:197",
            "nodes": [],
            "body": {
              "id": 79768,
              "nodeType": "Block",
              "src": "4643:53:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4f7074696d6973743a20736f756c20626f756e6420746f6b656e",
                        "id": 79765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4660:28:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        },
                        "value": "Optimist: soul bound token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        }
                      ],
                      "id": 79764,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "4653:6:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 79766,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4653:36:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79767,
                  "nodeType": "ExpressionStatement",
                  "src": "4653:36:197"
                }
              ]
            },
            "baseFunctions": [
              29957
            ],
            "documentation": {
              "id": 79756,
              "nodeType": "StructuredDocumentation",
              "src": "4521:61:197",
              "text": "@notice Disabled for the Optimist NFT (Soul Bound Token)."
            },
            "functionSelector": "095ea7b3",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "4596:7:197",
            "overrides": {
              "id": 79762,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4634:8:197"
            },
            "parameters": {
              "id": 79761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79758,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79769,
                  "src": "4604:7:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79757,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4604:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79760,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79769,
                  "src": "4613:7:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79759,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4613:7:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4603:18:197"
            },
            "returnParameters": {
              "id": 79763,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4643:0:197"
            },
            "scope": 79813,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 79783,
            "nodeType": "FunctionDefinition",
            "src": "4768:119:197",
            "nodes": [],
            "body": {
              "id": 79782,
              "nodeType": "Block",
              "src": "4834:53:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4f7074696d6973743a20736f756c20626f756e6420746f6b656e",
                        "id": 79779,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4851:28:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        },
                        "value": "Optimist: soul bound token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        }
                      ],
                      "id": 79778,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "4844:6:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 79780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4844:36:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79781,
                  "nodeType": "ExpressionStatement",
                  "src": "4844:36:197"
                }
              ]
            },
            "baseFunctions": [
              29992
            ],
            "documentation": {
              "id": 79770,
              "nodeType": "StructuredDocumentation",
              "src": "4702:61:197",
              "text": "@notice Disabled for the Optimist NFT (Soul Bound Token)."
            },
            "functionSelector": "a22cb465",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setApprovalForAll",
            "nameLocation": "4777:17:197",
            "overrides": {
              "id": 79776,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4825:8:197"
            },
            "parameters": {
              "id": 79775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79772,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79783,
                  "src": "4795:7:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79771,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4795:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79774,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79783,
                  "src": "4804:4:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 79773,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4804:4:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4794:15:197"
            },
            "returnParameters": {
              "id": 79777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4834:0:197"
            },
            "scope": 79813,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 79812,
            "nodeType": "FunctionDefinition",
            "src": "5071:189:197",
            "nodes": [],
            "body": {
              "id": 79811,
              "nodeType": "Block",
              "src": "5164:96:197",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 79807,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 79800,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 79795,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79786,
                            "src": "5182:5:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 79798,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5199:1:197",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 79797,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5191:7:197",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 79796,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5191:7:197",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 79799,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5191:10:197",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5182:19:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 79806,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 79801,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79788,
                            "src": "5205:3:197",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 79804,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5220:1:197",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 79803,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5212:7:197",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 79802,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5212:7:197",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 79805,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5212:10:197",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5205:17:197",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "5182:40:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d6973743a20736f756c20626f756e6420746f6b656e",
                        "id": 79808,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5224:28:197",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        },
                        "value": "Optimist: soul bound token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e1d66ef547b36cf8faa733cc8ac878e924c6c002006dd64402fd676d130d6981",
                          "typeString": "literal_string \"Optimist: soul bound token\""
                        }
                      ],
                      "id": 79794,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5174:7:197",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79809,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5174:79:197",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 79810,
                  "nodeType": "ExpressionStatement",
                  "src": "5174:79:197"
                }
              ]
            },
            "baseFunctions": [
              30555
            ],
            "documentation": {
              "id": 79784,
              "nodeType": "StructuredDocumentation",
              "src": "4893:173:197",
              "text": "@notice Prevents transfers of the Optimist NFT (Soul Bound Token).\n @param _from Address of the token sender.\n @param _to   Address of the token recipient."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "5080:20:197",
            "overrides": {
              "id": 79792,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5155:8:197"
            },
            "parameters": {
              "id": 79791,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79786,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "5109:5:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79812,
                  "src": "5101:13:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79785,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5101:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79788,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "5124:3:197",
                  "nodeType": "VariableDeclaration",
                  "scope": 79812,
                  "src": "5116:11:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 79787,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5116:7:197",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79790,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 79812,
                  "src": "5129:7:197",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79789,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5129:7:197",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5100:37:197"
            },
            "returnParameters": {
              "id": 79793,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5164:0:197"
            },
            "scope": 79813,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 79566,
              "name": "ERC721BurnableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 30756,
              "src": "594:25:197"
            },
            "id": 79567,
            "nodeType": "InheritanceSpecifier",
            "src": "594:25:197"
          },
          {
            "baseName": {
              "id": 79568,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 82951,
              "src": "621:6:197"
            },
            "id": 79569,
            "nodeType": "InheritanceSpecifier",
            "src": "621:6:197"
          }
        ],
        "canonicalName": "Optimist",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 79565,
          "nodeType": "StructuredDocumentation",
          "src": "443:130:197",
          "text": "@author Optimism Collective\n @author Gitcoin\n @title  Optimist\n @notice A Soul Bound Token for real humans only(tm)."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          79813,
          82951,
          30756,
          30572,
          30783,
          30706,
          31876,
          31888,
          31068,
          29680
        ],
        "name": "Optimist",
        "nameLocation": "582:8:197",
        "scope": 79814,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 197
}