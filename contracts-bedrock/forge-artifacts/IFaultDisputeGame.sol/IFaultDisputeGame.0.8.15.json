{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "parentIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "Claim",
          "name": "claim",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        }
      ],
      "name": "Move",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum GameStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "Resolved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ident",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_l2BlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partOffset",
          "type": "uint256"
        }
      ],
      "name": "addLocalData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_parentIndex",
          "type": "uint256"
        },
        {
          "internalType": "Claim",
          "name": "_claim",
          "type": "bytes32"
        }
      ],
      "name": "attack",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondManager",
      "outputs": [
        {
          "internalType": "contract IBondManager",
          "name": "bondManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "Timestamp",
          "name": "createdAt_",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_parentIndex",
          "type": "uint256"
        },
        {
          "internalType": "Claim",
          "name": "_claim",
          "type": "bytes32"
        }
      ],
      "name": "defend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "extraData_",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameData",
      "outputs": [
        {
          "internalType": "GameType",
          "name": "gameType_",
          "type": "uint8"
        },
        {
          "internalType": "Claim",
          "name": "rootClaim_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "extraData_",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameType",
      "outputs": [
        {
          "internalType": "GameType",
          "name": "gameType_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1BlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "l1BlockNumber_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Head",
      "outputs": [
        {
          "internalType": "Hash",
          "name": "l1Head_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2BlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "l2BlockNumber_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "enum GameStatus",
          "name": "status_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimIndex",
          "type": "uint256"
        }
      ],
      "name": "resolveClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootClaim",
      "outputs": [
        {
          "internalType": "Claim",
          "name": "rootClaim_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum GameStatus",
          "name": "status_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isAttack",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_stateData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "step",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addLocalData(uint256,uint256,uint256)": "f8f43ff6",
    "attack(uint256,bytes32)": "c55cd0c7",
    "bondManager()": "363cc427",
    "createdAt()": "cf09e0d0",
    "defend(uint256,bytes32)": "35fef567",
    "extraData()": "609d3334",
    "gameData()": "fa24f743",
    "gameType()": "bbdc02db",
    "initialize()": "8129fc1c",
    "l1BlockNumber()": "298c9005",
    "l1Head()": "6361506d",
    "l2BlockNumber()": "8b85902b",
    "resolve()": "2810e1d6",
    "resolveClaim(uint256)": "fdffbb28",
    "rootClaim()": "bcef3b55",
    "status()": "200d2ed2",
    "step(uint256,bool,bytes,bytes)": "d8cc1a3c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"Claim\",\"name\":\"claim\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum GameStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ident\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"}],\"name\":\"addLocalData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentIndex\",\"type\":\"uint256\"},{\"internalType\":\"Claim\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondManager\",\"outputs\":[{\"internalType\":\"contract IBondManager\",\"name\":\"bondManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"Timestamp\",\"name\":\"createdAt_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentIndex\",\"type\":\"uint256\"},{\"internalType\":\"Claim\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"defend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameData\",\"outputs\":[{\"internalType\":\"GameType\",\"name\":\"gameType_\",\"type\":\"uint8\"},{\"internalType\":\"Claim\",\"name\":\"rootClaim_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"internalType\":\"GameType\",\"name\":\"gameType_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l1BlockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Head\",\"outputs\":[{\"internalType\":\"Hash\",\"name\":\"l1Head_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l2BlockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"enum GameStatus\",\"name\":\"status_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"}],\"name\":\"resolveClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootClaim\",\"outputs\":[{\"internalType\":\"Claim\",\"name\":\"rootClaim_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum GameStatus\",\"name\":\"status_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAttack\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_stateData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"step\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Move(uint256,bytes32,address)\":{\"params\":{\"claim\":\"The claim being added\",\"claimant\":\"The address of the claimant\",\"parentIndex\":\"The index within the `claimData` array of the parent claim\"}}},\"kind\":\"dev\",\"methods\":{\"addLocalData(uint256,uint256,uint256)\":{\"params\":{\"_ident\":\"The local identifier of the data to post.\",\"_l2BlockNumber\":\"The L2 block number being disputed. This serves as the local context for the                       `PreimageOracle` key.\",\"_partOffset\":\"The offset of the data to post.\"}},\"attack(uint256,bytes32)\":{\"params\":{\"_claim\":\"The `Claim` at the relative attack position.\",\"_parentIndex\":\"Index of the `Claim` to attack in the `claimData` array.\"}},\"bondManager()\":{\"returns\":{\"bondManager_\":\"The address of the `BondManager` used.\"}},\"createdAt()\":{\"returns\":{\"createdAt_\":\"The timestamp that the DisputeGame contract was created at.\"}},\"defend(uint256,bytes32)\":{\"params\":{\"_claim\":\"The `Claim` at the relative defense position.\",\"_parentIndex\":\"Index of the claim to defend in the `claimData` array.\"}},\"extraData()\":{\"details\":\"`clones-with-immutable-args` argument #2\",\"returns\":{\"extraData_\":\"Any extra data supplied to the dispute game contract by the creator.\"}},\"gameData()\":{\"returns\":{\"extraData_\":\"Any extra data supplied to the dispute game contract by the creator.\",\"gameType_\":\"The type of proof system being used.\",\"rootClaim_\":\"The root claim of the DisputeGame.\"}},\"gameType()\":{\"details\":\"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.\",\"returns\":{\"gameType_\":\"The type of proof system being used.\"}},\"initialize()\":{\"details\":\"This function may only be called once.\"},\"resolve()\":{\"details\":\"May only be called if the `status` is `IN_PROGRESS`.\",\"returns\":{\"status_\":\"The status of the game after resolution.\"}},\"resolveClaim(uint256)\":{\"details\":\"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.\",\"params\":{\"_claimIndex\":\"The index of the subgame root claim to resolve.\"}},\"rootClaim()\":{\"details\":\"`clones-with-immutable-args` argument #1\",\"returns\":{\"rootClaim_\":\"The root claim of the DisputeGame.\"}},\"status()\":{\"returns\":{\"status_\":\"The current status of the game.\"}},\"step(uint256,bool,bytes,bytes)\":{\"details\":\"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.\",\"params\":{\"_claimIndex\":\"The index of the challenged claim within `claimData`.\",\"_isAttack\":\"Whether or not the step is an attack or a defense.\",\"_proof\":\"Proof to access memory nodes in the VM's merkle state tree.\",\"_stateData\":\"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.\"}}},\"title\":\"IFaultDisputeGame\",\"version\":1},\"userdoc\":{\"events\":{\"Move(uint256,bytes32,address)\":{\"notice\":\"Emitted when a new claim is added to the DAG by `claimant`\"},\"Resolved(uint8)\":{\"notice\":\"Emitted when the game is resolved.\"}},\"kind\":\"user\",\"methods\":{\"addLocalData(uint256,uint256,uint256)\":{\"notice\":\"Posts the requested local data to the VM's `PreimageOralce`.\"},\"attack(uint256,bytes32)\":{\"notice\":\"Attack a disagreed upon `Claim`.\"},\"bondManager()\":{\"notice\":\"Returns the address of the `BondManager` used.\"},\"createdAt()\":{\"notice\":\"Returns the timestamp that the DisputeGame contract was created at.\"},\"defend(uint256,bytes32)\":{\"notice\":\"Defend an agreed upon `Claim`.\"},\"extraData()\":{\"notice\":\"Getter for the extra data.\"},\"gameData()\":{\"notice\":\"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.\"},\"gameType()\":{\"notice\":\"Getter for the game type.\"},\"initialize()\":{\"notice\":\"Initializes the contract.\"},\"l1BlockNumber()\":{\"notice\":\"The l1BlockNumber that Cannon was ran from to generate the root claim.\"},\"l1Head()\":{\"notice\":\"An L1 block hash that contains the disputed output root, fetched from the         `BlockOracle` and verified by referencing the timestamp associated with the         first L2 Output Proposal in the `L2OutputOracle` that contains the disputed         L2 block number.\"},\"l2BlockNumber()\":{\"notice\":\"The l2BlockNumber of the disputed output root in the `L2OutputOracle`.\"},\"resolve()\":{\"notice\":\"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.\"},\"resolveClaim(uint256)\":{\"notice\":\"Resolves the subgame rooted at the given claim index.\"},\"rootClaim()\":{\"notice\":\"Getter for the root claim.\"},\"status()\":{\"notice\":\"Returns the current status of the game.\"},\"step(uint256,bool,bytes,bytes)\":{\"notice\":\"Perform an instruction step via an on-chain fault proof processor.\"}},\"notice\":\"The interface for a fault proof backed dispute game.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/dispute/interfaces/IFaultDisputeGame.sol\":\"IFaultDisputeGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/dispute/interfaces/IBondManager.sol\":{\"keccak256\":\"0x31db84bf7a701125719c0bdaed316c8ec3d32e774a70b9bac3045d3ed272da8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35ef3970234b9a2d85ca800c5257398fd92a6959b0daa088b402a493ebf18d88\",\"dweb:/ipfs/QmWr1ZCBjRJPTUWyNcDv3G2Jb72cYG2p4rQA55WuUPUjao\"]},\"src/dispute/interfaces/IDisputeGame.sol\":{\"keccak256\":\"0xd9cebb758474716504ba281e8c9e007ead5be676a835729c236afec47dfb1e7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fba945be8dbca576b6765fccc5fe8e31109562b0f2e9f943fc8b6c65fffc9829\",\"dweb:/ipfs/QmTWcBnmMhb3odqu2kkJbKZK7HNeiE7SvfD9tjKv8F4qWF\"]},\"src/dispute/interfaces/IFaultDisputeGame.sol\":{\"keccak256\":\"0xd114e9fe8a8e0b7f4643a8bd0eb39b62c421701505e07a84dee48e1f2b32c368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d64ff3d819ba64cff646afa16ef0384875a9e52eefe6aaf8b53f4890671dac9\",\"dweb:/ipfs/QmPqaJcQv6Zt78uWLc8UAD3v45jccZryfbDB6tXuuuNZwe\"]},\"src/dispute/interfaces/IInitializable.sol\":{\"keccak256\":\"0xf021b03c9e887e227102b037595e0917b76546e796bec7aa4fdced61090267ce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcfbad382815e37355b7cc318fa333b9b5b08223d4315951fd0881430ab8d3df\",\"dweb:/ipfs/QmRng31WWpYeApQUcXJXhSdqL797drdtBwvUD6D9giCyy2\"]},\"src/dispute/lib/LibClock.sol\":{\"keccak256\":\"0x4599b150b8a3d53a9db22698666320e62261765e3ad5b58105bc93097b1a4690\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0ab2d277fd4607510a5cafb91235a0fc3e47c3c0cdb45b2c185188ce888a1c5\",\"dweb:/ipfs/QmQ2bM3YmZCbN8uhKigSBh6j9VKrfxg61tjihwY7fdpARs\"]},\"src/dispute/lib/LibGameId.sol\":{\"keccak256\":\"0xa61b8562def4834607b733240e8eb4f924a75250df45852c9af1aea628f6b58d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2853075b45f634db083ea5f495f0cb9c28eb2401e2c18fd5fb7bce2500ed78ad\",\"dweb:/ipfs/QmaJpEg5z6tZ3niZY6N3f8AZ89FRnUVZJHNUDs66sq97j6\"]},\"src/dispute/lib/LibHashing.sol\":{\"keccak256\":\"0x5a072cd028094eee55acb84ed8d08d7422b1fb46658b7e043e916781530a383b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b67e54f1318f1fd67b28b16c6861a56e27217c26a12aaea5c446e2ec53143920\",\"dweb:/ipfs/QmVLSTP3PwXzRkR3A4qV9fjZhca9v8J1EnEYuVGUsSirAq\"]},\"src/dispute/lib/LibPosition.sol\":{\"keccak256\":\"0xf85659fff6f178903482bc12b9e908440dca33fbcda2258b1a665d1746a03c33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e51fb85a9f43c1b50c601d2e5cf343874ce3cb28d7823bea3f1ba5f23c28a9e\",\"dweb:/ipfs/QmcWQZsARwq6cfstzmCw8GnueH3QAkaPgdRpi7guQpKB6Q\"]},\"src/libraries/DisputeTypes.sol\":{\"keccak256\":\"0x23c8fbebc8a9fbe0b170ce45405cec5ec9bd71380d0e30f0a07144f420e9fdf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9fa6ad5d232e12fe7c575b86b00ff4164a0539bb017c0c7efea94d5a96013e05\",\"dweb:/ipfs/QmXoPqtjX4wJhikz7zjK7QQgjEB59ikxgPgM9wCBfJQbTE\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentIndex",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "Claim",
              "name": "claim",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimant",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Move",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "enum GameStatus",
              "name": "status",
              "type": "uint8",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Resolved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_ident",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_l2BlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_partOffset",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addLocalData"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_parentIndex",
              "type": "uint256"
            },
            {
              "internalType": "Claim",
              "name": "_claim",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attack"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "bondManager",
          "outputs": [
            {
              "internalType": "contract IBondManager",
              "name": "bondManager_",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "createdAt",
          "outputs": [
            {
              "internalType": "Timestamp",
              "name": "createdAt_",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_parentIndex",
              "type": "uint256"
            },
            {
              "internalType": "Claim",
              "name": "_claim",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "defend"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "extraData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "extraData_",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "gameData",
          "outputs": [
            {
              "internalType": "GameType",
              "name": "gameType_",
              "type": "uint8"
            },
            {
              "internalType": "Claim",
              "name": "rootClaim_",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "extraData_",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "gameType",
          "outputs": [
            {
              "internalType": "GameType",
              "name": "gameType_",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "l1BlockNumber",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "l1BlockNumber_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "l1Head",
          "outputs": [
            {
              "internalType": "Hash",
              "name": "l1Head_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "l2BlockNumber",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "l2BlockNumber_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "resolve",
          "outputs": [
            {
              "internalType": "enum GameStatus",
              "name": "status_",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_claimIndex",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "resolveClaim"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "rootClaim",
          "outputs": [
            {
              "internalType": "Claim",
              "name": "rootClaim_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "status",
          "outputs": [
            {
              "internalType": "enum GameStatus",
              "name": "status_",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_claimIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isAttack",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "_stateData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_proof",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "step"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addLocalData(uint256,uint256,uint256)": {
            "params": {
              "_ident": "The local identifier of the data to post.",
              "_l2BlockNumber": "The L2 block number being disputed. This serves as the local context for the                       `PreimageOracle` key.",
              "_partOffset": "The offset of the data to post."
            }
          },
          "attack(uint256,bytes32)": {
            "params": {
              "_claim": "The `Claim` at the relative attack position.",
              "_parentIndex": "Index of the `Claim` to attack in the `claimData` array."
            }
          },
          "bondManager()": {
            "returns": {
              "bondManager_": "The address of the `BondManager` used."
            }
          },
          "createdAt()": {
            "returns": {
              "createdAt_": "The timestamp that the DisputeGame contract was created at."
            }
          },
          "defend(uint256,bytes32)": {
            "params": {
              "_claim": "The `Claim` at the relative defense position.",
              "_parentIndex": "Index of the claim to defend in the `claimData` array."
            }
          },
          "extraData()": {
            "details": "`clones-with-immutable-args` argument #2",
            "returns": {
              "extraData_": "Any extra data supplied to the dispute game contract by the creator."
            }
          },
          "gameData()": {
            "returns": {
              "extraData_": "Any extra data supplied to the dispute game contract by the creator.",
              "gameType_": "The type of proof system being used.",
              "rootClaim_": "The root claim of the DisputeGame."
            }
          },
          "gameType()": {
            "details": "The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.",
            "returns": {
              "gameType_": "The type of proof system being used."
            }
          },
          "initialize()": {
            "details": "This function may only be called once."
          },
          "resolve()": {
            "details": "May only be called if the `status` is `IN_PROGRESS`.",
            "returns": {
              "status_": "The status of the game after resolution."
            }
          },
          "resolveClaim(uint256)": {
            "details": "This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.",
            "params": {
              "_claimIndex": "The index of the subgame root claim to resolve."
            }
          },
          "rootClaim()": {
            "details": "`clones-with-immutable-args` argument #1",
            "returns": {
              "rootClaim_": "The root claim of the DisputeGame."
            }
          },
          "status()": {
            "returns": {
              "status_": "The current status of the game."
            }
          },
          "step(uint256,bool,bytes,bytes)": {
            "details": "This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.",
            "params": {
              "_claimIndex": "The index of the challenged claim within `claimData`.",
              "_isAttack": "Whether or not the step is an attack or a defense.",
              "_proof": "Proof to access memory nodes in the VM's merkle state tree.",
              "_stateData": "The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addLocalData(uint256,uint256,uint256)": {
            "notice": "Posts the requested local data to the VM's `PreimageOralce`."
          },
          "attack(uint256,bytes32)": {
            "notice": "Attack a disagreed upon `Claim`."
          },
          "bondManager()": {
            "notice": "Returns the address of the `BondManager` used."
          },
          "createdAt()": {
            "notice": "Returns the timestamp that the DisputeGame contract was created at."
          },
          "defend(uint256,bytes32)": {
            "notice": "Defend an agreed upon `Claim`."
          },
          "extraData()": {
            "notice": "Getter for the extra data."
          },
          "gameData()": {
            "notice": "A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation."
          },
          "gameType()": {
            "notice": "Getter for the game type."
          },
          "initialize()": {
            "notice": "Initializes the contract."
          },
          "l1BlockNumber()": {
            "notice": "The l1BlockNumber that Cannon was ran from to generate the root claim."
          },
          "l1Head()": {
            "notice": "An L1 block hash that contains the disputed output root, fetched from the         `BlockOracle` and verified by referencing the timestamp associated with the         first L2 Output Proposal in the `L2OutputOracle` that contains the disputed         L2 block number."
          },
          "l2BlockNumber()": {
            "notice": "The l2BlockNumber of the disputed output root in the `L2OutputOracle`."
          },
          "resolve()": {
            "notice": "If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties."
          },
          "resolveClaim(uint256)": {
            "notice": "Resolves the subgame rooted at the given claim index."
          },
          "rootClaim()": {
            "notice": "Getter for the root claim."
          },
          "status()": {
            "notice": "Returns the current status of the game."
          },
          "step(uint256,bool,bytes,bytes)": {
            "notice": "Perform an instruction step via an on-chain fault proof processor."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/dispute/interfaces/IFaultDisputeGame.sol": "IFaultDisputeGame"
      },
      "libraries": {}
    },
    "sources": {
      "src/dispute/interfaces/IBondManager.sol": {
        "keccak256": "0x31db84bf7a701125719c0bdaed316c8ec3d32e774a70b9bac3045d3ed272da8b",
        "urls": [
          "bzz-raw://35ef3970234b9a2d85ca800c5257398fd92a6959b0daa088b402a493ebf18d88",
          "dweb:/ipfs/QmWr1ZCBjRJPTUWyNcDv3G2Jb72cYG2p4rQA55WuUPUjao"
        ],
        "license": "MIT"
      },
      "src/dispute/interfaces/IDisputeGame.sol": {
        "keccak256": "0xd9cebb758474716504ba281e8c9e007ead5be676a835729c236afec47dfb1e7f",
        "urls": [
          "bzz-raw://fba945be8dbca576b6765fccc5fe8e31109562b0f2e9f943fc8b6c65fffc9829",
          "dweb:/ipfs/QmTWcBnmMhb3odqu2kkJbKZK7HNeiE7SvfD9tjKv8F4qWF"
        ],
        "license": "MIT"
      },
      "src/dispute/interfaces/IFaultDisputeGame.sol": {
        "keccak256": "0xd114e9fe8a8e0b7f4643a8bd0eb39b62c421701505e07a84dee48e1f2b32c368",
        "urls": [
          "bzz-raw://1d64ff3d819ba64cff646afa16ef0384875a9e52eefe6aaf8b53f4890671dac9",
          "dweb:/ipfs/QmPqaJcQv6Zt78uWLc8UAD3v45jccZryfbDB6tXuuuNZwe"
        ],
        "license": "MIT"
      },
      "src/dispute/interfaces/IInitializable.sol": {
        "keccak256": "0xf021b03c9e887e227102b037595e0917b76546e796bec7aa4fdced61090267ce",
        "urls": [
          "bzz-raw://bcfbad382815e37355b7cc318fa333b9b5b08223d4315951fd0881430ab8d3df",
          "dweb:/ipfs/QmRng31WWpYeApQUcXJXhSdqL797drdtBwvUD6D9giCyy2"
        ],
        "license": "MIT"
      },
      "src/dispute/lib/LibClock.sol": {
        "keccak256": "0x4599b150b8a3d53a9db22698666320e62261765e3ad5b58105bc93097b1a4690",
        "urls": [
          "bzz-raw://a0ab2d277fd4607510a5cafb91235a0fc3e47c3c0cdb45b2c185188ce888a1c5",
          "dweb:/ipfs/QmQ2bM3YmZCbN8uhKigSBh6j9VKrfxg61tjihwY7fdpARs"
        ],
        "license": "MIT"
      },
      "src/dispute/lib/LibGameId.sol": {
        "keccak256": "0xa61b8562def4834607b733240e8eb4f924a75250df45852c9af1aea628f6b58d",
        "urls": [
          "bzz-raw://2853075b45f634db083ea5f495f0cb9c28eb2401e2c18fd5fb7bce2500ed78ad",
          "dweb:/ipfs/QmaJpEg5z6tZ3niZY6N3f8AZ89FRnUVZJHNUDs66sq97j6"
        ],
        "license": "MIT"
      },
      "src/dispute/lib/LibHashing.sol": {
        "keccak256": "0x5a072cd028094eee55acb84ed8d08d7422b1fb46658b7e043e916781530a383b",
        "urls": [
          "bzz-raw://b67e54f1318f1fd67b28b16c6861a56e27217c26a12aaea5c446e2ec53143920",
          "dweb:/ipfs/QmVLSTP3PwXzRkR3A4qV9fjZhca9v8J1EnEYuVGUsSirAq"
        ],
        "license": "MIT"
      },
      "src/dispute/lib/LibPosition.sol": {
        "keccak256": "0xf85659fff6f178903482bc12b9e908440dca33fbcda2258b1a665d1746a03c33",
        "urls": [
          "bzz-raw://0e51fb85a9f43c1b50c601d2e5cf343874ce3cb28d7823bea3f1ba5f23c28a9e",
          "dweb:/ipfs/QmcWQZsARwq6cfstzmCw8GnueH3QAkaPgdRpi7guQpKB6Q"
        ],
        "license": "MIT"
      },
      "src/libraries/DisputeTypes.sol": {
        "keccak256": "0x23c8fbebc8a9fbe0b170ce45405cec5ec9bd71380d0e30f0a07144f420e9fdf0",
        "urls": [
          "bzz-raw://9fa6ad5d232e12fe7c575b86b00ff4164a0539bb017c0c7efea94d5a96013e05",
          "dweb:/ipfs/QmXoPqtjX4wJhikz7zjK7QQgjEB59ikxgPgM9wCBfJQbTE"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "addLocalData(uint256,uint256,uint256)": {
        "notice": "Posts the requested local data to the VM's `PreimageOralce`."
      },
      "attack(uint256,bytes32)": {
        "notice": "Attack a disagreed upon `Claim`."
      },
      "bondManager()": {
        "notice": "Returns the address of the `BondManager` used."
      },
      "createdAt()": {
        "notice": "Returns the timestamp that the DisputeGame contract was created at."
      },
      "defend(uint256,bytes32)": {
        "notice": "Defend an agreed upon `Claim`."
      },
      "extraData()": {
        "notice": "Getter for the extra data."
      },
      "gameData()": {
        "notice": "A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation."
      },
      "gameType()": {
        "notice": "Getter for the game type."
      },
      "initialize()": {
        "notice": "Initializes the contract."
      },
      "l1BlockNumber()": {
        "notice": "The l1BlockNumber that Cannon was ran from to generate the root claim."
      },
      "l1Head()": {
        "notice": "An L1 block hash that contains the disputed output root, fetched from the         `BlockOracle` and verified by referencing the timestamp associated with the         first L2 Output Proposal in the `L2OutputOracle` that contains the disputed         L2 block number."
      },
      "l2BlockNumber()": {
        "notice": "The l2BlockNumber of the disputed output root in the `L2OutputOracle`."
      },
      "resolve()": {
        "notice": "If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties."
      },
      "resolveClaim(uint256)": {
        "notice": "Resolves the subgame rooted at the given claim index."
      },
      "rootClaim()": {
        "notice": "Getter for the root claim."
      },
      "status()": {
        "notice": "Returns the current status of the game."
      },
      "step(uint256,bool,bytes,bytes)": {
        "notice": "Perform an instruction step via an on-chain fault proof processor."
      }
    },
    "events": {
      "Move(uint256,bytes32,address)": {
        "notice": "Emitted when a new claim is added to the DAG by `claimant`"
      },
      "Resolved(uint8)": {
        "notice": "Emitted when the game is resolved."
      }
    },
    "notice": "The interface for a fault proof backed dispute game."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "addLocalData(uint256,uint256,uint256)": {
        "params": {
          "_ident": "The local identifier of the data to post.",
          "_l2BlockNumber": "The L2 block number being disputed. This serves as the local context for the                       `PreimageOracle` key.",
          "_partOffset": "The offset of the data to post."
        }
      },
      "attack(uint256,bytes32)": {
        "params": {
          "_claim": "The `Claim` at the relative attack position.",
          "_parentIndex": "Index of the `Claim` to attack in the `claimData` array."
        }
      },
      "bondManager()": {
        "returns": {
          "bondManager_": "The address of the `BondManager` used."
        }
      },
      "createdAt()": {
        "returns": {
          "createdAt_": "The timestamp that the DisputeGame contract was created at."
        }
      },
      "defend(uint256,bytes32)": {
        "params": {
          "_claim": "The `Claim` at the relative defense position.",
          "_parentIndex": "Index of the claim to defend in the `claimData` array."
        }
      },
      "extraData()": {
        "details": "`clones-with-immutable-args` argument #2",
        "returns": {
          "extraData_": "Any extra data supplied to the dispute game contract by the creator."
        }
      },
      "gameData()": {
        "returns": {
          "extraData_": "Any extra data supplied to the dispute game contract by the creator.",
          "gameType_": "The type of proof system being used.",
          "rootClaim_": "The root claim of the DisputeGame."
        }
      },
      "gameType()": {
        "details": "The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.",
        "returns": {
          "gameType_": "The type of proof system being used."
        }
      },
      "initialize()": {
        "details": "This function may only be called once."
      },
      "resolve()": {
        "details": "May only be called if the `status` is `IN_PROGRESS`.",
        "returns": {
          "status_": "The status of the game after resolution."
        }
      },
      "resolveClaim(uint256)": {
        "details": "This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.",
        "params": {
          "_claimIndex": "The index of the subgame root claim to resolve."
        }
      },
      "rootClaim()": {
        "details": "`clones-with-immutable-args` argument #1",
        "returns": {
          "rootClaim_": "The root claim of the DisputeGame."
        }
      },
      "status()": {
        "returns": {
          "status_": "The current status of the game."
        }
      },
      "step(uint256,bool,bytes,bytes)": {
        "details": "This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.",
        "params": {
          "_claimIndex": "The index of the challenged claim within `claimData`.",
          "_isAttack": "Whether or not the step is an attack or a defense.",
          "_proof": "Proof to access memory nodes in the VM's merkle state tree.",
          "_stateData": "The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM."
        }
      }
    },
    "events": {
      "Move(uint256,bytes32,address)": {
        "params": {
          "claim": "The claim being added",
          "claimant": "The address of the claimant",
          "parentIndex": "The index within the `claimData` array of the parent claim"
        }
      }
    },
    "title": "IFaultDisputeGame"
  },
  "ast": {
    "absolutePath": "src/dispute/interfaces/IFaultDisputeGame.sol",
    "id": 58388,
    "exportedSymbols": {
      "BondAmount": [
        60201
      ],
      "Claim": [
        60197
      ],
      "ClaimHash": [
        60199
      ],
      "Clock": [
        60209
      ],
      "Duration": [
        60205
      ],
      "GameId": [
        60207
      ],
      "GameStatus": [
        60219
      ],
      "GameType": [
        60213
      ],
      "GameTypes": [
        60245
      ],
      "Hash": [
        60195
      ],
      "IDisputeGame": [
        58159
      ],
      "IFaultDisputeGame": [
        58387
      ],
      "LibClock": [
        58439
      ],
      "LibGameId": [
        58481
      ],
      "LibHashing": [
        58503
      ],
      "LibPosition": [
        58661
      ],
      "Position": [
        60211
      ],
      "Timestamp": [
        60203
      ],
      "VMStatus": [
        60215
      ],
      "VMStatuses": [
        60279
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:5240:104",
    "nodes": [
      {
        "id": 58276,
        "nodeType": "PragmaDirective",
        "src": "32:24:104",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 58278,
        "nodeType": "ImportDirective",
        "src": "58:50:104",
        "nodes": [],
        "absolutePath": "src/dispute/interfaces/IDisputeGame.sol",
        "file": "./IDisputeGame.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58388,
        "sourceUnit": 58160,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58277,
              "name": "IDisputeGame",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 58159,
              "src": "67:12:104",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58279,
        "nodeType": "ImportDirective",
        "src": "110:40:104",
        "nodes": [],
        "absolutePath": "src/libraries/DisputeTypes.sol",
        "file": "src/libraries/DisputeTypes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58388,
        "sourceUnit": 60280,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 58387,
        "nodeType": "ContractDefinition",
        "src": "246:5025:104",
        "nodes": [
          {
            "id": 58296,
            "nodeType": "StructDefinition",
            "src": "432:145:104",
            "nodes": [],
            "canonicalName": "IFaultDisputeGame.ClaimData",
            "members": [
              {
                "constant": false,
                "id": 58284,
                "mutability": "mutable",
                "name": "parentIndex",
                "nameLocation": "466:11:104",
                "nodeType": "VariableDeclaration",
                "scope": 58296,
                "src": "459:18:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                },
                "typeName": {
                  "id": 58283,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "459:6:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58286,
                "mutability": "mutable",
                "name": "countered",
                "nameLocation": "492:9:104",
                "nodeType": "VariableDeclaration",
                "scope": 58296,
                "src": "487:14:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 58285,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "487:4:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58289,
                "mutability": "mutable",
                "name": "claim",
                "nameLocation": "517:5:104",
                "nodeType": "VariableDeclaration",
                "scope": 58296,
                "src": "511:11:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                  "typeString": "Claim"
                },
                "typeName": {
                  "id": 58288,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 58287,
                    "name": "Claim",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 60197,
                    "src": "511:5:104"
                  },
                  "referencedDeclaration": 60197,
                  "src": "511:5:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                    "typeString": "Claim"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58292,
                "mutability": "mutable",
                "name": "position",
                "nameLocation": "541:8:104",
                "nodeType": "VariableDeclaration",
                "scope": 58296,
                "src": "532:17:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_userDefinedValueType$_Position_$60211",
                  "typeString": "Position"
                },
                "typeName": {
                  "id": 58291,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 58290,
                    "name": "Position",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 60211,
                    "src": "532:8:104"
                  },
                  "referencedDeclaration": 60211,
                  "src": "532:8:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Position_$60211",
                    "typeString": "Position"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58295,
                "mutability": "mutable",
                "name": "clock",
                "nameLocation": "565:5:104",
                "nodeType": "VariableDeclaration",
                "scope": 58296,
                "src": "559:11:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_userDefinedValueType$_Clock_$60209",
                  "typeString": "Clock"
                },
                "typeName": {
                  "id": 58294,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 58293,
                    "name": "Clock",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 60209,
                    "src": "559:5:104"
                  },
                  "referencedDeclaration": 60209,
                  "src": "559:5:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Clock_$60209",
                    "typeString": "Clock"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ClaimData",
            "nameLocation": "439:9:104",
            "scope": 58387,
            "visibility": "public"
          },
          {
            "id": 58304,
            "nodeType": "StructDefinition",
            "src": "731:108:104",
            "nodes": [],
            "canonicalName": "IFaultDisputeGame.OutputProposal",
            "members": [
              {
                "constant": false,
                "id": 58298,
                "mutability": "mutable",
                "name": "index",
                "nameLocation": "771:5:104",
                "nodeType": "VariableDeclaration",
                "scope": 58304,
                "src": "763:13:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint128",
                  "typeString": "uint128"
                },
                "typeName": {
                  "id": 58297,
                  "name": "uint128",
                  "nodeType": "ElementaryTypeName",
                  "src": "763:7:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58300,
                "mutability": "mutable",
                "name": "l2BlockNumber",
                "nameLocation": "794:13:104",
                "nodeType": "VariableDeclaration",
                "scope": 58304,
                "src": "786:21:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint128",
                  "typeString": "uint128"
                },
                "typeName": {
                  "id": 58299,
                  "name": "uint128",
                  "nodeType": "ElementaryTypeName",
                  "src": "786:7:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58303,
                "mutability": "mutable",
                "name": "outputRoot",
                "nameLocation": "822:10:104",
                "nodeType": "VariableDeclaration",
                "scope": 58304,
                "src": "817:15:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_userDefinedValueType$_Hash_$60195",
                  "typeString": "Hash"
                },
                "typeName": {
                  "id": 58302,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 58301,
                    "name": "Hash",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 60195,
                    "src": "817:4:104"
                  },
                  "referencedDeclaration": 60195,
                  "src": "817:4:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Hash_$60195",
                    "typeString": "Hash"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "OutputProposal",
            "nameLocation": "738:14:104",
            "scope": 58387,
            "visibility": "public"
          },
          {
            "id": 58311,
            "nodeType": "StructDefinition",
            "src": "1529:96:104",
            "nodes": [],
            "canonicalName": "IFaultDisputeGame.OutputProposals",
            "members": [
              {
                "constant": false,
                "id": 58307,
                "mutability": "mutable",
                "name": "starting",
                "nameLocation": "1577:8:104",
                "nodeType": "VariableDeclaration",
                "scope": 58311,
                "src": "1562:23:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_OutputProposal_$58304_storage_ptr",
                  "typeString": "struct IFaultDisputeGame.OutputProposal"
                },
                "typeName": {
                  "id": 58306,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 58305,
                    "name": "OutputProposal",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 58304,
                    "src": "1562:14:104"
                  },
                  "referencedDeclaration": 58304,
                  "src": "1562:14:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_OutputProposal_$58304_storage_ptr",
                    "typeString": "struct IFaultDisputeGame.OutputProposal"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 58310,
                "mutability": "mutable",
                "name": "disputed",
                "nameLocation": "1610:8:104",
                "nodeType": "VariableDeclaration",
                "scope": 58311,
                "src": "1595:23:104",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_OutputProposal_$58304_storage_ptr",
                  "typeString": "struct IFaultDisputeGame.OutputProposal"
                },
                "typeName": {
                  "id": 58309,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 58308,
                    "name": "OutputProposal",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 58304,
                    "src": "1595:14:104"
                  },
                  "referencedDeclaration": 58304,
                  "src": "1595:14:104",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_OutputProposal_$58304_storage_ptr",
                    "typeString": "struct IFaultDisputeGame.OutputProposal"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "OutputProposals",
            "nameLocation": "1536:15:104",
            "scope": 58387,
            "visibility": "public"
          },
          {
            "id": 58321,
            "nodeType": "EventDefinition",
            "src": "1887:87:104",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 58312,
              "nodeType": "StructuredDocumentation",
              "src": "1631:251:104",
              "text": "@notice Emitted when a new claim is added to the DAG by `claimant`\n @param parentIndex The index within the `claimData` array of the parent claim\n @param claim The claim being added\n @param claimant The address of the claimant"
            },
            "eventSelector": "9b3245740ec3b155098a55be84957a4da13eaf7f14a8bc6f53126c0b9350f2be",
            "name": "Move",
            "nameLocation": "1893:4:104",
            "parameters": {
              "id": 58320,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58314,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "parentIndex",
                  "nameLocation": "1914:11:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58321,
                  "src": "1898:27:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58313,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1898:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58317,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claim",
                  "nameLocation": "1941:5:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58321,
                  "src": "1927:19:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                    "typeString": "Claim"
                  },
                  "typeName": {
                    "id": 58316,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58315,
                      "name": "Claim",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60197,
                      "src": "1927:5:104"
                    },
                    "referencedDeclaration": 60197,
                    "src": "1927:5:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                      "typeString": "Claim"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58319,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimant",
                  "nameLocation": "1964:8:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58321,
                  "src": "1948:24:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58318,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1948:7:104",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1897:76:104"
            }
          },
          {
            "id": 58330,
            "nodeType": "FunctionDefinition",
            "src": "2181:69:104",
            "nodes": [],
            "documentation": {
              "id": 58322,
              "nodeType": "StructuredDocumentation",
              "src": "1980:196:104",
              "text": "@notice Attack a disagreed upon `Claim`.\n @param _parentIndex Index of the `Claim` to attack in the `claimData` array.\n @param _claim The `Claim` at the relative attack position."
            },
            "functionSelector": "c55cd0c7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "attack",
            "nameLocation": "2190:6:104",
            "parameters": {
              "id": 58328,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58324,
                  "mutability": "mutable",
                  "name": "_parentIndex",
                  "nameLocation": "2205:12:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58330,
                  "src": "2197:20:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58323,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2197:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58327,
                  "mutability": "mutable",
                  "name": "_claim",
                  "nameLocation": "2225:6:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58330,
                  "src": "2219:12:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                    "typeString": "Claim"
                  },
                  "typeName": {
                    "id": 58326,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58325,
                      "name": "Claim",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60197,
                      "src": "2219:5:104"
                    },
                    "referencedDeclaration": 60197,
                    "src": "2219:5:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                      "typeString": "Claim"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2196:36:104"
            },
            "returnParameters": {
              "id": 58329,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2249:0:104"
            },
            "scope": 58387,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58339,
            "nodeType": "FunctionDefinition",
            "src": "2454:69:104",
            "nodes": [],
            "documentation": {
              "id": 58331,
              "nodeType": "StructuredDocumentation",
              "src": "2256:193:104",
              "text": "@notice Defend an agreed upon `Claim`.\n @param _parentIndex Index of the claim to defend in the `claimData` array.\n @param _claim The `Claim` at the relative defense position."
            },
            "functionSelector": "35fef567",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "defend",
            "nameLocation": "2463:6:104",
            "parameters": {
              "id": 58337,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58333,
                  "mutability": "mutable",
                  "name": "_parentIndex",
                  "nameLocation": "2478:12:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58339,
                  "src": "2470:20:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58332,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2470:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58336,
                  "mutability": "mutable",
                  "name": "_claim",
                  "nameLocation": "2498:6:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58339,
                  "src": "2492:12:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                    "typeString": "Claim"
                  },
                  "typeName": {
                    "id": 58335,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58334,
                      "name": "Claim",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60197,
                      "src": "2492:5:104"
                    },
                    "referencedDeclaration": 60197,
                    "src": "2492:5:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Claim_$60197",
                      "typeString": "Claim"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2469:36:104"
            },
            "returnParameters": {
              "id": 58338,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2522:0:104"
            },
            "scope": 58387,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58351,
            "nodeType": "FunctionDefinition",
            "src": "3452:110:104",
            "nodes": [],
            "documentation": {
              "id": 58340,
              "nodeType": "StructuredDocumentation",
              "src": "2529:918:104",
              "text": "@notice Perform an instruction step via an on-chain fault proof processor.\n @dev This function should point to a fault proof processor in order to execute\n      a step in the fault proof program on-chain. The interface of the fault proof\n      processor contract should adhere to the `IBigStepper` interface.\n @param _claimIndex The index of the challenged claim within `claimData`.\n @param _isAttack Whether or not the step is an attack or a defense.\n @param _stateData The stateData of the step is the preimage of the claim at the given\n        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if\n        the move is a defense. If the step is an attack on the first instruction, it is\n        the absolute prestate of the fault proof VM.\n @param _proof Proof to access memory nodes in the VM's merkle state tree."
            },
            "functionSelector": "d8cc1a3c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "step",
            "nameLocation": "3461:4:104",
            "parameters": {
              "id": 58349,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58342,
                  "mutability": "mutable",
                  "name": "_claimIndex",
                  "nameLocation": "3474:11:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58351,
                  "src": "3466:19:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58341,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3466:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58344,
                  "mutability": "mutable",
                  "name": "_isAttack",
                  "nameLocation": "3492:9:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58351,
                  "src": "3487:14:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58343,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3487:4:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58346,
                  "mutability": "mutable",
                  "name": "_stateData",
                  "nameLocation": "3518:10:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58351,
                  "src": "3503:25:104",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58345,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3503:5:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58348,
                  "mutability": "mutable",
                  "name": "_proof",
                  "nameLocation": "3545:6:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58351,
                  "src": "3530:21:104",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58347,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3530:5:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3465:87:104"
            },
            "returnParameters": {
              "id": 58350,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3561:0:104"
            },
            "scope": 58387,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58361,
            "nodeType": "FunctionDefinition",
            "src": "3927:92:104",
            "nodes": [],
            "documentation": {
              "id": 58352,
              "nodeType": "StructuredDocumentation",
              "src": "3568:354:104",
              "text": "@notice Posts the requested local data to the VM's `PreimageOralce`.\n @param _ident The local identifier of the data to post.\n @param _l2BlockNumber The L2 block number being disputed. This serves as the local context for the\n                       `PreimageOracle` key.\n @param _partOffset The offset of the data to post."
            },
            "functionSelector": "f8f43ff6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addLocalData",
            "nameLocation": "3936:12:104",
            "parameters": {
              "id": 58359,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58354,
                  "mutability": "mutable",
                  "name": "_ident",
                  "nameLocation": "3957:6:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58361,
                  "src": "3949:14:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58353,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3949:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58356,
                  "mutability": "mutable",
                  "name": "_l2BlockNumber",
                  "nameLocation": "3973:14:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58361,
                  "src": "3965:22:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58355,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3965:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58358,
                  "mutability": "mutable",
                  "name": "_partOffset",
                  "nameLocation": "3997:11:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58361,
                  "src": "3989:19:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58357,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3989:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3948:61:104"
            },
            "returnParameters": {
              "id": 58360,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4018:0:104"
            },
            "scope": 58387,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58367,
            "nodeType": "FunctionDefinition",
            "src": "4511:60:104",
            "nodes": [],
            "documentation": {
              "id": 58362,
              "nodeType": "StructuredDocumentation",
              "src": "4025:481:104",
              "text": "@notice Resolves the subgame rooted at the given claim index.\n @dev This function must be called bottom-up in the DAG\n      A subgame is a tree of claims that has a maximum depth of 1.\n      A subgame root claims is valid if, and only if, all of its child claims are invalid.\n      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.\n @param _claimIndex The index of the subgame root claim to resolve."
            },
            "functionSelector": "fdffbb28",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "resolveClaim",
            "nameLocation": "4520:12:104",
            "parameters": {
              "id": 58365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58364,
                  "mutability": "mutable",
                  "name": "_claimIndex",
                  "nameLocation": "4541:11:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58367,
                  "src": "4533:19:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58363,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4533:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4532:21:104"
            },
            "returnParameters": {
              "id": 58366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4570:0:104"
            },
            "scope": 58387,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58374,
            "nodeType": "FunctionDefinition",
            "src": "4884:55:104",
            "nodes": [],
            "documentation": {
              "id": 58368,
              "nodeType": "StructuredDocumentation",
              "src": "4577:302:104",
              "text": "@notice An L1 block hash that contains the disputed output root, fetched from the\n         `BlockOracle` and verified by referencing the timestamp associated with the\n         first L2 Output Proposal in the `L2OutputOracle` that contains the disputed\n         L2 block number."
            },
            "functionSelector": "6361506d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "l1Head",
            "nameLocation": "4893:6:104",
            "parameters": {
              "id": 58369,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4899:2:104"
            },
            "returnParameters": {
              "id": 58373,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58372,
                  "mutability": "mutable",
                  "name": "l1Head_",
                  "nameLocation": "4930:7:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58374,
                  "src": "4925:12:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Hash_$60195",
                    "typeString": "Hash"
                  },
                  "typeName": {
                    "id": 58371,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58370,
                      "name": "Hash",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 60195,
                      "src": "4925:4:104"
                    },
                    "referencedDeclaration": 60195,
                    "src": "4925:4:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Hash_$60195",
                      "typeString": "Hash"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4924:14:104"
            },
            "scope": 58387,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58380,
            "nodeType": "FunctionDefinition",
            "src": "5032:72:104",
            "nodes": [],
            "documentation": {
              "id": 58375,
              "nodeType": "StructuredDocumentation",
              "src": "4945:82:104",
              "text": "@notice The l2BlockNumber of the disputed output root in the `L2OutputOracle`."
            },
            "functionSelector": "8b85902b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "l2BlockNumber",
            "nameLocation": "5041:13:104",
            "parameters": {
              "id": 58376,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5054:2:104"
            },
            "returnParameters": {
              "id": 58379,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58378,
                  "mutability": "mutable",
                  "name": "l2BlockNumber_",
                  "nameLocation": "5088:14:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58380,
                  "src": "5080:22:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58377,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5080:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5079:24:104"
            },
            "scope": 58387,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58386,
            "nodeType": "FunctionDefinition",
            "src": "5197:72:104",
            "nodes": [],
            "documentation": {
              "id": 58381,
              "nodeType": "StructuredDocumentation",
              "src": "5110:82:104",
              "text": "@notice The l1BlockNumber that Cannon was ran from to generate the root claim."
            },
            "functionSelector": "298c9005",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "l1BlockNumber",
            "nameLocation": "5206:13:104",
            "parameters": {
              "id": 58382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5219:2:104"
            },
            "returnParameters": {
              "id": 58385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58384,
                  "mutability": "mutable",
                  "name": "l1BlockNumber_",
                  "nameLocation": "5253:14:104",
                  "nodeType": "VariableDeclaration",
                  "scope": 58386,
                  "src": "5245:22:104",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58383,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5245:7:104",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5244:24:104"
            },
            "scope": 58387,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 58281,
              "name": "IDisputeGame",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 58159,
              "src": "277:12:104"
            },
            "id": 58282,
            "nodeType": "InheritanceSpecifier",
            "src": "277:12:104"
          }
        ],
        "canonicalName": "IFaultDisputeGame",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 58280,
          "nodeType": "StructuredDocumentation",
          "src": "152:94:104",
          "text": "@title IFaultDisputeGame\n @notice The interface for a fault proof backed dispute game."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          58387,
          58159,
          58395
        ],
        "name": "IFaultDisputeGame",
        "nameLocation": "256:17:104",
        "scope": 58388,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 104
}