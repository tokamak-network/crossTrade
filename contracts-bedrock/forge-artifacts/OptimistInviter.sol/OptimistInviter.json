{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inviteGranter",
          "type": "address"
        },
        {
          "internalType": "contract AttestationStation",
          "name": "_attestationStation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "InviteClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ATTESTATION_STATION",
      "outputs": [
        {
          "internalType": "contract AttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAN_INVITE_ATTESTATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIMABLE_INVITE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INVITE_GRANTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_COMMITMENT_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OptimistInviter.ClaimableInvite",
          "name": "_claimableInvite",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "commitInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitmentTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "inviteCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_inviteCount",
          "type": "uint256"
        }
      ],
      "name": "setInviteCounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101206040523480156200001257600080fd5b5060405162001de038038062001de0833981016040819052620000359162000076565b6001608052600060a052600260c0526001600160a01b0391821660e0521661010052620000b5565b6001600160a01b03811681146200007357600080fd5b50565b600080604083850312156200008a57600080fd5b825162000097816200005d565b6020840151909250620000aa816200005d565b809150509250929050565b60805160a05160c05160e05161010051611cd26200010e60003960008181610257015281816106510152610c0201526000818160f401526103b401526000610da101526000610d7801526000610d4f0152611cd26000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916db22f1161008c578063db083d7111610066578063db083d7114610252578063de2dd22114610279578063eccec5a814610299578063f62d1888146102d557600080fd5b8063916db22f146101e4578063b4245d731461020b578063c4fc453d1461022b57600080fd5b806350b414e6116100c857806350b414e61461016857806350eedbc21461017e57806354fd4d50146101915780635fda04c7146101a657600080fd5b806314b47241146100ef578063187e3cd11461014057806325b27a3d14610155575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015361014e36600461165f565b6102e8565b005b610153610163366004611678565b61039c565b610170603c81565b604051908152602001610137565b61015361018c3660046117df565b6106bf565b610199610d48565b60405161013791906118f5565b6101d46101b4366004611908565b603660209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610137565b6101707f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081565b61017061021936600461165f565b60356020526000908152604090205481565b6101707f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b610170610287366004611932565b60376020526000908152604090205481565b6101996040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101536102e336600461194d565b610deb565b60008181526035602052604090205415610389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c726560448201527f616479206d61646500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000908152603560205260409020429055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4f7074696d697374496e76697465723a206f6e6c7920696e766974652067726160448201527f6e7465722063616e206772616e7420696e7669746573000000000000000000006064820152608401610380565b8160008167ffffffffffffffff81111561047d5761047d61171c565b6040519080825280602002602001820160405280156104ca57816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161049b5790505b50905060005b828110156106135783603760008888858181106104ef576104ef611996565b90506020020160208101906105049190611932565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604051806060016040528087878481811061055f5761055f611996565b90506020020160208101906105749190611932565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081526020016040518060400160405280600481526020017f747275650000000000000000000000000000000000000000000000000000000081525081525082828151811061060057610600611996565b60209081029190910101526001016104d0565b506040517f5eb5ea1000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906106869084906004016119c5565b600060405180830381600087803b1580156106a057600080fd5b505af11580156106b4573d6000803e3d6000fd5b505050505050505050565b60006035600085846040516020016106d8929190611a78565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4f7074696d697374496e76697465723a20636c61696d657220616e642073696760448201527f6e61747572652068617665206e6f74206265656e20636f6d6d6974746564207960648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a401610380565b426107c1603c83611ad6565b111561084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d60448201527f656e7420706572696f6420686173206e6f7420656c61707365642079657400006064820152608401610380565b60006108d27f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce6108826020870187611932565b6040805160208181019490945273ffffffffffffffffffffffffffffffffffffffff9092169082015290860135606082015260800160405160208183030381529060405280519060200120610fb5565b90506108eb6108e46020860186611932565b8285611024565b610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696d697374496e76697465723a20696e76616c6964207369676e61747560448201527f72650000000000000000000000000000000000000000000000000000000000006064820152608401610380565b603660006109886020870187611932565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812087840135825290925290205460ff1615610a4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4f7074696d697374496e76697465723a206e6f6e63652068617320616c72656160448201527f6479206265656e207573656400000000000000000000000000000000000000006064820152608401610380565b600160366000610a626020880188611932565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812088840180358352935290812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092556037908290610ad69088611932565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696d697374496e76697465723a2069737375657220686173206e6f206960448201527f6e766974657300000000000000000000000000000000000000000000000000006064820152608401610380565b60376000610baf6020870187611932565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604090910160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190557f0000000000000000000000000000000000000000000000000000000000000000169063702b9dee9087907f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e7669746500000090610c5990890189611932565b6040805173ffffffffffffffffffffffffffffffffffffffff9092166020830152016040516020818303038152906040526040518463ffffffff1660e01b8152600401610ca893929190611aee565b600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff86169050610cff6020860186611932565b73ffffffffffffffffffffffffffffffffffffffff167f745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be47560405160405180910390a35050505050565b6060610d737f00000000000000000000000000000000000000000000000000000000000000006111f3565b610d9c7f00000000000000000000000000000000000000000000000000000000000000006111f3565b610dc57f00000000000000000000000000000000000000000000000000000000000000006111f3565b604051602001610dd793929190611b2c565b604051602081830303815290604052905090565b600054610100900460ff1615808015610e0b5750600054600160ff909116105b80610e255750303b158015610e25575060005460ff166001145b610eb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610380565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610f0f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610f4e826040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250611330565b8015610fb157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600061101e610fc26113d1565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006110338585611451565b9092509050600081600481111561104c5761104c611ba2565b14801561108457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611094576001925050506111ec565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016110c9929190611bd1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516111529190611bea565b600060405180830381855afa9150503d806000811461118d576040519150601f19603f3d011682016040523d82523d6000602084013e611192565b606091505b50915091508180156111a5575080516020145b80156111e5575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906111e39083016020908101908401611c06565b145b9450505050505b9392505050565b60608160000361123657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611260578061124a81611c1f565b91506112599050600a83611c86565b915061123a565b60008167ffffffffffffffff81111561127b5761127b61171c565b6040519080825280601f01601f1916602001820160405280156112a5576020820181803683370190505b5090505b8415611328576112ba600183611c9a565b91506112c7600a86611cb1565b6112d2906030611ad6565b60f81b8183815181106112e7576112e7611996565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611321600a86611c86565b94506112a9565b949350505050565b600054610100900460ff166113c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610380565b610fb18282611496565b600061144c7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61140060015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b60008082516041036114875760208301516040840151606085015160001a61147b87828585611547565b9450945050505061148f565b506000905060025b9250929050565b600054610100900460ff1661152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610380565b815160209283012081519190920120600191909155600255565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561157e5750600090506003611656565b8460ff16601b1415801561159657508460ff16601c14155b156115a75750600090506004611656565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156115fb573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661164f57600060019250925050611656565b9150600090505b94509492505050565b60006020828403121561167157600080fd5b5035919050565b60008060006040848603121561168d57600080fd5b833567ffffffffffffffff808211156116a557600080fd5b818601915086601f8301126116b957600080fd5b8135818111156116c857600080fd5b8760208260051b85010111156116dd57600080fd5b6020928301989097509590910135949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461171757600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156117665761176661171c565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156117ac576117ac61171c565b816040528093508581528686860111156117c557600080fd5b858560208301376000602087830101525050509392505050565b600080600083850360808112156117f557600080fd5b6117fe856116f3565b935060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561183057600080fd5b50602084019150606084013567ffffffffffffffff81111561185157600080fd5b8401601f8101861361186257600080fd5b6118718682356020840161174b565b9150509250925092565b60005b8381101561189657818101518382015260200161187e565b838111156118a5576000848401525b50505050565b600081518084526118c381602086016020860161187b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111ec60208301846118ab565b6000806040838503121561191b57600080fd5b611924836116f3565b946020939093013593505050565b60006020828403121561194457600080fd5b6111ec826116f3565b60006020828403121561195f57600080fd5b813567ffffffffffffffff81111561197657600080fd5b8201601f8101841361198757600080fd5b6113288482356020840161174b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611a6a578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff16845287810151888501528601516060878501819052611a56818601836118ab565b9689019694505050908601906001016119ec565b509098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061132860408301846118ab565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611ae957611ae9611aa7565b500190565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611b2360608301846118ab565b95945050505050565b60008451611b3e81846020890161187b565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611b7a816001850160208a0161187b565b60019201918201528351611b9581600284016020880161187b565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82815260406020820152600061132860408301846118ab565b60008251611bfc81846020870161187b565b9190910192915050565b600060208284031215611c1857600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c5057611c50611aa7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611c9557611c95611c57565b500490565b600082821015611cac57611cac611aa7565b500390565b600082611cc057611cc0611c57565b50069056fea164736f6c634300080f000a",
    "sourceMap": "2109:10885:199:-:0;;;5379:191;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5462:1;732:22:213;;5465:1:199;764:22:213;;5468:1:199;796:22:213;;-1:-1:-1;;;;;5481:31:199;;::::1;;::::0;5522:41:::1;;::::0;2109:10885;;14:131:302;-1:-1:-1;;;;;89:31:302;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:413::-;257:6;265;318:2;306:9;297:7;293:23;289:32;286:52;;;334:1;331;324:12;286:52;366:9;360:16;385:31;410:5;385:31;:::i;:::-;485:2;470:18;;464:25;435:5;;-1:-1:-1;498:33:302;464:25;498:33;:::i;:::-;550:7;540:17;;;150:413;;;;;:::o;:::-;2109:10885:199;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916db22f1161008c578063db083d7111610066578063db083d7114610252578063de2dd22114610279578063eccec5a814610299578063f62d1888146102d557600080fd5b8063916db22f146101e4578063b4245d731461020b578063c4fc453d1461022b57600080fd5b806350b414e6116100c857806350b414e61461016857806350eedbc21461017e57806354fd4d50146101915780635fda04c7146101a657600080fd5b806314b47241146100ef578063187e3cd11461014057806325b27a3d14610155575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015361014e36600461165f565b6102e8565b005b610153610163366004611678565b61039c565b610170603c81565b604051908152602001610137565b61015361018c3660046117df565b6106bf565b610199610d48565b60405161013791906118f5565b6101d46101b4366004611908565b603660209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610137565b6101707f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081565b61017061021936600461165f565b60356020526000908152604090205481565b6101707f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b610170610287366004611932565b60376020526000908152604090205481565b6101996040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101536102e336600461194d565b610deb565b60008181526035602052604090205415610389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c726560448201527f616479206d61646500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000908152603560205260409020429055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4f7074696d697374496e76697465723a206f6e6c7920696e766974652067726160448201527f6e7465722063616e206772616e7420696e7669746573000000000000000000006064820152608401610380565b8160008167ffffffffffffffff81111561047d5761047d61171c565b6040519080825280602002602001820160405280156104ca57816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161049b5790505b50905060005b828110156106135783603760008888858181106104ef576104ef611996565b90506020020160208101906105049190611932565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604051806060016040528087878481811061055f5761055f611996565b90506020020160208101906105749190611932565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081526020016040518060400160405280600481526020017f747275650000000000000000000000000000000000000000000000000000000081525081525082828151811061060057610600611996565b60209081029190910101526001016104d0565b506040517f5eb5ea1000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906106869084906004016119c5565b600060405180830381600087803b1580156106a057600080fd5b505af11580156106b4573d6000803e3d6000fd5b505050505050505050565b60006035600085846040516020016106d8929190611a78565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4f7074696d697374496e76697465723a20636c61696d657220616e642073696760448201527f6e61747572652068617665206e6f74206265656e20636f6d6d6974746564207960648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a401610380565b426107c1603c83611ad6565b111561084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d60448201527f656e7420706572696f6420686173206e6f7420656c61707365642079657400006064820152608401610380565b60006108d27f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce6108826020870187611932565b6040805160208181019490945273ffffffffffffffffffffffffffffffffffffffff9092169082015290860135606082015260800160405160208183030381529060405280519060200120610fb5565b90506108eb6108e46020860186611932565b8285611024565b610977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696d697374496e76697465723a20696e76616c6964207369676e61747560448201527f72650000000000000000000000000000000000000000000000000000000000006064820152608401610380565b603660006109886020870187611932565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812087840135825290925290205460ff1615610a4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4f7074696d697374496e76697465723a206e6f6e63652068617320616c72656160448201527f6479206265656e207573656400000000000000000000000000000000000000006064820152608401610380565b600160366000610a626020880188611932565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812088840180358352935290812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092556037908290610ad69088611932565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696d697374496e76697465723a2069737375657220686173206e6f206960448201527f6e766974657300000000000000000000000000000000000000000000000000006064820152608401610380565b60376000610baf6020870187611932565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604090910160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190557f0000000000000000000000000000000000000000000000000000000000000000169063702b9dee9087907f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e7669746500000090610c5990890189611932565b6040805173ffffffffffffffffffffffffffffffffffffffff9092166020830152016040516020818303038152906040526040518463ffffffff1660e01b8152600401610ca893929190611aee565b600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff86169050610cff6020860186611932565b73ffffffffffffffffffffffffffffffffffffffff167f745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be47560405160405180910390a35050505050565b6060610d737f00000000000000000000000000000000000000000000000000000000000000006111f3565b610d9c7f00000000000000000000000000000000000000000000000000000000000000006111f3565b610dc57f00000000000000000000000000000000000000000000000000000000000000006111f3565b604051602001610dd793929190611b2c565b604051602081830303815290604052905090565b600054610100900460ff1615808015610e0b5750600054600160ff909116105b80610e255750303b158015610e25575060005460ff166001145b610eb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610380565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610f0f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610f4e826040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250611330565b8015610fb157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600061101e610fc26113d1565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006110338585611451565b9092509050600081600481111561104c5761104c611ba2565b14801561108457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611094576001925050506111ec565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016110c9929190611bd1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516111529190611bea565b600060405180830381855afa9150503d806000811461118d576040519150601f19603f3d011682016040523d82523d6000602084013e611192565b606091505b50915091508180156111a5575080516020145b80156111e5575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906111e39083016020908101908401611c06565b145b9450505050505b9392505050565b60608160000361123657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611260578061124a81611c1f565b91506112599050600a83611c86565b915061123a565b60008167ffffffffffffffff81111561127b5761127b61171c565b6040519080825280601f01601f1916602001820160405280156112a5576020820181803683370190505b5090505b8415611328576112ba600183611c9a565b91506112c7600a86611cb1565b6112d2906030611ad6565b60f81b8183815181106112e7576112e7611996565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611321600a86611c86565b94506112a9565b949350505050565b600054610100900460ff166113c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610380565b610fb18282611496565b600061144c7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61140060015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b60008082516041036114875760208301516040840151606085015160001a61147b87828585611547565b9450945050505061148f565b506000905060025b9250929050565b600054610100900460ff1661152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610380565b815160209283012081519190920120600191909155600255565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561157e5750600090506003611656565b8460ff16601b1415801561159657508460ff16601c14155b156115a75750600090506004611656565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156115fb573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661164f57600060019250925050611656565b9150600090505b94509492505050565b60006020828403121561167157600080fd5b5035919050565b60008060006040848603121561168d57600080fd5b833567ffffffffffffffff808211156116a557600080fd5b818601915086601f8301126116b957600080fd5b8135818111156116c857600080fd5b8760208260051b85010111156116dd57600080fd5b6020928301989097509590910135949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461171757600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156117665761176661171c565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156117ac576117ac61171c565b816040528093508581528686860111156117c557600080fd5b858560208301376000602087830101525050509392505050565b600080600083850360808112156117f557600080fd5b6117fe856116f3565b935060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561183057600080fd5b50602084019150606084013567ffffffffffffffff81111561185157600080fd5b8401601f8101861361186257600080fd5b6118718682356020840161174b565b9150509250925092565b60005b8381101561189657818101518382015260200161187e565b838111156118a5576000848401525b50505050565b600081518084526118c381602086016020860161187b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111ec60208301846118ab565b6000806040838503121561191b57600080fd5b611924836116f3565b946020939093013593505050565b60006020828403121561194457600080fd5b6111ec826116f3565b60006020828403121561195f57600080fd5b813567ffffffffffffffff81111561197657600080fd5b8201601f8101841361198757600080fd5b6113288482356020840161174b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611a6a578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff16845287810151888501528601516060878501819052611a56818601836118ab565b9689019694505050908601906001016119ec565b509098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061132860408301846118ab565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611ae957611ae9611aa7565b500190565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611b2360608301846118ab565b95945050505050565b60008451611b3e81846020890161187b565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611b7a816001850160208a0161187b565b60019201918201528351611b9581600284016020880161187b565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82815260406020820152600061132860408301846118ab565b60008251611bfc81846020870161187b565b9190910192915050565b600060208284031215611c1857600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c5057611c50611aa7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611c9557611c95611c57565b500490565b600082821015611cac57611cac611aa7565b500390565b600082611cc057611cc0611c57565b50069056fea164736f6c634300080f000a",
    "sourceMap": "2109:10885:199:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3265:39;;;;;;;;190:42:302;178:55;;;160:74;;148:2;133:18;3265:39:199;;;;;;;;8530:500;;;;;;:::i;:::-;;:::i;:::-;;6399:985;;;;;;:::i;:::-;;:::i;4012:50::-;;4060:2;4012:50;;;;;1270:25:302;;;1258:2;1243:18;4012:50:199;1124:177:302;10100:2892:199;;;;;;:::i;:::-;;:::i;942:328:213:-;;;:::i;:::-;;;;;;;:::i;5014:62:199:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4378:14:302;;4371:22;4353:41;;4341:2;4326:18;5014:62:199;4213:187:302;3114:83:199;;3167:30;3114:83;;4867:55;;;;;;:::i;:::-;;;;;;;;;;;;;;2903:110;;2955:58;2903:110;;3371:55;;;;;5151:47;;;;;;:::i;:::-;;;;;;;;;;;;;;2787;;;;;;;;;;;;;;;;;;;;;6059:113;;;;;;:::i;:::-;;:::i;8530:500::-;8878:33;;;;:20;:33;;;;;;:38;8870:91;;;;;;;5694:2:302;8870:91:199;;;5676:21:302;5733:2;5713:18;;;5706:30;5772:34;5752:18;;;5745:62;5843:10;5823:18;;;5816:38;5871:19;;8870:91:199;;;;;;;;;8972:33;;;;:20;:33;;;;;9008:15;8972:51;;8530:500::o;6399:985::-;6550:10;:28;6564:14;6550:28;;6542:95;;;;;;;6103:2:302;6542:95:199;;;6085:21:302;6142:2;6122:18;;;6115:30;6181:34;6161:18;;;6154:62;6252:24;6232:18;;;6225:52;6294:19;;6542:95:199;5901:418:302;6542:95:199;6665:9;6648:14;6665:9;6751:48;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;6751:48:199;;;;;;;;;;;;;;;;6692:107;;6815:9;6810:517;6830:6;6826:1;:10;6810:517;;;6942:12;6913;:26;6926:9;;6936:1;6926:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;6913:26;;;;;;;;;;;;;;;:41;;;;7084:172;;;;;;;;7144:9;;7154:1;7144:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;7084:172;;;;;;3167:30;7084:172;;;;7228:13;;;;;;;;;;;;;;;;;7084:172;;;7066:12;7079:1;7066:15;;;;;;;;:::i;:::-;;;;;;;;;;:190;7299:3;;6810:517;;;-1:-1:-1;7337:40:199;;;;;:26;:19;:26;;;;:40;;7364:12;;7337:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6483:901;;6399:985;;;:::o;10100:2892::-;10224:27;10254:20;:65;10296:8;10306:10;10285:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10275:43;;;;;;10254:65;;;;;;;;;;;;10224:95;;10428:1;10406:19;:23;10398:102;;;;;;;8299:2:302;10398:102:199;;;8281:21:302;8338:2;8318:18;;;8311:30;8377:34;8357:18;;;8350:62;8448:34;8428:18;;;8421:62;8520:4;8499:19;;;8492:33;8542:19;;10398:102:199;8097:470:302;10398:102:199;10665:15;10618:43;4060:2;10618:19;:43;:::i;:::-;:62;;10597:171;;;;;;;9096:2:302;10597:171:199;;;9078:21:302;9135:2;9115:18;;;9108:30;9174:34;9154:18;;;9147:62;9245:32;9225:18;;;9218:60;9295:19;;10597:171:199;8894:426:302;10597:171:199;10858:14;10875:137;2955:58;10953:23;;;;:16;:23;:::i;:::-;10915:86;;;10978:22;10915:86;;;9527:25:302;;;;9600:42;9588:55;;;9568:18;;;9561:83;10978:22:199;;;;9660:18:302;;;9653:34;9500:18;;10915:86:199;;;;;;;;;;;;10905:97;;;;;;10875:16;:137::i;:::-;10858:154;-1:-1:-1;11402:81:199;11439:23;;;;:16;:23;:::i;:::-;11464:6;11472:10;11402:36;:81::i;:::-;11381:162;;;;;;;9900:2:302;11381:162:199;;;9882:21:302;9939:2;9919:18;;;9912:30;9978:34;9958:18;;;9951:62;10049:4;10029:18;;;10022:32;10071:19;;11381:162:199;9698:398:302;11381:162:199;11871:10;:35;11882:23;;;;:16;:23;:::i;:::-;11871:35;;;;;;;;;;;;;;;;-1:-1:-1;11871:35:199;;;11907:22;;;;11871:59;;;;;;;;;;:68;11850:159;;;;;;;10303:2:302;11850:159:199;;;10285:21:302;10342:2;10322:18;;;10315:30;10381:34;10361:18;;;10354:62;10452:14;10432:18;;;10425:42;10484:19;;11850:159:199;10101:408:302;11850:159:199;12161:4;12099:10;:35;12110:23;;;;:16;:23;:::i;:::-;12099:35;;;;;;;;;;;;;;;;-1:-1:-1;12099:35:199;;;12135:22;;;;;12099:59;;;;;;;:66;;;;;;;;;;;;;;12279:12;;-1:-1:-1;;12292:23:199;;12135:22;12292:23;:::i;:::-;12279:37;;;;;;;;;;;;;;;;:41;12271:92;;;;;;;10716:2:302;12271:92:199;;;10698:21:302;10755:2;10735:18;;;10728:30;10794:34;10774:18;;;10767:62;10865:8;10845:18;;;10838:36;10891:19;;12271:92:199;10514:402:302;12271:92:199;12520:12;:37;12533:23;;;;:16;:23;:::i;:::-;12520:37;;;;;;;;;;;;;;;;;;-1:-1:-1;12520:37:199;12518:39;;;;;;12737:19;:26;;;;12777:8;;388:40:200;;12887:23:199;;;;:16;:23;:::i;:::-;12876:35;;;190:42:302;178:55;;;12876:35:199;;;160:74:302;133:18;12876:35:199;;;;;;;;;;;;12737:184;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;12937:48:199;;;;-1:-1:-1;12951:23:199;;;;;;:::i;:::-;12937:48;;;;;;;;;;;;10214:2778;;10100:2892;;;:::o;942:328:213:-;982:13;1068:31;1085:13;1068:16;:31::i;:::-;1138;1155:13;1138:16;:31::i;:::-;1208;1225:13;1208:16;:31::i;:::-;1034:219;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1007:256;;942:328;:::o;6059:113:199:-;3111:19:20;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:20;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:20;1476:19:26;:23;;;3219:66:20;;-1:-1:-1;3268:12:20;;;;;:17;3219:66;3157:201;;;;;;;12502:2:302;3157:201:20;;;12484:21:302;12541:2;12521:18;;;12514:30;12580:34;12560:18;;;12553:62;12651:16;12631:18;;;12624:44;12685:19;;3157:201:20;12300:410:302;3157:201:20;3368:12;:16;;;;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;;;;;;;3394:65;6129:36:199::1;6143:5;6150:14;;;;;;;;;;;;;;;;::::0;6129:13:::1;:36::i;:::-;3483:14:20::0;3479:99;;;3529:5;3513:21;;;;;;3553:14;;-1:-1:-1;12867:36:302;;3553:14:20;;12855:2:302;12840:18;3553:14:20;;;;;;;3479:99;3101:483;6059:113:199;:::o;3890:176:30:-;3967:7;3993:66;4026:20;:18;:20::i;:::-;4048:10;8710:57:29;;15308:66:302;8710:57:29;;;15296:79:302;15391:11;;;15384:27;;;15427:12;;;15420:28;;;8674:7:29;;15464:12:302;;8710:57:29;;;;;;;;;;;;8700:68;;;;;;8693:75;;8581:194;;;;;3993:66:30;3986:73;3890:176;-1:-1:-1;;3890:176:30:o;1039:667:57:-;1175:4;1192:17;1211:24;1239:33;1256:4;1262:9;1239:16;:33::i;:::-;1191:81;;-1:-1:-1;1191:81:57;-1:-1:-1;1295:26:57;1286:5;:35;;;;;;;;:::i;:::-;;:58;;;;;1338:6;1325:19;;:9;:19;;;1286:58;1282:100;;;1367:4;1360:11;;;;;;1282:100;1393:12;1407:19;1430:6;:17;;1484:34;;;1520:4;1526:9;1461:75;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1430:116;;;;1461:75;1430:116;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1392:154;;;;1564:7;:42;;;;;1587:6;:13;1604:2;1587:19;1564:42;:134;;;;-1:-1:-1;1622:29:57;;1663:34;;1622:29;;;;;;;;;;;;:::i;:::-;:76;1564:134;1556:143;;;;;;1039:667;;;;;;:::o;392:703:55:-;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:55;;;;;;;;;;;;;;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:55;;-1:-1:-1;837:2:55;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:55;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:55;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;1036:11:55;1045:2;1036:11;;:::i;:::-;;;908:150;;;1081:6;392:703;-1:-1:-1;;;;392:703:55:o;2306:147:30:-;4910:13:20;;;;;;;4902:69;;;;;;;14828:2:302;4902:69:20;;;14810:21:302;14867:2;14847:18;;;14840:30;14906:34;14886:18;;;14879:62;14977:13;14957:18;;;14950:41;15008:19;;4902:69:20;14626:407:302;4902:69:20;2408:38:30::1;2432:4;2438:7;2408:23;:38::i;2842:160::-:0;2895:7;2921:74;1595:95;2955:17;4386:12;;;4302:103;2955:17;4731:15;;3184:73;;;;;;15746:25:302;;;15787:18;;;15780:34;;;15830:18;;;15823:34;;;3228:13:30;15873:18:302;;;15866:34;3251:4:30;15916:19:302;;;15909:84;3148:7:30;;15718:19:302;;3184:73:30;;;;;;;;;;;;3174:84;;;;;;3167:91;;3008:257;;;;;;2921:74;2914:81;;2842:160;:::o;2243:730:56:-;2324:7;2333:12;2361:9;:16;2381:2;2361:22;2357:610;;2697:4;2682:20;;2676:27;2746:4;2731:20;;2725:27;2803:4;2788:20;;2782:27;2399:9;2774:36;2844:25;2855:4;2774:36;2676:27;2725;2844:10;:25::i;:::-;2837:32;;;;;;;;;2357:610;-1:-1:-1;2916:1:56;;-1:-1:-1;2920:35:56;2357:610;2243:730;;;;;:::o;2459:297:30:-;4910:13:20;;;;;;;4902:69;;;;;;;14828:2:302;4902:69:20;;;14810:21:302;14867:2;14847:18;;;14840:30;14906:34;14886:18;;;14879:62;14977:13;14957:18;;;14950:41;15008:19;;4902:69:20;14626:407:302;4902:69:20;2592:22:30;;::::1;::::0;;::::1;::::0;2648:25;;;;;::::1;::::0;2683:12:::1;:25:::0;;;;2718:15:::1;:31:::0;2459:297::o;5167:1603:56:-;5293:7;;6217:66;6204:79;;6200:161;;;-1:-1:-1;6315:1:56;;-1:-1:-1;6319:30:56;6299:51;;6200:161;6374:1;:7;;6379:2;6374:7;;:18;;;;;6385:1;:7;;6390:2;6385:7;;6374:18;6370:100;;;-1:-1:-1;6424:1:56;;-1:-1:-1;6428:30:56;6408:51;;6370:100;6581:24;;;6564:14;6581:24;;;;;;;;;16231:25:302;;;16304:4;16292:17;;16272:18;;;16265:45;;;;16326:18;;;16319:34;;;16369:18;;;16362:34;;;6581:24:56;;16203:19:302;;6581:24:56;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6581:24:56;;;;;;-1:-1:-1;;6619:20:56;;;6615:101;;6671:1;6675:29;6655:50;;;;;;;6615:101;6734:6;-1:-1:-1;6742:20:56;;-1:-1:-1;5167:1603:56;;;;;;;;:::o;245:180:302:-;304:6;357:2;345:9;336:7;332:23;328:32;325:52;;;373:1;370;363:12;325:52;-1:-1:-1;396:23:302;;245:180;-1:-1:-1;245:180:302:o;430:689::-;525:6;533;541;594:2;582:9;573:7;569:23;565:32;562:52;;;610:1;607;600:12;562:52;650:9;637:23;679:18;720:2;712:6;709:14;706:34;;;736:1;733;726:12;706:34;774:6;763:9;759:22;749:32;;819:7;812:4;808:2;804:13;800:27;790:55;;841:1;838;831:12;790:55;881:2;868:16;907:2;899:6;896:14;893:34;;;923:1;920;913:12;893:34;978:7;971:4;961:6;958:1;954:14;950:2;946:23;942:34;939:47;936:67;;;999:1;996;989:12;936:67;1030:4;1022:13;;;;1054:6;;-1:-1:-1;1092:20:302;;;;1079:34;;430:689;-1:-1:-1;;;;430:689:302:o;1306:196::-;1374:20;;1434:42;1423:54;;1413:65;;1403:93;;1492:1;1489;1482:12;1403:93;1306:196;;;:::o;1507:184::-;1559:77;1556:1;1549:88;1656:4;1653:1;1646:15;1680:4;1677:1;1670:15;1696:690;1760:5;1790:18;1831:2;1823:6;1820:14;1817:40;;;1837:18;;:::i;:::-;1971:2;1965:9;2037:2;2025:15;;1876:66;2021:24;;;2047:2;2017:33;2013:42;2001:55;;;2071:18;;;2091:22;;;2068:46;2065:72;;;2117:18;;:::i;:::-;2157:10;2153:2;2146:22;2186:6;2177:15;;2216:6;2208;2201:22;2256:3;2247:6;2242:3;2238:16;2235:25;2232:45;;;2273:1;2270;2263:12;2232:45;2323:6;2318:3;2311:4;2303:6;2299:17;2286:44;2378:1;2371:4;2362:6;2354;2350:19;2346:30;2339:41;;;;1696:690;;;;;:::o;2391:748::-;2513:6;2521;2529;2573:9;2564:7;2560:23;2603:3;2599:2;2595:12;2592:32;;;2620:1;2617;2610:12;2592:32;2643:29;2662:9;2643:29;:::i;:::-;2633:39;;2765:2;2696:66;2692:2;2688:75;2684:84;2681:104;;;2781:1;2778;2771:12;2681:104;;2819:2;2808:9;2804:18;2794:28;;2873:2;2862:9;2858:18;2845:32;2900:18;2892:6;2889:30;2886:50;;;2932:1;2929;2922:12;2886:50;2955:22;;3008:4;3000:13;;2996:27;-1:-1:-1;2986:55:302;;3037:1;3034;3027:12;2986:55;3060:73;3125:7;3120:2;3107:16;3102:2;3098;3094:11;3060:73;:::i;:::-;3050:83;;;2391:748;;;;;:::o;3144:258::-;3216:1;3226:113;3240:6;3237:1;3234:13;3226:113;;;3316:11;;;3310:18;3297:11;;;3290:39;3262:2;3255:10;3226:113;;;3357:6;3354:1;3351:13;3348:48;;;3392:1;3383:6;3378:3;3374:16;3367:27;3348:48;;3144:258;;;:::o;3407:317::-;3449:3;3487:5;3481:12;3514:6;3509:3;3502:19;3530:63;3586:6;3579:4;3574:3;3570:14;3563:4;3556:5;3552:16;3530:63;:::i;:::-;3638:2;3626:15;3643:66;3622:88;3613:98;;;;3713:4;3609:109;;3407:317;-1:-1:-1;;3407:317:302:o;3729:220::-;3878:2;3867:9;3860:21;3841:4;3898:45;3939:2;3928:9;3924:18;3916:6;3898:45;:::i;3954:254::-;4022:6;4030;4083:2;4071:9;4062:7;4058:23;4054:32;4051:52;;;4099:1;4096;4089:12;4051:52;4122:29;4141:9;4122:29;:::i;:::-;4112:39;4198:2;4183:18;;;;4170:32;;-1:-1:-1;;;3954:254:302:o;4846:186::-;4905:6;4958:2;4946:9;4937:7;4933:23;4929:32;4926:52;;;4974:1;4971;4964:12;4926:52;4997:29;5016:9;4997:29;:::i;5037:450::-;5106:6;5159:2;5147:9;5138:7;5134:23;5130:32;5127:52;;;5175:1;5172;5165:12;5127:52;5215:9;5202:23;5248:18;5240:6;5237:30;5234:50;;;5280:1;5277;5270:12;5234:50;5303:22;;5356:4;5348:13;;5344:27;-1:-1:-1;5334:55:302;;5385:1;5382;5375:12;5334:55;5408:73;5473:7;5468:2;5455:16;5450:2;5446;5442:11;5408:73;:::i;6324:184::-;6376:77;6373:1;6366:88;6473:4;6470:1;6463:15;6497:4;6494:1;6487:15;6513:1236;6723:4;6752:2;6792;6781:9;6777:18;6822:2;6811:9;6804:21;6845:6;6880;6874:13;6911:6;6903;6896:22;6937:2;6927:12;;6970:2;6959:9;6955:18;6948:25;;7032:2;7022:6;7019:1;7015:14;7004:9;7000:30;6996:39;7070:2;7062:6;7058:15;7091:1;7101:619;7115:6;7112:1;7109:13;7101:619;;;7180:22;;;7204:66;7176:95;7164:108;;7295:13;;7367:9;;7378:42;7363:58;7348:74;;7465:11;;;7459:18;7442:15;;;7435:43;7517:11;;7511:18;7331:4;7549:15;;;7542:27;;;7592:48;7624:15;;;7511:18;7592:48;:::i;:::-;7698:12;;;;7582:58;-1:-1:-1;;;7663:15:302;;;;7137:1;7130:9;7101:619;;;-1:-1:-1;7737:6:302;;6513:1236;-1:-1:-1;;;;;;;;6513:1236:302:o;7754:338::-;7941:42;7933:6;7929:55;7918:9;7911:74;8021:2;8016;8005:9;8001:18;7994:30;7892:4;8041:45;8082:2;8071:9;8067:18;8059:6;8041:45;:::i;8572:184::-;8624:77;8621:1;8614:88;8721:4;8718:1;8711:15;8745:4;8742:1;8735:15;8761:128;8801:3;8832:1;8828:6;8825:1;8822:13;8819:39;;;8838:18;;:::i;:::-;-1:-1:-1;8874:9:302;;8761:128::o;10921:409::-;11136:42;11128:6;11124:55;11113:9;11106:74;11216:6;11211:2;11200:9;11196:18;11189:34;11259:2;11254;11243:9;11239:18;11232:30;11087:4;11279:45;11320:2;11309:9;11305:18;11297:6;11279:45;:::i;:::-;11271:53;10921:409;-1:-1:-1;;;;;10921:409:302:o;11335:960::-;11764:3;11802:6;11796:13;11818:53;11864:6;11859:3;11852:4;11844:6;11840:17;11818:53;:::i;:::-;11902:6;11897:3;11893:16;11880:29;;11928:3;11954:2;11947:5;11940:17;11988:6;11982:13;12004:65;12060:8;12056:1;12049:5;12045:13;12038:4;12030:6;12026:17;12004:65;:::i;:::-;12132:1;12088:20;;12124:10;;;12117:22;12164:13;;12186:62;12164:13;12235:1;12227:10;;12220:4;12208:17;;12186:62;:::i;:::-;12268:17;12287:1;12264:25;;11335:960;-1:-1:-1;;;;;11335:960:302:o;12914:184::-;12966:77;12963:1;12956:88;13063:4;13060:1;13053:15;13087:4;13084:1;13077:15;13103:289;13278:6;13267:9;13260:25;13321:2;13316;13305:9;13301:18;13294:30;13241:4;13341:45;13382:2;13371:9;13367:18;13359:6;13341:45;:::i;13397:274::-;13526:3;13564:6;13558:13;13580:53;13626:6;13621:3;13614:4;13606:6;13602:17;13580:53;:::i;:::-;13649:16;;;;;13397:274;-1:-1:-1;;13397:274:302:o;13676:184::-;13746:6;13799:2;13787:9;13778:7;13774:23;13770:32;13767:52;;;13815:1;13812;13805:12;13767:52;-1:-1:-1;13838:16:302;;13676:184;-1:-1:-1;13676:184:302:o;13865:195::-;13904:3;13935:66;13928:5;13925:77;13922:103;;14005:18;;:::i;:::-;-1:-1:-1;14052:1:302;14041:13;;13865:195::o;14065:184::-;14117:77;14114:1;14107:88;14214:4;14211:1;14204:15;14238:4;14235:1;14228:15;14254:120;14294:1;14320;14310:35;;14325:18;;:::i;:::-;-1:-1:-1;14359:9:302;;14254:120::o;14379:125::-;14419:4;14447:1;14444;14441:8;14438:34;;;14452:18;;:::i;:::-;-1:-1:-1;14489:9:302;;14379:125::o;14509:112::-;14541:1;14567;14557:35;;14572:18;;:::i;:::-;-1:-1:-1;14606:9:302;;14509:112::o",
    "linkReferences": {},
    "immutableReferences": {
      "80031": [
        {
          "start": 244,
          "length": 32
        },
        {
          "start": 948,
          "length": 32
        }
      ],
      "80035": [
        {
          "start": 599,
          "length": 32
        },
        {
          "start": 1617,
          "length": 32
        },
        {
          "start": 3074,
          "length": 32
        }
      ],
      "82893": [
        {
          "start": 3407,
          "length": 32
        }
      ],
      "82896": [
        {
          "start": 3448,
          "length": 32
        }
      ],
      "82899": [
        {
          "start": 3489,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_STATION()": "db083d71",
    "CAN_INVITE_ATTESTATION_KEY()": "916db22f",
    "CLAIMABLE_INVITE_TYPEHASH()": "c4fc453d",
    "EIP712_VERSION()": "eccec5a8",
    "INVITE_GRANTER()": "14b47241",
    "MIN_COMMITMENT_PERIOD()": "50b414e6",
    "claimInvite(address,(address,bytes32),bytes)": "50eedbc2",
    "commitInvite(bytes32)": "187e3cd1",
    "commitmentTimestamps(bytes32)": "b4245d73",
    "initialize(string)": "f62d1888",
    "inviteCounts(address)": "de2dd221",
    "setInviteCounts(address[],uint256)": "25b27a3d",
    "usedNonces(address,bytes32)": "5fda04c7",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviteGranter\",\"type\":\"address\"},{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"InviteClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAN_INVITE_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIMABLE_INVITE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITE_GRANTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COMMITMENT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"commitInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_inviteCount\",\"type\":\"uint256\"}],\"name\":\"setInviteCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:upgradeable\":\"@title  OptimistInviter\",\"events\":{\"InviteClaimed(address,address)\":{\"params\":{\"claimer\":\"Address that claimed the invite.\",\"issuer\":\"Address that issued the signature.\"}}},\"kind\":\"dev\",\"methods\":{\"claimInvite(address,(address,bytes32),bytes)\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct containing the issuer and nonce.\",\"_claimer\":\"Address that will be granted the invite.\",\"_signature\":\"Signature signed over the claimable invite.\"}},\"commitInvite(bytes32)\":{\"params\":{\"_commitment\":\"A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))\"}},\"constructor\":{\"custom:semver\":\"1.0.2\",\"params\":{\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_inviteGranter\":\"Address of the invite granter.\"}},\"initialize(string)\":{\"params\":{\"_name\":\"Contract name.\"}},\"setInviteCounts(address[],uint256)\":{\"params\":{\"_accounts\":\"An array of accounts to update the invite counts of.\",\"_inviteCount\":\"Number of invites to set to.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"InviteClaimed(address,address)\":{\"notice\":\"Emitted when an invite is claimed.\"}},\"kind\":\"user\",\"methods\":{\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"CAN_INVITE_ATTESTATION_KEY()\":{\"notice\":\"Attestation key for that signals that an account was allowed to issue invites\"},\"CLAIMABLE_INVITE_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the ClaimableInvite type.\"},\"EIP712_VERSION()\":{\"notice\":\"Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme.\"},\"INVITE_GRANTER()\":{\"notice\":\"Granter who can set accounts' invite counts.\"},\"MIN_COMMITMENT_PERIOD()\":{\"notice\":\"Minimum age of a commitment (in seconds) before it can be revealed using         claimInvite. Currently set to 60 seconds.        Prevents an attacker from front-running a commitment by taking the signature in the        claimInvite call and quickly committing and claiming it before the the claimer's        transaction succeeds. With this, frontrunning a commitment requires that an attacker        be able to prevent the honest claimer's claimInvite transaction from being included        for this long.\"},\"claimInvite(address,(address,bytes32),bytes)\":{\"notice\":\"Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \\\"optimist.can-mint-from-invite\\\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function.\"},\"commitInvite(bytes32)\":{\"notice\":\"Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the          issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite.\"},\"commitmentTimestamps(bytes32)\":{\"notice\":\"Maps from hashes to the timestamp when they were committed.\"},\"initialize(string)\":{\"notice\":\"Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures.\"},\"inviteCounts(address)\":{\"notice\":\"Maps from addresses to number of invites they have.\"},\"setInviteCounts(address[],uint256)\":{\"notice\":\"Allows invite granter to set the number of invites an address has.\"},\"usedNonces(address,bytes32)\":{\"notice\":\"Maps from addresses to nonces to whether or not they have been used.\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"OptimistInviter issues \\\"optimist.can-invite\\\" and \\\"optimist.can-mint-from-invite\\\"         attestations. Accounts that have invites can issue signatures that allow other         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the         invite to an address of their choosing.         Parties involved:          1) INVITE_GRANTER: trusted account that can allow accounts to issue invites          2) issuer: account that is allowed to issue invites          3) claimer: account that receives the invites        Flow:          1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number             of invites, and also creates a \\\"optimist.can-invite\\\" attestation for the issuer          2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature          3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature             to the recipient          4) claimer chooses an address they want to receive the invite on          5) claimer commits the hash of the address they want to receive the invite on and the             received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))             using the commitInvite function          6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.          7) claimer reveals the plaintext ClaimableInvite and the signature using the             claimInvite function, receiving the \\\"optimist.can-mint-from-invite\\\" attestation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/op-nft/OptimistInviter.sol\":\"OptimistInviter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=lib/clones-with-immutable-args/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb\",\"dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94\",\"dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b\",\"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe\"]},\"src/periphery/op-nft/AttestationStation.sol\":{\"keccak256\":\"0xab54f28712653e8926b23c501975aee5d3368dbf436a14da6ddb9dbc792de2ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a6c5ad2becb79bc6bf3afaaca89dfda6d8f096d55184c0adce20efb3ff19d33\",\"dweb:/ipfs/QmP3qyEYnB195og1FdvW4su4KoBZZQ7UzC8V7CQMz7Ear9\"]},\"src/periphery/op-nft/OptimistInviter.sol\":{\"keccak256\":\"0x447dd2c65410e42a8ddfa0245bcf68ffc51b6c0988715c2978ea4ccde70b8d55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db15eaab1f5ff2314590e535edca99edcc4ebede0170034219228357cdf0c4c2\",\"dweb:/ipfs/QmUqoY781MTXgHx2VrUueRmZKTxuzCt1DVHjxPDFsgYMC2\"]},\"src/periphery/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268\",\"dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2\"]},\"src/universal/Semver.sol\":{\"keccak256\":\"0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5909c0b049b03a2bc24816ecf15b0aaf18c04a963174e1eba7624321bef330d\",\"dweb:/ipfs/QmeqdutwZWHqQMXauNR6WY8PrUpfsTiWTQyanbnGM9QqzT\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_inviteGranter",
              "type": "address"
            },
            {
              "internalType": "contract AttestationStation",
              "name": "_attestationStation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "InviteClaimed",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_STATION",
          "outputs": [
            {
              "internalType": "contract AttestationStation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CAN_INVITE_ATTESTATION_KEY",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CLAIMABLE_INVITE_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "EIP712_VERSION",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "INVITE_GRANTER",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_COMMITMENT_PERIOD",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "struct OptimistInviter.ClaimableInvite",
              "name": "_claimableInvite",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "issuer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimInvite"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_commitment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitInvite"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "commitmentTimestamps",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "inviteCounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "_inviteCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setInviteCounts"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "usedNonces",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "claimInvite(address,(address,bytes32),bytes)": {
            "params": {
              "_claimableInvite": "ClaimableInvite struct containing the issuer and nonce.",
              "_claimer": "Address that will be granted the invite.",
              "_signature": "Signature signed over the claimable invite."
            }
          },
          "commitInvite(bytes32)": {
            "params": {
              "_commitment": "A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))"
            }
          },
          "constructor": {
            "custom:semver": "1.0.2",
            "params": {
              "_attestationStation": "Address of the AttestationStation contract.",
              "_inviteGranter": "Address of the invite granter."
            }
          },
          "initialize(string)": {
            "params": {
              "_name": "Contract name."
            }
          },
          "setInviteCounts(address[],uint256)": {
            "params": {
              "_accounts": "An array of accounts to update the invite counts of.",
              "_inviteCount": "Number of invites to set to."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ATTESTATION_STATION()": {
            "notice": "Address of the AttestationStation contract."
          },
          "CAN_INVITE_ATTESTATION_KEY()": {
            "notice": "Attestation key for that signals that an account was allowed to issue invites"
          },
          "CLAIMABLE_INVITE_TYPEHASH()": {
            "notice": "EIP712 typehash for the ClaimableInvite type."
          },
          "EIP712_VERSION()": {
            "notice": "Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme."
          },
          "INVITE_GRANTER()": {
            "notice": "Granter who can set accounts' invite counts."
          },
          "MIN_COMMITMENT_PERIOD()": {
            "notice": "Minimum age of a commitment (in seconds) before it can be revealed using         claimInvite. Currently set to 60 seconds.        Prevents an attacker from front-running a commitment by taking the signature in the        claimInvite call and quickly committing and claiming it before the the claimer's        transaction succeeds. With this, frontrunning a commitment requires that an attacker        be able to prevent the honest claimer's claimInvite transaction from being included        for this long."
          },
          "claimInvite(address,(address,bytes32),bytes)": {
            "notice": "Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function."
          },
          "commitInvite(bytes32)": {
            "notice": "Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the          issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite."
          },
          "commitmentTimestamps(bytes32)": {
            "notice": "Maps from hashes to the timestamp when they were committed."
          },
          "initialize(string)": {
            "notice": "Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures."
          },
          "inviteCounts(address)": {
            "notice": "Maps from addresses to number of invites they have."
          },
          "setInviteCounts(address[],uint256)": {
            "notice": "Allows invite granter to set the number of invites an address has."
          },
          "usedNonces(address,bytes32)": {
            "notice": "Maps from addresses to nonces to whether or not they have been used."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=lib/clones-with-immutable-args/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@rari-capital/solmate/=lib/solmate/",
        "clones-with-immutable-args/=lib/clones-with-immutable-args/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "safe-contracts/=lib/safe-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/periphery/op-nft/OptimistInviter.sol": "OptimistInviter"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
        "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
        "urls": [
          "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
          "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol": {
        "keccak256": "0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc",
        "urls": [
          "bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb",
          "dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol": {
        "keccak256": "0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc",
        "urls": [
          "bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94",
          "dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": {
        "keccak256": "0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544",
        "urls": [
          "bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e",
          "dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
        "urls": [
          "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
          "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
        "urls": [
          "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
          "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5",
        "urls": [
          "bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900",
          "dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol": {
        "keccak256": "0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81",
        "urls": [
          "bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b",
          "dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/AttestationStation.sol": {
        "keccak256": "0xab54f28712653e8926b23c501975aee5d3368dbf436a14da6ddb9dbc792de2ef",
        "urls": [
          "bzz-raw://8a6c5ad2becb79bc6bf3afaaca89dfda6d8f096d55184c0adce20efb3ff19d33",
          "dweb:/ipfs/QmP3qyEYnB195og1FdvW4su4KoBZZQ7UzC8V7CQMz7Ear9"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/OptimistInviter.sol": {
        "keccak256": "0x447dd2c65410e42a8ddfa0245bcf68ffc51b6c0988715c2978ea4ccde70b8d55",
        "urls": [
          "bzz-raw://db15eaab1f5ff2314590e535edca99edcc4ebede0170034219228357cdf0c4c2",
          "dweb:/ipfs/QmUqoY781MTXgHx2VrUueRmZKTxuzCt1DVHjxPDFsgYMC2"
        ],
        "license": "MIT"
      },
      "src/periphery/op-nft/libraries/OptimistConstants.sol": {
        "keccak256": "0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c",
        "urls": [
          "bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268",
          "dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2"
        ],
        "license": "MIT"
      },
      "src/universal/Semver.sol": {
        "keccak256": "0x9de68ce536aee1aa616b4bf88d7ccc335460e6edd0e7170bdbf94c4fe3d41c60",
        "urls": [
          "bzz-raw://d5909c0b049b03a2bc24816ecf15b0aaf18c04a963174e1eba7624321bef330d",
          "dweb:/ipfs/QmeqdutwZWHqQMXauNR6WY8PrUpfsTiWTQyanbnGM9QqzT"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29536,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 29539,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 31691,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 31693,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 31831,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 80049,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "commitmentTimestamps",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 80056,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "usedNonces",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 80061,
        "contract": "src/periphery/op-nft/OptimistInviter.sol:OptimistInviter",
        "label": "inviteCounts",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "ATTESTATION_STATION()": {
        "notice": "Address of the AttestationStation contract."
      },
      "CAN_INVITE_ATTESTATION_KEY()": {
        "notice": "Attestation key for that signals that an account was allowed to issue invites"
      },
      "CLAIMABLE_INVITE_TYPEHASH()": {
        "notice": "EIP712 typehash for the ClaimableInvite type."
      },
      "EIP712_VERSION()": {
        "notice": "Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme."
      },
      "INVITE_GRANTER()": {
        "notice": "Granter who can set accounts' invite counts."
      },
      "MIN_COMMITMENT_PERIOD()": {
        "notice": "Minimum age of a commitment (in seconds) before it can be revealed using         claimInvite. Currently set to 60 seconds.        Prevents an attacker from front-running a commitment by taking the signature in the        claimInvite call and quickly committing and claiming it before the the claimer's        transaction succeeds. With this, frontrunning a commitment requires that an attacker        be able to prevent the honest claimer's claimInvite transaction from being included        for this long."
      },
      "claimInvite(address,(address,bytes32),bytes)": {
        "notice": "Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function."
      },
      "commitInvite(bytes32)": {
        "notice": "Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the          issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite."
      },
      "commitmentTimestamps(bytes32)": {
        "notice": "Maps from hashes to the timestamp when they were committed."
      },
      "initialize(string)": {
        "notice": "Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures."
      },
      "inviteCounts(address)": {
        "notice": "Maps from addresses to number of invites they have."
      },
      "setInviteCounts(address[],uint256)": {
        "notice": "Allows invite granter to set the number of invites an address has."
      },
      "usedNonces(address,bytes32)": {
        "notice": "Maps from addresses to nonces to whether or not they have been used."
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "events": {
      "InviteClaimed(address,address)": {
        "notice": "Emitted when an invite is claimed."
      }
    },
    "notice": "OptimistInviter issues \"optimist.can-invite\" and \"optimist.can-mint-from-invite\"         attestations. Accounts that have invites can issue signatures that allow other         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the         invite to an address of their choosing.         Parties involved:          1) INVITE_GRANTER: trusted account that can allow accounts to issue invites          2) issuer: account that is allowed to issue invites          3) claimer: account that receives the invites        Flow:          1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number             of invites, and also creates a \"optimist.can-invite\" attestation for the issuer          2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature          3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature             to the recipient          4) claimer chooses an address they want to receive the invite on          5) claimer commits the hash of the address they want to receive the invite on and the             received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))             using the commitInvite function          6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.          7) claimer reveals the plaintext ClaimableInvite and the signature using the             claimInvite function, receiving the \"optimist.can-mint-from-invite\" attestation"
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "claimInvite(address,(address,bytes32),bytes)": {
        "params": {
          "_claimableInvite": "ClaimableInvite struct containing the issuer and nonce.",
          "_claimer": "Address that will be granted the invite.",
          "_signature": "Signature signed over the claimable invite."
        }
      },
      "commitInvite(bytes32)": {
        "params": {
          "_commitment": "A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))"
        }
      },
      "constructor": {
        "params": {
          "_attestationStation": "Address of the AttestationStation contract.",
          "_inviteGranter": "Address of the invite granter."
        }
      },
      "initialize(string)": {
        "params": {
          "_name": "Contract name."
        }
      },
      "setInviteCounts(address[],uint256)": {
        "params": {
          "_accounts": "An array of accounts to update the invite counts of.",
          "_inviteCount": "Number of invites to set to."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "events": {
      "InviteClaimed(address,address)": {
        "params": {
          "claimer": "Address that claimed the invite.",
          "issuer": "Address that issued the signature."
        }
      }
    }
  },
  "ast": {
    "absolutePath": "src/periphery/op-nft/OptimistInviter.sol",
    "id": 80327,
    "exportedSymbols": {
      "AttestationStation": [
        79552
      ],
      "EIP712Upgradeable": [
        31832
      ],
      "OptimistConstants": [
        80337
      ],
      "OptimistInviter": [
        80326
      ],
      "Semver": [
        82951
      ],
      "SignatureChecker": [
        36628
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:12963:199",
    "nodes": [
      {
        "id": 79989,
        "nodeType": "PragmaDirective",
        "src": "32:23:199",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 79991,
        "nodeType": "ImportDirective",
        "src": "57:70:199",
        "nodes": [],
        "absolutePath": "src/periphery/op-nft/libraries/OptimistConstants.sol",
        "file": "./libraries/OptimistConstants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 80327,
        "sourceUnit": 80338,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79990,
              "name": "OptimistConstants",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 80337,
              "src": "66:17:199",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79993,
        "nodeType": "ImportDirective",
        "src": "128:52:199",
        "nodes": [],
        "absolutePath": "src/universal/Semver.sol",
        "file": "../../universal/Semver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 80327,
        "sourceUnit": 82952,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79992,
              "name": "Semver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 82951,
              "src": "137:6:199",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79995,
        "nodeType": "ImportDirective",
        "src": "181:62:199",
        "nodes": [],
        "absolutePath": "src/periphery/op-nft/AttestationStation.sol",
        "file": "./AttestationStation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 80327,
        "sourceUnit": 79553,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79994,
              "name": "AttestationStation",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 79552,
              "src": "190:18:199",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79997,
        "nodeType": "ImportDirective",
        "src": "244:99:199",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol",
        "file": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 80327,
        "sourceUnit": 36629,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79996,
              "name": "SignatureChecker",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 36628,
              "src": "253:16:199",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 79999,
        "nodeType": "ImportDirective",
        "src": "344:119:199",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 80327,
        "sourceUnit": 31833,
        "symbolAliases": [
          {
            "foreign": {
              "id": 79998,
              "name": "EIP712Upgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 31832,
              "src": "353:17:199",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 80326,
        "nodeType": "ContractDefinition",
        "src": "2109:10885:199",
        "nodes": [
          {
            "id": 80011,
            "nodeType": "EventDefinition",
            "src": "2334:69:199",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 80005,
              "nodeType": "StructuredDocumentation",
              "src": "2169:160:199",
              "text": "@notice Emitted when an invite is claimed.\n @param issuer  Address that issued the signature.\n @param claimer Address that claimed the invite."
            },
            "eventSelector": "745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be475",
            "name": "InviteClaimed",
            "nameLocation": "2340:13:199",
            "parameters": {
              "id": 80010,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80007,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "issuer",
                  "nameLocation": "2370:6:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80011,
                  "src": "2354:22:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 80006,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2354:7:199",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80009,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "2394:7:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80011,
                  "src": "2378:23:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 80008,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2378:7:199",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2353:49:199"
            }
          },
          {
            "id": 80015,
            "nodeType": "VariableDeclaration",
            "src": "2787:47:199",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 80012,
              "nodeType": "StructuredDocumentation",
              "src": "2409:373:199",
              "text": "@notice Version used for the EIP712 domain separator. This version is separated from the\n         contract semver because the EIP712 domain separator is used to sign messages, and\n         changing the domain separator invalidates all existing signatures. We should only\n         bump this version if we make a major change to the signature scheme."
            },
            "functionSelector": "eccec5a8",
            "mutability": "constant",
            "name": "EIP712_VERSION",
            "nameLocation": "2810:14:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 80013,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2787:6:199",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "312e302e30",
              "id": 80014,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2827:7:199",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c",
                "typeString": "literal_string \"1.0.0\""
              },
              "value": "1.0.0"
            },
            "visibility": "public"
          },
          {
            "id": 80021,
            "nodeType": "VariableDeclaration",
            "src": "2903:110:199",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 80016,
              "nodeType": "StructuredDocumentation",
              "src": "2841:57:199",
              "text": "@notice EIP712 typehash for the ClaimableInvite type."
            },
            "functionSelector": "c4fc453d",
            "mutability": "constant",
            "name": "CLAIMABLE_INVITE_TYPEHASH",
            "nameLocation": "2927:25:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 80017,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2903:7:199",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "436c61696d61626c65496e766974652861646472657373206973737565722c62797465733332206e6f6e636529",
                  "id": 80019,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2965:47:199",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce",
                    "typeString": "literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""
                  },
                  "value": "ClaimableInvite(address issuer,bytes32 nonce)"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce",
                    "typeString": "literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""
                  }
                ],
                "id": 80018,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "2955:9:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 80020,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2955:58:199",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 80028,
            "nodeType": "VariableDeclaration",
            "src": "3114:83:199",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 80022,
              "nodeType": "StructuredDocumentation",
              "src": "3020:89:199",
              "text": "@notice Attestation key for that signals that an account was allowed to issue invites"
            },
            "functionSelector": "916db22f",
            "mutability": "constant",
            "name": "CAN_INVITE_ATTESTATION_KEY",
            "nameLocation": "3138:26:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 80023,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "3114:7:199",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "6f7074696d6973742e63616e2d696e76697465",
                  "id": 80026,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3175:21:199",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_194e027229dedfff64e3eaf50a6955d1acf0fe975d4bbe3c858320a5537c807d",
                    "typeString": "literal_string \"optimist.can-invite\""
                  },
                  "value": "optimist.can-invite"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_194e027229dedfff64e3eaf50a6955d1acf0fe975d4bbe3c858320a5537c807d",
                    "typeString": "literal_string \"optimist.can-invite\""
                  }
                ],
                "id": 80025,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "3167:7:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 80024,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "3167:7:199",
                  "typeDescriptions": {}
                }
              },
              "id": 80027,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "3167:30:199",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 80031,
            "nodeType": "VariableDeclaration",
            "src": "3265:39:199",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 80029,
              "nodeType": "StructuredDocumentation",
              "src": "3204:56:199",
              "text": "@notice Granter who can set accounts' invite counts."
            },
            "functionSelector": "14b47241",
            "mutability": "immutable",
            "name": "INVITE_GRANTER",
            "nameLocation": "3290:14:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 80030,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "3265:7:199",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 80035,
            "nodeType": "VariableDeclaration",
            "src": "3371:55:199",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 80032,
              "nodeType": "StructuredDocumentation",
              "src": "3311:55:199",
              "text": "@notice Address of the AttestationStation contract."
            },
            "functionSelector": "db083d71",
            "mutability": "immutable",
            "name": "ATTESTATION_STATION",
            "nameLocation": "3407:19:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AttestationStation_$79552",
              "typeString": "contract AttestationStation"
            },
            "typeName": {
              "id": 80034,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 80033,
                "name": "AttestationStation",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 79552,
                "src": "3371:18:199"
              },
              "referencedDeclaration": 79552,
              "src": "3371:18:199",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AttestationStation_$79552",
                "typeString": "contract AttestationStation"
              }
            },
            "visibility": "public"
          },
          {
            "id": 80039,
            "nodeType": "VariableDeclaration",
            "src": "4012:50:199",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 80036,
              "nodeType": "StructuredDocumentation",
              "src": "3433:574:199",
              "text": "@notice Minimum age of a commitment (in seconds) before it can be revealed using\n         claimInvite. Currently set to 60 seconds.\n        Prevents an attacker from front-running a commitment by taking the signature in the\n        claimInvite call and quickly committing and claiming it before the the claimer's\n        transaction succeeds. With this, frontrunning a commitment requires that an attacker\n        be able to prevent the honest claimer's claimInvite transaction from being included\n        for this long."
            },
            "functionSelector": "50b414e6",
            "mutability": "constant",
            "name": "MIN_COMMITMENT_PERIOD",
            "nameLocation": "4036:21:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 80037,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "4012:7:199",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3630",
              "id": 80038,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "4060:2:199",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_60_by_1",
                "typeString": "int_const 60"
              },
              "value": "60"
            },
            "visibility": "public"
          },
          {
            "id": 80044,
            "nodeType": "StructDefinition",
            "src": "4708:77:199",
            "nodes": [],
            "canonicalName": "OptimistInviter.ClaimableInvite",
            "members": [
              {
                "constant": false,
                "id": 80041,
                "mutability": "mutable",
                "name": "issuer",
                "nameLocation": "4749:6:199",
                "nodeType": "VariableDeclaration",
                "scope": 80044,
                "src": "4741:14:199",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 80040,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "4741:7:199",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 80043,
                "mutability": "mutable",
                "name": "nonce",
                "nameLocation": "4773:5:199",
                "nodeType": "VariableDeclaration",
                "scope": 80044,
                "src": "4765:13:199",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 80042,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "4765:7:199",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ClaimableInvite",
            "nameLocation": "4715:15:199",
            "scope": 80326,
            "visibility": "public"
          },
          {
            "id": 80049,
            "nodeType": "VariableDeclaration",
            "src": "4867:55:199",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 80045,
              "nodeType": "StructuredDocumentation",
              "src": "4791:71:199",
              "text": "@notice Maps from hashes to the timestamp when they were committed."
            },
            "functionSelector": "b4245d73",
            "mutability": "mutable",
            "name": "commitmentTimestamps",
            "nameLocation": "4902:20:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
              "typeString": "mapping(bytes32 => uint256)"
            },
            "typeName": {
              "id": 80048,
              "keyType": {
                "id": 80046,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "4875:7:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "4867:27:199",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                "typeString": "mapping(bytes32 => uint256)"
              },
              "valueType": {
                "id": 80047,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "4886:7:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 80056,
            "nodeType": "VariableDeclaration",
            "src": "5014:62:199",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 80050,
              "nodeType": "StructuredDocumentation",
              "src": "4929:80:199",
              "text": "@notice Maps from addresses to nonces to whether or not they have been used."
            },
            "functionSelector": "5fda04c7",
            "mutability": "mutable",
            "name": "usedNonces",
            "nameLocation": "5066:10:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(bytes32 => bool))"
            },
            "typeName": {
              "id": 80055,
              "keyType": {
                "id": 80051,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5022:7:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "5014:44:199",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(bytes32 => bool))"
              },
              "valueType": {
                "id": 80054,
                "keyType": {
                  "id": 80052,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "5041:7:199",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "nodeType": "Mapping",
                "src": "5033:24:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                  "typeString": "mapping(bytes32 => bool)"
                },
                "valueType": {
                  "id": 80053,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "5052:4:199",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 80061,
            "nodeType": "VariableDeclaration",
            "src": "5151:47:199",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 80057,
              "nodeType": "StructuredDocumentation",
              "src": "5083:63:199",
              "text": "@notice Maps from addresses to number of invites they have."
            },
            "functionSelector": "de2dd221",
            "mutability": "mutable",
            "name": "inviteCounts",
            "nameLocation": "5186:12:199",
            "scope": 80326,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 80060,
              "keyType": {
                "id": 80058,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "5159:7:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "5151:27:199",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 80059,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "5170:7:199",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 80084,
            "nodeType": "FunctionDefinition",
            "src": "5379:191:199",
            "nodes": [],
            "body": {
              "id": 80083,
              "nodeType": "Block",
              "src": "5471:99:199",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 80077,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 80075,
                      "name": "INVITE_GRANTER",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80031,
                      "src": "5481:14:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 80076,
                      "name": "_inviteGranter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80064,
                      "src": "5498:14:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5481:31:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 80078,
                  "nodeType": "ExpressionStatement",
                  "src": "5481:31:199"
                },
                {
                  "expression": {
                    "id": 80081,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 80079,
                      "name": "ATTESTATION_STATION",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80035,
                      "src": "5522:19:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$79552",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 80080,
                      "name": "_attestationStation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80067,
                      "src": "5544:19:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AttestationStation_$79552",
                        "typeString": "contract AttestationStation"
                      }
                    },
                    "src": "5522:41:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$79552",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "id": 80082,
                  "nodeType": "ExpressionStatement",
                  "src": "5522:41:199"
                }
              ]
            },
            "documentation": {
              "id": 80062,
              "nodeType": "StructuredDocumentation",
              "src": "5205:169:199",
              "text": "@custom:semver 1.0.2\n @param _inviteGranter      Address of the invite granter.\n @param _attestationStation Address of the AttestationStation contract."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "31",
                    "id": 80070,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5462:1:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  {
                    "hexValue": "30",
                    "id": 80071,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5465:1:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  {
                    "hexValue": "32",
                    "id": 80072,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5468:1:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 80073,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 80069,
                  "name": "Semver",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 82951,
                  "src": "5455:6:199"
                },
                "nodeType": "ModifierInvocation",
                "src": "5455:15:199"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 80068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80064,
                  "mutability": "mutable",
                  "name": "_inviteGranter",
                  "nameLocation": "5399:14:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80084,
                  "src": "5391:22:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 80063,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5391:7:199",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80067,
                  "mutability": "mutable",
                  "name": "_attestationStation",
                  "nameLocation": "5434:19:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80084,
                  "src": "5415:38:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AttestationStation_$79552",
                    "typeString": "contract AttestationStation"
                  },
                  "typeName": {
                    "id": 80066,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 80065,
                      "name": "AttestationStation",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 79552,
                      "src": "5415:18:199"
                    },
                    "referencedDeclaration": 79552,
                    "src": "5415:18:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AttestationStation_$79552",
                      "typeString": "contract AttestationStation"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5390:64:199"
            },
            "returnParameters": {
              "id": 80074,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5471:0:199"
            },
            "scope": 80326,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 80098,
            "nodeType": "FunctionDefinition",
            "src": "6059:113:199",
            "nodes": [],
            "body": {
              "id": 80097,
              "nodeType": "Block",
              "src": "6119:53:199",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 80093,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80087,
                        "src": "6143:5:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 80094,
                        "name": "EIP712_VERSION",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80015,
                        "src": "6150:14:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 80092,
                      "name": "__EIP712_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31714,
                      "src": "6129:13:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 80095,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6129:36:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80096,
                  "nodeType": "ExpressionStatement",
                  "src": "6129:36:199"
                }
              ]
            },
            "documentation": {
              "id": 80085,
              "nodeType": "StructuredDocumentation",
              "src": "5576:478:199",
              "text": "@notice Initializes this contract, setting the EIP712 context.\n         Only update the EIP712_VERSION when there is a change to the signature scheme.\n         After the EIP712 version is changed, any signatures issued off-chain but not\n         claimed yet will no longer be accepted by the claimInvite function. Please make\n         sure to notify the issuers that they must re-issue their invite signatures.\n @param _name Contract name."
            },
            "functionSelector": "f62d1888",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 80090,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 80089,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29600,
                  "src": "6107:11:199"
                },
                "nodeType": "ModifierInvocation",
                "src": "6107:11:199"
              }
            ],
            "name": "initialize",
            "nameLocation": "6068:10:199",
            "parameters": {
              "id": 80088,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80087,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "6093:5:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80098,
                  "src": "6079:19:199",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 80086,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6079:6:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6078:21:199"
            },
            "returnParameters": {
              "id": 80091,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6119:0:199"
            },
            "scope": 80326,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 80176,
            "nodeType": "FunctionDefinition",
            "src": "6399:985:199",
            "nodes": [],
            "body": {
              "id": 80175,
              "nodeType": "Block",
              "src": "6483:901:199",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 80111,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 80108,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6550:3:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 80109,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6550:10:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 80110,
                          "name": "INVITE_GRANTER",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80031,
                          "src": "6564:14:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6550:28:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a206f6e6c7920696e76697465206772616e7465722063616e206772616e7420696e7669746573",
                        "id": 80112,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6580:56:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2ed6b1c9b6c6de89f3a38c5e03d0c95f86fa67832406c6da6875cfaee06b0888",
                          "typeString": "literal_string \"OptimistInviter: only invite granter can grant invites\""
                        },
                        "value": "OptimistInviter: only invite granter can grant invites"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2ed6b1c9b6c6de89f3a38c5e03d0c95f86fa67832406c6da6875cfaee06b0888",
                          "typeString": "literal_string \"OptimistInviter: only invite granter can grant invites\""
                        }
                      ],
                      "id": 80107,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6542:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80113,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6542:95:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80114,
                  "nodeType": "ExpressionStatement",
                  "src": "6542:95:199"
                },
                {
                  "assignments": [
                    80116
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 80116,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "6656:6:199",
                      "nodeType": "VariableDeclaration",
                      "scope": 80175,
                      "src": "6648:14:199",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 80115,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6648:7:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 80119,
                  "initialValue": {
                    "expression": {
                      "id": 80117,
                      "name": "_accounts",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80102,
                      "src": "6665:9:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                        "typeString": "address[] calldata"
                      }
                    },
                    "id": 80118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "6665:16:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6648:33:199"
                },
                {
                  "assignments": [
                    80125
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 80125,
                      "mutability": "mutable",
                      "name": "attestations",
                      "nameLocation": "6736:12:199",
                      "nodeType": "VariableDeclaration",
                      "scope": 80175,
                      "src": "6692:56:199",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct AttestationStation.AttestationData[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 80123,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 80122,
                            "name": "AttestationStation.AttestationData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 79448,
                            "src": "6692:34:199"
                          },
                          "referencedDeclaration": 79448,
                          "src": "6692:34:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AttestationData_$79448_storage_ptr",
                            "typeString": "struct AttestationStation.AttestationData"
                          }
                        },
                        "id": 80124,
                        "nodeType": "ArrayTypeName",
                        "src": "6692:36:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_storage_$dyn_storage_ptr",
                          "typeString": "struct AttestationStation.AttestationData[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 80132,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 80130,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80116,
                        "src": "6792:6:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 80129,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "6751:40:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (struct AttestationStation.AttestationData memory[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 80127,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 80126,
                            "name": "AttestationStation.AttestationData",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 79448,
                            "src": "6755:34:199"
                          },
                          "referencedDeclaration": 79448,
                          "src": "6755:34:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AttestationData_$79448_storage_ptr",
                            "typeString": "struct AttestationStation.AttestationData"
                          }
                        },
                        "id": 80128,
                        "nodeType": "ArrayTypeName",
                        "src": "6755:36:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_storage_$dyn_storage_ptr",
                          "typeString": "struct AttestationStation.AttestationData[]"
                        }
                      }
                    },
                    "id": 80131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6751:48:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct AttestationStation.AttestationData memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6692:107:199"
                },
                {
                  "body": {
                    "id": 80167,
                    "nodeType": "Block",
                    "src": "6839:488:199",
                    "statements": [
                      {
                        "expression": {
                          "id": 80145,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 80139,
                              "name": "inviteCounts",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80061,
                              "src": "6913:12:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 80143,
                            "indexExpression": {
                              "baseExpression": {
                                "id": 80140,
                                "name": "_accounts",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 80102,
                                "src": "6926:9:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                  "typeString": "address[] calldata"
                                }
                              },
                              "id": 80142,
                              "indexExpression": {
                                "id": 80141,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 80134,
                                "src": "6936:1:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6926:12:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6913:26:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 80144,
                            "name": "_inviteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80104,
                            "src": "6942:12:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6913:41:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 80146,
                        "nodeType": "ExpressionStatement",
                        "src": "6913:41:199"
                      },
                      {
                        "expression": {
                          "id": 80161,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 80147,
                              "name": "attestations",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80125,
                              "src": "7066:12:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct AttestationStation.AttestationData memory[] memory"
                              }
                            },
                            "id": 80149,
                            "indexExpression": {
                              "id": 80148,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80134,
                              "src": "7079:1:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7066:15:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AttestationData_$79448_memory_ptr",
                              "typeString": "struct AttestationStation.AttestationData memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 80152,
                                  "name": "_accounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80102,
                                  "src": "7144:9:199",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                    "typeString": "address[] calldata"
                                  }
                                },
                                "id": 80154,
                                "indexExpression": {
                                  "id": 80153,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80134,
                                  "src": "7154:1:199",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7144:12:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 80155,
                                "name": "CAN_INVITE_ATTESTATION_KEY",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 80028,
                                "src": "7179:26:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "74727565",
                                    "id": 80158,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7234:6:199",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034",
                                      "typeString": "literal_string \"true\""
                                    },
                                    "value": "true"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034",
                                      "typeString": "literal_string \"true\""
                                    }
                                  ],
                                  "id": 80157,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "7228:5:199",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 80156,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7228:5:199",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 80159,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7228:13:199",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 80150,
                                "name": "AttestationStation",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 79552,
                                "src": "7084:18:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_AttestationStation_$79552_$",
                                  "typeString": "type(contract AttestationStation)"
                                }
                              },
                              "id": 80151,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "AttestationData",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 79448,
                              "src": "7084:34:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_AttestationData_$79448_storage_ptr_$",
                                "typeString": "type(struct AttestationStation.AttestationData storage pointer)"
                              }
                            },
                            "id": 80160,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "about",
                              "key",
                              "val"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "7084:172:199",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_AttestationData_$79448_memory_ptr",
                              "typeString": "struct AttestationStation.AttestationData memory"
                            }
                          },
                          "src": "7066:190:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AttestationData_$79448_memory_ptr",
                            "typeString": "struct AttestationStation.AttestationData memory"
                          }
                        },
                        "id": 80162,
                        "nodeType": "ExpressionStatement",
                        "src": "7066:190:199"
                      },
                      {
                        "id": 80166,
                        "nodeType": "UncheckedBlock",
                        "src": "7271:46:199",
                        "statements": [
                          {
                            "expression": {
                              "id": 80164,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "7299:3:199",
                              "subExpression": {
                                "id": 80163,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 80134,
                                "src": "7301:1:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 80165,
                            "nodeType": "ExpressionStatement",
                            "src": "7299:3:199"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 80138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 80136,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80134,
                      "src": "6826:1:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 80137,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80116,
                      "src": "6830:6:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6826:10:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 80168,
                  "initializationExpression": {
                    "assignments": [
                      80134
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 80134,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "6823:1:199",
                        "nodeType": "VariableDeclaration",
                        "scope": 80168,
                        "src": "6815:9:199",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 80133,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6815:7:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 80135,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6815:9:199"
                  },
                  "nodeType": "ForStatement",
                  "src": "6810:517:199"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 80172,
                        "name": "attestations",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80125,
                        "src": "7364:12:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AttestationStation.AttestationData memory[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AttestationStation.AttestationData memory[] memory"
                        }
                      ],
                      "expression": {
                        "id": 80169,
                        "name": "ATTESTATION_STATION",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80035,
                        "src": "7337:19:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AttestationStation_$79552",
                          "typeString": "contract AttestationStation"
                        }
                      },
                      "id": 80171,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "attest",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 79551,
                      "src": "7337:26:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_struct$_AttestationData_$79448_memory_ptr_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (struct AttestationStation.AttestationData memory[] memory) external"
                      }
                    },
                    "id": 80173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7337:40:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80174,
                  "nodeType": "ExpressionStatement",
                  "src": "7337:40:199"
                }
              ]
            },
            "documentation": {
              "id": 80099,
              "nodeType": "StructuredDocumentation",
              "src": "6178:216:199",
              "text": "@notice Allows invite granter to set the number of invites an address has.\n @param _accounts    An array of accounts to update the invite counts of.\n @param _inviteCount Number of invites to set to."
            },
            "functionSelector": "25b27a3d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setInviteCounts",
            "nameLocation": "6408:15:199",
            "parameters": {
              "id": 80105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80102,
                  "mutability": "mutable",
                  "name": "_accounts",
                  "nameLocation": "6443:9:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80176,
                  "src": "6424:28:199",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 80100,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "6424:7:199",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 80101,
                    "nodeType": "ArrayTypeName",
                    "src": "6424:9:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80104,
                  "mutability": "mutable",
                  "name": "_inviteCount",
                  "nameLocation": "6462:12:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80176,
                  "src": "6454:20:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 80103,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6454:7:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6423:52:199"
            },
            "returnParameters": {
              "id": 80106,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6483:0:199"
            },
            "scope": 80326,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 80199,
            "nodeType": "FunctionDefinition",
            "src": "8530:500:199",
            "nodes": [],
            "body": {
              "id": 80198,
              "nodeType": "Block",
              "src": "8580:450:199",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 80187,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 80183,
                            "name": "commitmentTimestamps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80049,
                            "src": "8878:20:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 80185,
                          "indexExpression": {
                            "id": 80184,
                            "name": "_commitment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80179,
                            "src": "8899:11:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8878:33:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 80186,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8915:1:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "8878:38:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c7265616479206d616465",
                        "id": 80188,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8918:42:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c59771144ba9f9a8f1889fbc4d2b3d0f0ccf8cf5ea047589db40484a07632fcf",
                          "typeString": "literal_string \"OptimistInviter: commitment already made\""
                        },
                        "value": "OptimistInviter: commitment already made"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c59771144ba9f9a8f1889fbc4d2b3d0f0ccf8cf5ea047589db40484a07632fcf",
                          "typeString": "literal_string \"OptimistInviter: commitment already made\""
                        }
                      ],
                      "id": 80182,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8870:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80189,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8870:91:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80190,
                  "nodeType": "ExpressionStatement",
                  "src": "8870:91:199"
                },
                {
                  "expression": {
                    "id": 80196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 80191,
                        "name": "commitmentTimestamps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80049,
                        "src": "8972:20:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        }
                      },
                      "id": 80193,
                      "indexExpression": {
                        "id": 80192,
                        "name": "_commitment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80179,
                        "src": "8993:11:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8972:33:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 80194,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "9008:5:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 80195,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "9008:15:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8972:51:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 80197,
                  "nodeType": "ExpressionStatement",
                  "src": "8972:51:199"
                }
              ]
            },
            "documentation": {
              "id": 80177,
              "nodeType": "StructuredDocumentation",
              "src": "7390:1135:199",
              "text": "@notice Allows anyone (but likely the claimer) to commit a received signature along with the\n         address to claim to.\n         Before calling this function, the claimer should have received a signature from the\n          issuer off-chain. The claimer then calls this function with the hash of the\n         claimer's address and the received signature. This is necessary to prevent\n         front-running when the invitee is claiming the invite. Without a commit and reveal\n         scheme, anyone who is watching the mempool can take the signature being submitted\n         and front run the transaction to claim the invite to their own address.\n         The same commitment can only be made once, and the function reverts if the\n         commitment has already been made. This prevents griefing where a malicious party can\n         prevent the original claimer from being able to claimInvite.\n @param _commitment A hash of the claimer and signature concatenated.\n                    keccak256(abi.encode(_claimer, _signature))"
            },
            "functionSelector": "187e3cd1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "commitInvite",
            "nameLocation": "8539:12:199",
            "parameters": {
              "id": 80180,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80179,
                  "mutability": "mutable",
                  "name": "_commitment",
                  "nameLocation": "8560:11:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80199,
                  "src": "8552:19:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 80178,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8552:7:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8551:21:199"
            },
            "returnParameters": {
              "id": 80181,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8580:0:199"
            },
            "scope": 80326,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 80325,
            "nodeType": "FunctionDefinition",
            "src": "10100:2892:199",
            "nodes": [],
            "body": {
              "id": 80324,
              "nodeType": "Block",
              "src": "10214:2778:199",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    80211
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 80211,
                      "mutability": "mutable",
                      "name": "commitmentTimestamp",
                      "nameLocation": "10232:19:199",
                      "nodeType": "VariableDeclaration",
                      "scope": 80324,
                      "src": "10224:27:199",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 80210,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10224:7:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 80221,
                  "initialValue": {
                    "baseExpression": {
                      "id": 80212,
                      "name": "commitmentTimestamps",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80049,
                      "src": "10254:20:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      }
                    },
                    "id": 80220,
                    "indexExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 80216,
                              "name": "_claimer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80202,
                              "src": "10296:8:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 80217,
                              "name": "_signature",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80207,
                              "src": "10306:10:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 80214,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "10285:3:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 80215,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encode",
                            "nodeType": "MemberAccess",
                            "src": "10285:10:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 80218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10285:32:199",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 80213,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -8,
                        "src": "10275:9:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 80219,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10275:43:199",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "10254:65:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10224:95:199"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 80225,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 80223,
                          "name": "commitmentTimestamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80211,
                          "src": "10406:19:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 80224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "10428:1:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "10406:23:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a20636c61696d657220616e64207369676e61747572652068617665206e6f74206265656e20636f6d6d697474656420796574",
                        "id": 80226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10431:68:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_150b4b3e6269d0a7956082ba4b1397ebce37ad4da3497a50fd839e20f1abacab",
                          "typeString": "literal_string \"OptimistInviter: claimer and signature have not been committed yet\""
                        },
                        "value": "OptimistInviter: claimer and signature have not been committed yet"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_150b4b3e6269d0a7956082ba4b1397ebce37ad4da3497a50fd839e20f1abacab",
                          "typeString": "literal_string \"OptimistInviter: claimer and signature have not been committed yet\""
                        }
                      ],
                      "id": 80222,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10398:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80227,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10398:102:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80228,
                  "nodeType": "ExpressionStatement",
                  "src": "10398:102:199"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 80235,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 80232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 80230,
                            "name": "commitmentTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80211,
                            "src": "10618:19:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 80231,
                            "name": "MIN_COMMITMENT_PERIOD",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80039,
                            "src": "10640:21:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10618:43:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 80233,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "10665:5:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 80234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "10665:15:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10618:62:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d656e7420706572696f6420686173206e6f7420656c617073656420796574",
                        "id": 80236,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10694:64:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1754a1cd909c83dd8a333d19716782ee95053d12f7fb0cbcefb106d20e57dd77",
                          "typeString": "literal_string \"OptimistInviter: minimum commitment period has not elapsed yet\""
                        },
                        "value": "OptimistInviter: minimum commitment period has not elapsed yet"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1754a1cd909c83dd8a333d19716782ee95053d12f7fb0cbcefb106d20e57dd77",
                          "typeString": "literal_string \"OptimistInviter: minimum commitment period has not elapsed yet\""
                        }
                      ],
                      "id": 80229,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10597:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10597:171:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80238,
                  "nodeType": "ExpressionStatement",
                  "src": "10597:171:199"
                },
                {
                  "assignments": [
                    80240
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 80240,
                      "mutability": "mutable",
                      "name": "digest",
                      "nameLocation": "10866:6:199",
                      "nodeType": "VariableDeclaration",
                      "scope": 80324,
                      "src": "10858:14:199",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 80239,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "10858:7:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 80253,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 80245,
                                "name": "CLAIMABLE_INVITE_TYPEHASH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 80021,
                                "src": "10926:25:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "expression": {
                                  "id": 80246,
                                  "name": "_claimableInvite",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80205,
                                  "src": "10953:16:199",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                    "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                                  }
                                },
                                "id": 80247,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "issuer",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 80041,
                                "src": "10953:23:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "expression": {
                                  "id": 80248,
                                  "name": "_claimableInvite",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 80205,
                                  "src": "10978:16:199",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                    "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                                  }
                                },
                                "id": 80249,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "nonce",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 80043,
                                "src": "10978:22:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "id": 80243,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "10915:3:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 80244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "10915:10:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 80250,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10915:86:199",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 80242,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "10905:9:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 80251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10905:97:199",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 80241,
                      "name": "_hashTypedDataV4",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31808,
                      "src": "10875:16:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) view returns (bytes32)"
                      }
                    },
                    "id": 80252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10875:137:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10858:154:199"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 80257,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80205,
                              "src": "11439:16:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 80258,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 80041,
                            "src": "11439:23:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 80259,
                            "name": "digest",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80240,
                            "src": "11464:6:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 80260,
                            "name": "_signature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80207,
                            "src": "11472:10:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 80255,
                            "name": "SignatureChecker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 36628,
                            "src": "11402:16:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_SignatureChecker_$36628_$",
                              "typeString": "type(library SignatureChecker)"
                            }
                          },
                          "id": 80256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "isValidSignatureNow",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 36627,
                          "src": "11402:36:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (address,bytes32,bytes memory) view returns (bool)"
                          }
                        },
                        "id": 80261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11402:81:199",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a20696e76616c6964207369676e6174757265",
                        "id": 80262,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11497:36:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_500930103ce0a9c4420cfce4d485d194eb14c0f8e4a31d95173bd70c498a047a",
                          "typeString": "literal_string \"OptimistInviter: invalid signature\""
                        },
                        "value": "OptimistInviter: invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_500930103ce0a9c4420cfce4d485d194eb14c0f8e4a31d95173bd70c498a047a",
                          "typeString": "literal_string \"OptimistInviter: invalid signature\""
                        }
                      ],
                      "id": 80254,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11381:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11381:162:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80264,
                  "nodeType": "ExpressionStatement",
                  "src": "11381:162:199"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 80274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 80266,
                              "name": "usedNonces",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80056,
                              "src": "11871:10:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(bytes32 => bool))"
                              }
                            },
                            "id": 80269,
                            "indexExpression": {
                              "expression": {
                                "id": 80267,
                                "name": "_claimableInvite",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 80205,
                                "src": "11882:16:199",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                  "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                                }
                              },
                              "id": 80268,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "issuer",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 80041,
                              "src": "11882:23:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11871:35:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                              "typeString": "mapping(bytes32 => bool)"
                            }
                          },
                          "id": 80272,
                          "indexExpression": {
                            "expression": {
                              "id": 80270,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80205,
                              "src": "11907:16:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 80271,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nonce",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 80043,
                            "src": "11907:22:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11871:59:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 80273,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11934:5:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "11871:68:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a206e6f6e63652068617320616c7265616479206265656e2075736564",
                        "id": 80275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11953:46:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_68c43792175e0a784516b96c87171fd219b33a959a07a37ddad143e606225f08",
                          "typeString": "literal_string \"OptimistInviter: nonce has already been used\""
                        },
                        "value": "OptimistInviter: nonce has already been used"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_68c43792175e0a784516b96c87171fd219b33a959a07a37ddad143e606225f08",
                          "typeString": "literal_string \"OptimistInviter: nonce has already been used\""
                        }
                      ],
                      "id": 80265,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11850:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11850:159:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80277,
                  "nodeType": "ExpressionStatement",
                  "src": "11850:159:199"
                },
                {
                  "expression": {
                    "id": 80286,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 80278,
                          "name": "usedNonces",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80056,
                          "src": "12099:10:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(bytes32 => bool))"
                          }
                        },
                        "id": 80283,
                        "indexExpression": {
                          "expression": {
                            "id": 80279,
                            "name": "_claimableInvite",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80205,
                            "src": "12110:16:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                              "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                            }
                          },
                          "id": 80280,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "issuer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 80041,
                          "src": "12110:23:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "12099:35:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 80284,
                      "indexExpression": {
                        "expression": {
                          "id": 80281,
                          "name": "_claimableInvite",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80205,
                          "src": "12135:16:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                            "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                          }
                        },
                        "id": 80282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "nonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 80043,
                        "src": "12135:22:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "12099:59:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 80285,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12161:4:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "12099:66:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 80287,
                  "nodeType": "ExpressionStatement",
                  "src": "12099:66:199"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 80294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 80289,
                            "name": "inviteCounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80061,
                            "src": "12279:12:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 80292,
                          "indexExpression": {
                            "expression": {
                              "id": 80290,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80205,
                              "src": "12292:16:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 80291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 80041,
                            "src": "12292:23:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12279:37:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 80293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12319:1:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "12279:41:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f7074696d697374496e76697465723a2069737375657220686173206e6f20696e7669746573",
                        "id": 80295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12322:40:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4803ebd41cbbd33bc67587d140c1e958b45e936e7a319866a2bc4472749b0b82",
                          "typeString": "literal_string \"OptimistInviter: issuer has no invites\""
                        },
                        "value": "OptimistInviter: issuer has no invites"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4803ebd41cbbd33bc67587d140c1e958b45e936e7a319866a2bc4472749b0b82",
                          "typeString": "literal_string \"OptimistInviter: issuer has no invites\""
                        }
                      ],
                      "id": 80288,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "12271:7:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12271:92:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80297,
                  "nodeType": "ExpressionStatement",
                  "src": "12271:92:199"
                },
                {
                  "id": 80304,
                  "nodeType": "UncheckedBlock",
                  "src": "12494:74:199",
                  "statements": [
                    {
                      "expression": {
                        "id": 80302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "--",
                        "prefix": true,
                        "src": "12518:39:199",
                        "subExpression": {
                          "baseExpression": {
                            "id": 80298,
                            "name": "inviteCounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80061,
                            "src": "12520:12:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 80301,
                          "indexExpression": {
                            "expression": {
                              "id": 80299,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80205,
                              "src": "12533:16:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 80300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 80041,
                            "src": "12533:23:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "12520:37:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 80303,
                      "nodeType": "ExpressionStatement",
                      "src": "12518:39:199"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 80308,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80202,
                        "src": "12777:8:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 80309,
                          "name": "OptimistConstants",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80337,
                          "src": "12799:17:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_OptimistConstants_$80337_$",
                            "typeString": "type(library OptimistConstants)"
                          }
                        },
                        "id": 80310,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "OPTIMIST_CAN_MINT_FROM_INVITE_ATTESTATION_KEY",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 80336,
                        "src": "12799:63:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 80313,
                              "name": "_claimableInvite",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 80205,
                              "src": "12887:16:199",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                                "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                              }
                            },
                            "id": 80314,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "issuer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 80041,
                            "src": "12887:23:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 80311,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "12876:3:199",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 80312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "12876:10:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 80315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12876:35:199",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 80305,
                        "name": "ATTESTATION_STATION",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80035,
                        "src": "12737:19:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AttestationStation_$79552",
                          "typeString": "contract AttestationStation"
                        }
                      },
                      "id": 80307,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "attest",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 79508,
                      "src": "12737:26:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes32,bytes memory) external"
                      }
                    },
                    "id": 80316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12737:184:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80317,
                  "nodeType": "ExpressionStatement",
                  "src": "12737:184:199"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 80319,
                          "name": "_claimableInvite",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80205,
                          "src": "12951:16:199",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                            "typeString": "struct OptimistInviter.ClaimableInvite calldata"
                          }
                        },
                        "id": 80320,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "issuer",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 80041,
                        "src": "12951:23:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 80321,
                        "name": "_claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80202,
                        "src": "12976:8:199",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 80318,
                      "name": "InviteClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80011,
                      "src": "12937:13:199",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 80322,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12937:48:199",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80323,
                  "nodeType": "EmitStatement",
                  "src": "12932:53:199"
                }
              ]
            },
            "documentation": {
              "id": 80200,
              "nodeType": "StructuredDocumentation",
              "src": "9036:1059:199",
              "text": "@notice Allows anyone to reveal a commitment and claim an invite.\n         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already\n         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"\n         attestation, this function checks that\n           1) the hash corresponding to the _claimer and the _signature was committed\n           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.\n           3) the _signature is signed correctly by the issuer\n           4) the _signature hasn't already been used to claim an invite before\n           5) the _signature issuer has not used up all of their invites\n         This function doesn't require that the _claimer is calling this function.\n @param _claimer         Address that will be granted the invite.\n @param _claimableInvite ClaimableInvite struct containing the issuer and nonce.\n @param _signature       Signature signed over the claimable invite."
            },
            "functionSelector": "50eedbc2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "claimInvite",
            "nameLocation": "10109:11:199",
            "parameters": {
              "id": 80208,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80202,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "10129:8:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80325,
                  "src": "10121:16:199",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 80201,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10121:7:199",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80205,
                  "mutability": "mutable",
                  "name": "_claimableInvite",
                  "nameLocation": "10164:16:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80325,
                  "src": "10139:41:199",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ClaimableInvite_$80044_calldata_ptr",
                    "typeString": "struct OptimistInviter.ClaimableInvite"
                  },
                  "typeName": {
                    "id": 80204,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 80203,
                      "name": "ClaimableInvite",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 80044,
                      "src": "10139:15:199"
                    },
                    "referencedDeclaration": 80044,
                    "src": "10139:15:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ClaimableInvite_$80044_storage_ptr",
                      "typeString": "struct OptimistInviter.ClaimableInvite"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80207,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "10195:10:199",
                  "nodeType": "VariableDeclaration",
                  "scope": 80325,
                  "src": "10182:23:199",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 80206,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10182:5:199",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10120:86:199"
            },
            "returnParameters": {
              "id": 80209,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10214:0:199"
            },
            "scope": 80326,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 80001,
              "name": "Semver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 82951,
              "src": "2137:6:199"
            },
            "id": 80002,
            "nodeType": "InheritanceSpecifier",
            "src": "2137:6:199"
          },
          {
            "baseName": {
              "id": 80003,
              "name": "EIP712Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 31832,
              "src": "2145:17:199"
            },
            "id": 80004,
            "nodeType": "InheritanceSpecifier",
            "src": "2145:17:199"
          }
        ],
        "canonicalName": "OptimistInviter",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 80000,
          "nodeType": "StructuredDocumentation",
          "src": "465:1644:199",
          "text": "@custom:upgradeable\n @title  OptimistInviter\n @notice OptimistInviter issues \"optimist.can-invite\" and \"optimist.can-mint-from-invite\"\n         attestations. Accounts that have invites can issue signatures that allow other\n         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the\n         invite to an address of their choosing.\n         Parties involved:\n          1) INVITE_GRANTER: trusted account that can allow accounts to issue invites\n          2) issuer: account that is allowed to issue invites\n          3) claimer: account that receives the invites\n        Flow:\n          1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number\n             of invites, and also creates a \"optimist.can-invite\" attestation for the issuer\n          2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature\n          3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature\n             to the recipient\n          4) claimer chooses an address they want to receive the invite on\n          5) claimer commits the hash of the address they want to receive the invite on and the\n             received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))\n             using the commitInvite function\n          6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.\n          7) claimer reveals the plaintext ClaimableInvite and the signature using the\n             claimInvite function, receiving the \"optimist.can-mint-from-invite\" attestation"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          80326,
          31832,
          29680,
          82951
        ],
        "name": "OptimistInviter",
        "nameLocation": "2118:15:199",
        "scope": 80327,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 199
}